
OLEDTimer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000088  00000000  00000000  000000f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000d9e  2**0
                  ALLOC, LOAD, DATA
  2 .bss          00000004  00800060  00800060  00000d9e  2**0
                  ALLOC
  3 .comment      0000002f  00000000  00000000  00000d9e  2**0
                  CONTENTS, READONLY
  4 .stack.descriptors.hdr 0000001c  00000000  00000000  00000dcd  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000178  00000000  00000000  00000de9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000026bd  00000000  00000000  00000f61  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000093e  00000000  00000000  0000361e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000da7  00000000  00000000  00003f5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004c4  00000000  00000000  00004d04  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000298  00000000  00000000  000051c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000012ae  00000000  00000000  00005460  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000168  00000000  00000000  0000670e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .text         00000002  00000c9a  00000c9a  00000d8e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00006878  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .text.ADC_init 0000000e  00000c5c  00000c5c  00000d50  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.i2c_init 0000000c  00000c86  00000c86  00000d7a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.i2c_tx_start 00000024  00000bc0  00000bc0  00000cb4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.i2c_tx_address 00000048  00000b10  00000b10  00000c04  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.i2c_tx_byte 0000001e  00000be4  00000be4  00000cd8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.i2c_tx_stop 0000000e  00000c6a  00000c6a  00000d5e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .bss.masterMode 00000001  0080006a  0080006a  00000d9e  2**0
                  ALLOC
 22 .text.TimerFinished 0000002a  00000b96  00000b96  00000c8a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.PlayBuzzer 0000006c  000009dc  000009dc  00000ad0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.WaitForStartButton 0000001c  00000c02  00000c02  00000cf6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.main    00000186  00000490  00000490  00000584  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.__vector_14 00000076  00000966  00000966  00000a5a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .progmemx.data.Big_Tooth 000000c2  000003cd  000003cd  000004c1  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 28 .data.SevenSegments_struc 00000006  00800064  00000ca4  00000d98  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 29 .progmemx.data.SevenSegments11x19 0000016b  00000262  00000262  00000356  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 30 .progmemx.data.RazTimer 000001da  00000088  00000088  0000017c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 31 .text.oledSendStart 00000010  00000c4c  00000c4c  00000d40  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.oledSendStop 00000004  00000c92  00000c92  00000d86  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text.oledSendByte 00000004  00000c96  00000c96  00000d8a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text.oledSendCommand 00000016  00000c36  00000c36  00000d2a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text.OLED_Clear 0000005e  00000ab2  00000ab2  00000ba6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .text.OLED_Init 0000006a  00000a48  00000a48  00000b3c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .text.OLED_SetCursor 0000003e  00000b58  00000b58  00000c4c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 38 .text.OLED_WriteChar 00000120  00000616  00000616  0000070a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 .text.OLED_WriteTwoDigitNumber 000000a8  00000822  00000822  00000916  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 40 .text.OLED_WriteNumber 000000ec  00000736  00000736  0000082a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 41 .text.OLED_DrawBitmapRLE 0000009c  000008ca  000008ca  000009be  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 42 .bss.Xposition.2335 00000001  0080006b  0080006b  00000d9e  2**0
                  ALLOC
 43 .text.libgcc.mul 00000018  00000c1e  00000c1e  00000d12  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 44 .text.__dummy_fini 00000002  00000c9c  00000c9c  00000d90  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 45 .text.__dummy_funcs_on_exit 00000002  00000c9e  00000c9e  00000d92  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 46 .text.__dummy_simulator_exit 00000002  00000ca0  00000ca0  00000d94  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 47 .text.exit    0000000e  00000c78  00000c78  00000d6c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 48 .text._Exit   00000002  00000ca2  00000ca2  00000d96  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	1b c0       	rjmp	.+54     	; 0x38 <__ctors_end>
   2:	4b c6       	rjmp	.+3222   	; 0xc9a <__bad_interrupt>
   4:	4a c6       	rjmp	.+3220   	; 0xc9a <__bad_interrupt>
   6:	49 c6       	rjmp	.+3218   	; 0xc9a <__bad_interrupt>
   8:	48 c6       	rjmp	.+3216   	; 0xc9a <__bad_interrupt>
   a:	47 c6       	rjmp	.+3214   	; 0xc9a <__bad_interrupt>
   c:	46 c6       	rjmp	.+3212   	; 0xc9a <__bad_interrupt>
   e:	45 c6       	rjmp	.+3210   	; 0xc9a <__bad_interrupt>
  10:	44 c6       	rjmp	.+3208   	; 0xc9a <__bad_interrupt>
  12:	43 c6       	rjmp	.+3206   	; 0xc9a <__bad_interrupt>
  14:	42 c6       	rjmp	.+3204   	; 0xc9a <__bad_interrupt>
  16:	41 c6       	rjmp	.+3202   	; 0xc9a <__bad_interrupt>
  18:	40 c6       	rjmp	.+3200   	; 0xc9a <__bad_interrupt>
  1a:	3f c6       	rjmp	.+3198   	; 0xc9a <__bad_interrupt>
  1c:	a4 c4       	rjmp	.+2376   	; 0x966 <__vector_14>
  1e:	3d c6       	rjmp	.+3194   	; 0xc9a <__bad_interrupt>
  20:	3c c6       	rjmp	.+3192   	; 0xc9a <__bad_interrupt>
  22:	3b c6       	rjmp	.+3190   	; 0xc9a <__bad_interrupt>
  24:	3a c6       	rjmp	.+3188   	; 0xc9a <__bad_interrupt>

00000026 <.dinit>:
  26:	00 60       	ori	r16, 0x00	; 0
  28:	00 64       	ori	r16, 0x40	; 64
  2a:	80 00       	.word	0x0080	; ????
  2c:	64 00       	.word	0x0064	; ????
  2e:	6a 00       	.word	0x006a	; ????
  30:	0c a4       	ldd	r0, Y+44	; 0x2c
  32:	00 6a       	ori	r16, 0xA0	; 160
  34:	00 6c       	ori	r16, 0xC0	; 192
  36:	80 00       	.word	0x0080	; ????

00000038 <__ctors_end>:
  38:	11 24       	eor	r1, r1
  3a:	1f be       	out	0x3f, r1	; 63
  3c:	cf e5       	ldi	r28, 0x5F	; 95
  3e:	d4 e0       	ldi	r29, 0x04	; 4
  40:	de bf       	out	0x3e, r29	; 62
  42:	cd bf       	out	0x3d, r28	; 61

00000044 <__do_copy_data>:
  44:	e6 e2       	ldi	r30, 0x26	; 38
  46:	f0 e0       	ldi	r31, 0x00	; 0
  48:	40 e0       	ldi	r20, 0x00	; 0
  4a:	17 c0       	rjmp	.+46     	; 0x7a <__do_clear_bss+0x8>
  4c:	b5 91       	lpm	r27, Z+
  4e:	a5 91       	lpm	r26, Z+
  50:	35 91       	lpm	r19, Z+
  52:	25 91       	lpm	r18, Z+
  54:	05 91       	lpm	r16, Z+
  56:	07 fd       	sbrc	r16, 7
  58:	0c c0       	rjmp	.+24     	; 0x72 <__do_clear_bss>
  5a:	95 91       	lpm	r25, Z+
  5c:	85 91       	lpm	r24, Z+
  5e:	ef 01       	movw	r28, r30
  60:	f9 2f       	mov	r31, r25
  62:	e8 2f       	mov	r30, r24
  64:	05 90       	lpm	r0, Z+
  66:	0d 92       	st	X+, r0
  68:	a2 17       	cp	r26, r18
  6a:	b3 07       	cpc	r27, r19
  6c:	d9 f7       	brne	.-10     	; 0x64 <__do_copy_data+0x20>
  6e:	fe 01       	movw	r30, r28
  70:	04 c0       	rjmp	.+8      	; 0x7a <__do_clear_bss+0x8>

00000072 <__do_clear_bss>:
  72:	1d 92       	st	X+, r1
  74:	a2 17       	cp	r26, r18
  76:	b3 07       	cpc	r27, r19
  78:	e1 f7       	brne	.-8      	; 0x72 <__do_clear_bss>
  7a:	e7 33       	cpi	r30, 0x37	; 55
  7c:	f4 07       	cpc	r31, r20
  7e:	31 f7       	brne	.-52     	; 0x4c <__do_copy_data+0x8>
  80:	07 d2       	rcall	.+1038   	; 0x490 <main>
  82:	fa c5       	rjmp	.+3060   	; 0xc78 <exit>

00000084 <_exit>:
  84:	f8 94       	cli

00000086 <__stop_program>:
  86:	ff cf       	rjmp	.-2      	; 0x86 <__stop_program>

Disassembly of section .text:

00000c9a <__bad_interrupt>:
 c9a:	b2 c9       	rjmp	.-3228   	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.ADC_init:

00000c5c <ADC_init>:
#include "SSD1306.h"
//#include "SevenSeg19H.h"

ADC_init()
{
	ADMUX |= (1<<REFS0) | (1<<REFS1); // Internal 2.56v refrence
 c5c:	87 b1       	in	r24, 0x07	; 7
 c5e:	80 6c       	ori	r24, 0xC0	; 192
 c60:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1<<ADEN) | (1<<ADPS2) | (1 << ADPS1) | (1<<ADIE);// 64
 c62:	86 b1       	in	r24, 0x06	; 6
 c64:	8e 68       	ori	r24, 0x8E	; 142
 c66:	86 b9       	out	0x06, r24	; 6
	//sei();
}
 c68:	08 95       	ret

Disassembly of section .text.i2c_init:

00000c86 <i2c_init>:

static bool masterMode;

void i2c_init(void)
{
    TWSR &= ~((1 << TWPS1) | (1 << TWPS0)); // pre-scalar 1
 c86:	81 b1       	in	r24, 0x01	; 1
 c88:	8c 7f       	andi	r24, 0xFC	; 252
 c8a:	81 b9       	out	0x01, r24	; 1
    TWBR = 2; // I've changed it to 400k.. for fast disply... it was very slow display in 100k //((F_CPU / F_I2C) - 16) / 2; // baud rate factor 12
 c8c:	82 e0       	ldi	r24, 0x02	; 2
 c8e:	80 b9       	out	0x00, r24	; 0
 c90:	08 95       	ret

Disassembly of section .text.i2c_tx_start:

00000bc0 <i2c_tx_start>:
    } else {
        status = TRANSMISSION_ERROR;
    }

    return status;
}
 bc0:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <masterMode>
 bc4:	86 b7       	in	r24, 0x36	; 54
 bc6:	84 6a       	ori	r24, 0xA4	; 164
 bc8:	86 bf       	out	0x36, r24	; 54
 bca:	06 b6       	in	r0, 0x36	; 54
 bcc:	07 fe       	sbrs	r0, 7
 bce:	fd cf       	rjmp	.-6      	; 0xbca <i2c_tx_start+0xa>
 bd0:	81 b1       	in	r24, 0x01	; 1
 bd2:	88 7f       	andi	r24, 0xF8	; 248
 bd4:	88 30       	cpi	r24, 0x08	; 8
 bd6:	11 f0       	breq	.+4      	; 0xbdc <i2c_tx_start+0x1c>
 bd8:	80 31       	cpi	r24, 0x10	; 16
 bda:	11 f4       	brne	.+4      	; 0xbe0 <i2c_tx_start+0x20>
 bdc:	8f ef       	ldi	r24, 0xFF	; 255
 bde:	08 95       	ret
 be0:	8e ef       	ldi	r24, 0xFE	; 254
 be2:	08 95       	ret

Disassembly of section .text.i2c_tx_address:

00000b10 <i2c_tx_address>:
 b10:	90 e0       	ldi	r25, 0x00	; 0
 b12:	88 0f       	add	r24, r24
 b14:	99 1f       	adc	r25, r25
 b16:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <masterMode>
 b1a:	89 2b       	or	r24, r25
 b1c:	83 b9       	out	0x03, r24	; 3
 b1e:	84 e8       	ldi	r24, 0x84	; 132
 b20:	86 bf       	out	0x36, r24	; 54
 b22:	06 b6       	in	r0, 0x36	; 54
 b24:	07 fe       	sbrs	r0, 7
 b26:	fd cf       	rjmp	.-6      	; 0xb22 <i2c_tx_address+0x12>
 b28:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <masterMode>
 b2c:	81 11       	cpse	r24, r1
 b2e:	06 c0       	rjmp	.+12     	; 0xb3c <i2c_tx_address+0x2c>
 b30:	81 b1       	in	r24, 0x01	; 1
 b32:	88 7f       	andi	r24, 0xF8	; 248
 b34:	88 31       	cpi	r24, 0x18	; 24
 b36:	51 f4       	brne	.+20     	; 0xb4c <i2c_tx_address+0x3c>
 b38:	8f ef       	ldi	r24, 0xFF	; 255
 b3a:	08 95       	ret
 b3c:	81 30       	cpi	r24, 0x01	; 1
 b3e:	41 f4       	brne	.+16     	; 0xb50 <i2c_tx_address+0x40>
 b40:	81 b1       	in	r24, 0x01	; 1
 b42:	88 7f       	andi	r24, 0xF8	; 248
 b44:	80 34       	cpi	r24, 0x40	; 64
 b46:	31 f4       	brne	.+12     	; 0xb54 <i2c_tx_address+0x44>
 b48:	8f ef       	ldi	r24, 0xFF	; 255
 b4a:	08 95       	ret
 b4c:	8e ef       	ldi	r24, 0xFE	; 254
 b4e:	08 95       	ret
 b50:	80 e0       	ldi	r24, 0x00	; 0
 b52:	08 95       	ret
 b54:	8e ef       	ldi	r24, 0xFE	; 254
 b56:	08 95       	ret

Disassembly of section .text.i2c_tx_byte:

00000be4 <i2c_tx_byte>:
 be4:	83 b9       	out	0x03, r24	; 3
 be6:	86 b7       	in	r24, 0x36	; 54
 be8:	80 68       	ori	r24, 0x80	; 128
 bea:	86 bf       	out	0x36, r24	; 54
 bec:	06 b6       	in	r0, 0x36	; 54
 bee:	07 fe       	sbrs	r0, 7
 bf0:	fd cf       	rjmp	.-6      	; 0xbec <i2c_tx_byte+0x8>
 bf2:	81 b1       	in	r24, 0x01	; 1
 bf4:	88 7f       	andi	r24, 0xF8	; 248
 bf6:	88 32       	cpi	r24, 0x28	; 40
 bf8:	11 f4       	brne	.+4      	; 0xbfe <i2c_tx_byte+0x1a>
 bfa:	8f ef       	ldi	r24, 0xFF	; 255
 bfc:	08 95       	ret
 bfe:	8e ef       	ldi	r24, 0xFE	; 254
 c00:	08 95       	ret

Disassembly of section .text.i2c_tx_stop:

00000c6a <i2c_tx_stop>:

void i2c_tx_stop(void)
{
    /* clear interrupt flag, issue stop command (cleared automatically) */
    TWCR |= (1 << TWINT) | (1 << TWSTO);
 c6a:	86 b7       	in	r24, 0x36	; 54
 c6c:	80 69       	ori	r24, 0x90	; 144
 c6e:	86 bf       	out	0x36, r24	; 54

    while ((TWCR & (1 << TWSTO))); // wait until stop transmitted
 c70:	06 b6       	in	r0, 0x36	; 54
 c72:	04 fc       	sbrc	r0, 4
 c74:	fd cf       	rjmp	.-6      	; 0xc70 <i2c_tx_stop+0x6>
}
 c76:	08 95       	ret

Disassembly of section .text.TimerFinished:

00000b96 <TimerFinished>:
    //TODO:: Please write your application code 

}

void TimerFinished ()
{
 b96:	0f 93       	push	r16
 b98:	1f 93       	push	r17
	OLED_SetCursor(0,0);
 b9a:	60 e0       	ldi	r22, 0x00	; 0
 b9c:	80 e0       	ldi	r24, 0x00	; 0
 b9e:	dc df       	rcall	.-72     	; 0xb58 <OLED_SetCursor>
	OLED_DrawBitmapRLE(0,0,Big_Tooth,194);
 ba0:	02 ec       	ldi	r16, 0xC2	; 194
 ba2:	10 e0       	ldi	r17, 0x00	; 0
 ba4:	2d ec       	ldi	r18, 0xCD	; 205
 ba6:	33 e0       	ldi	r19, 0x03	; 3
 ba8:	40 e0       	ldi	r20, 0x00	; 0
 baa:	60 e0       	ldi	r22, 0x00	; 0
 bac:	80 e0       	ldi	r24, 0x00	; 0
 bae:	8d de       	rcall	.-742    	; 0x8ca <OLED_DrawBitmapRLE>
	Minuts = 2;
 bb0:	82 e0       	ldi	r24, 0x02	; 2
 bb2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	Seconds = 0;		
 bb6:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <Seconds>
}
 bba:	1f 91       	pop	r17
 bbc:	0f 91       	pop	r16
 bbe:	08 95       	ret

Disassembly of section .text.PlayBuzzer:

000009dc <PlayBuzzer>:


void PlayBuzzer (char event)
{
	switch (event)
 9dc:	88 23       	and	r24, r24
 9de:	19 f0       	breq	.+6      	; 0x9e6 <PlayBuzzer+0xa>
 9e0:	81 30       	cpi	r24, 0x01	; 1
 9e2:	61 f1       	breq	.+88     	; 0xa3c <PlayBuzzer+0x60>
 9e4:	08 95       	ret
	{
		case 0:
			PORTD |= 0x02;
 9e6:	82 b3       	in	r24, 0x12	; 18
 9e8:	82 60       	ori	r24, 0x02	; 2
 9ea:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 9ec:	2f ef       	ldi	r18, 0xFF	; 255
 9ee:	40 e7       	ldi	r20, 0x70	; 112
 9f0:	82 e0       	ldi	r24, 0x02	; 2
 9f2:	21 50       	subi	r18, 0x01	; 1
 9f4:	40 40       	sbci	r20, 0x00	; 0
 9f6:	80 40       	sbci	r24, 0x00	; 0
 9f8:	e1 f7       	brne	.-8      	; 0x9f2 <PlayBuzzer+0x16>
 9fa:	00 c0       	rjmp	.+0      	; 0x9fc <PlayBuzzer+0x20>
 9fc:	00 00       	nop
			_delay_ms(100);
			PORTD &= ~0x02;
 9fe:	82 b3       	in	r24, 0x12	; 18
 a00:	8d 7f       	andi	r24, 0xFD	; 253
 a02:	82 bb       	out	0x12, r24	; 18
		break;
 a04:	08 95       	ret
		case 1:
			for (int i=0; i < 5; i++)
			{
				PORTD |= 0x02;
 a06:	82 b3       	in	r24, 0x12	; 18
 a08:	82 60       	ori	r24, 0x02	; 2
 a0a:	82 bb       	out	0x12, r24	; 18
 a0c:	9f ef       	ldi	r25, 0xFF	; 255
 a0e:	41 ee       	ldi	r20, 0xE1	; 225
 a10:	84 e0       	ldi	r24, 0x04	; 4
 a12:	91 50       	subi	r25, 0x01	; 1
 a14:	40 40       	sbci	r20, 0x00	; 0
 a16:	80 40       	sbci	r24, 0x00	; 0
 a18:	e1 f7       	brne	.-8      	; 0xa12 <PlayBuzzer+0x36>
 a1a:	00 c0       	rjmp	.+0      	; 0xa1c <PlayBuzzer+0x40>
 a1c:	00 00       	nop
				_delay_ms(FINISH_BUZ_TIME);
				PORTD &= ~0x02;
 a1e:	82 b3       	in	r24, 0x12	; 18
 a20:	8d 7f       	andi	r24, 0xFD	; 253
 a22:	82 bb       	out	0x12, r24	; 18
 a24:	9f ef       	ldi	r25, 0xFF	; 255
 a26:	41 ee       	ldi	r20, 0xE1	; 225
 a28:	84 e0       	ldi	r24, 0x04	; 4
 a2a:	91 50       	subi	r25, 0x01	; 1
 a2c:	40 40       	sbci	r20, 0x00	; 0
 a2e:	80 40       	sbci	r24, 0x00	; 0
 a30:	e1 f7       	brne	.-8      	; 0xa2a <PlayBuzzer+0x4e>
 a32:	00 c0       	rjmp	.+0      	; 0xa34 <PlayBuzzer+0x58>
 a34:	00 00       	nop
			PORTD |= 0x02;
			_delay_ms(100);
			PORTD &= ~0x02;
		break;
		case 1:
			for (int i=0; i < 5; i++)
 a36:	2f 5f       	subi	r18, 0xFF	; 255
 a38:	3f 4f       	sbci	r19, 0xFF	; 255
 a3a:	02 c0       	rjmp	.+4      	; 0xa40 <PlayBuzzer+0x64>
}


void PlayBuzzer (char event)
{
	switch (event)
 a3c:	20 e0       	ldi	r18, 0x00	; 0
 a3e:	30 e0       	ldi	r19, 0x00	; 0
			PORTD |= 0x02;
			_delay_ms(100);
			PORTD &= ~0x02;
		break;
		case 1:
			for (int i=0; i < 5; i++)
 a40:	25 30       	cpi	r18, 0x05	; 5
 a42:	31 05       	cpc	r19, r1
 a44:	04 f3       	brlt	.-64     	; 0xa06 <PlayBuzzer+0x2a>
 a46:	08 95       	ret

Disassembly of section .text.WaitForStartButton:

00000c02 <WaitForStartButton>:
}

void WaitForStartButton ()
{
	do {
	while (PIND & (1 << PIND4));
 c02:	84 99       	sbic	0x10, 4	; 16
 c04:	fe cf       	rjmp	.-4      	; 0xc02 <WaitForStartButton>
 c06:	2f e7       	ldi	r18, 0x7F	; 127
 c08:	88 e3       	ldi	r24, 0x38	; 56
 c0a:	91 e0       	ldi	r25, 0x01	; 1
 c0c:	21 50       	subi	r18, 0x01	; 1
 c0e:	80 40       	sbci	r24, 0x00	; 0
 c10:	90 40       	sbci	r25, 0x00	; 0
 c12:	e1 f7       	brne	.-8      	; 0xc0c <WaitForStartButton+0xa>
 c14:	00 c0       	rjmp	.+0      	; 0xc16 <WaitForStartButton+0x14>
 c16:	00 00       	nop
	_delay_ms(50);
	} while (PIND & (1 << PIND4));
 c18:	84 99       	sbic	0x10, 4	; 16
 c1a:	f3 cf       	rjmp	.-26     	; 0xc02 <WaitForStartButton>
}
 c1c:	08 95       	ret

Disassembly of section .text.main:

00000490 <main>:


int main(void)
{
	int temp;
	DDRD = 0x03;
 490:	83 e0       	ldi	r24, 0x03	; 3
 492:	81 bb       	out	0x11, r24	; 17
	DDRC = 0x00;
 494:	14 ba       	out	0x14, r1	; 20
	
	PORTC = 0x00;
 496:	15 ba       	out	0x15, r1	; 21
	//OLED oled;
	Minuts = 2;
 498:	82 e0       	ldi	r24, 0x02	; 2
 49a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	Seconds = 0;
 49e:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <Seconds>
	char finished = false;
	
	OLED_Init();  //initialize the OLED
 4a2:	d2 d2       	rcall	.+1444   	; 0xa48 <OLED_Init>
	OLED_Clear(); //clear the display (for good measure)
 4a4:	06 d3       	rcall	.+1548   	; 0xab2 <OLED_Clear>
	sei();
 4a6:	78 94       	sei
	ADC_init();
 4a8:	d9 d3       	rcall	.+1970   	; 0xc5c <ADC_init>
 4aa:	2f ef       	ldi	r18, 0xFF	; 255
 4ac:	81 e1       	ldi	r24, 0x11	; 17
 4ae:	9a e7       	ldi	r25, 0x7A	; 122
 4b0:	21 50       	subi	r18, 0x01	; 1
 4b2:	80 40       	sbci	r24, 0x00	; 0
 4b4:	90 40       	sbci	r25, 0x00	; 0
 4b6:	e1 f7       	brne	.-8      	; 0x4b0 <main+0x20>
 4b8:	00 c0       	rjmp	.+0      	; 0x4ba <main+0x2a>
 4ba:	00 00       	nop
	
	_delay_ms(5000);

		//stay: goto stay;
		while (1) {
			OLED_SetCursor(0, 0);        //set the cursor position to (0, 0)
 4bc:	60 e0       	ldi	r22, 0x00	; 0
 4be:	80 e0       	ldi	r24, 0x00	; 0
 4c0:	4b d3       	rcall	.+1686   	; 0xb58 <OLED_SetCursor>
			OLED_DrawBitmapRLE (0,0,RazTimer,474); //Print out some text
 4c2:	0a ed       	ldi	r16, 0xDA	; 218
 4c4:	11 e0       	ldi	r17, 0x01	; 1
 4c6:	28 e8       	ldi	r18, 0x88	; 136
 4c8:	30 e0       	ldi	r19, 0x00	; 0
 4ca:	40 e0       	ldi	r20, 0x00	; 0
 4cc:	60 e0       	ldi	r22, 0x00	; 0
 4ce:	80 e0       	ldi	r24, 0x00	; 0
 4d0:	fc d1       	rcall	.+1016   	; 0x8ca <OLED_DrawBitmapRLE>
			OLED_WriteTwoDigitNumber(SevenSegments_struc,37,4,02,false,false,false,false,false);
 4d2:	1f 92       	push	r1
 4d4:	1f 92       	push	r1
 4d6:	81 2c       	mov	r8, r1
 4d8:	a1 2c       	mov	r10, r1
 4da:	c1 2c       	mov	r12, r1
 4dc:	68 94       	set
 4de:	ee 24       	eor	r14, r14
 4e0:	e1 f8       	bld	r14, 1
 4e2:	04 e0       	ldi	r16, 0x04	; 4
 4e4:	25 e2       	ldi	r18, 0x25	; 37
 4e6:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <_end>
 4ea:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <_end+0x1>
 4ee:	60 91 66 00 	lds	r22, 0x0066	; 0x800066 <_end+0x2>
 4f2:	70 91 67 00 	lds	r23, 0x0067	; 0x800067 <_end+0x3>
 4f6:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <_end+0x4>
 4fa:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <_end+0x5>
 4fe:	91 d1       	rcall	.+802    	; 0x822 <OLED_WriteTwoDigitNumber>
			OLED_WriteChar(SevenSegments_struc,59,4,':',false,false,false);
 500:	0f 2e       	mov	r0, r31
 502:	fa e3       	ldi	r31, 0x3A	; 58
 504:	ef 2e       	mov	r14, r31
 506:	f0 2d       	mov	r31, r0
 508:	2b e3       	ldi	r18, 0x3B	; 59
 50a:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <_end>
 50e:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <_end+0x1>
 512:	60 91 66 00 	lds	r22, 0x0066	; 0x800066 <_end+0x2>
 516:	70 91 67 00 	lds	r23, 0x0067	; 0x800067 <_end+0x3>
 51a:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <_end+0x4>
 51e:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <_end+0x5>
 522:	79 d0       	rcall	.+242    	; 0x616 <OLED_WriteChar>
			OLED_WriteTwoDigitNumber(SevenSegments_struc,70,4,0,false,false,false,false,false);
 524:	1f 92       	push	r1
 526:	1f 92       	push	r1
 528:	e1 2c       	mov	r14, r1
 52a:	26 e4       	ldi	r18, 0x46	; 70
 52c:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <_end>
 530:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <_end+0x1>
 534:	60 91 66 00 	lds	r22, 0x0066	; 0x800066 <_end+0x2>
 538:	70 91 67 00 	lds	r23, 0x0067	; 0x800067 <_end+0x3>
 53c:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <_end+0x4>
 540:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <_end+0x5>
 544:	6e d1       	rcall	.+732    	; 0x822 <OLED_WriteTwoDigitNumber>
	
		WaitForStartButton();
 546:	5d d3       	rcall	.+1722   	; 0xc02 <WaitForStartButton>
		PlayBuzzer(START);
 548:	80 e0       	ldi	r24, 0x00	; 0
 54a:	48 d2       	rcall	.+1168   	; 0x9dc <PlayBuzzer>
	
		while (!finished)
 54c:	0f 90       	pop	r0
 54e:	0f 90       	pop	r0
 550:	0f 90       	pop	r0
 552:	0f 90       	pop	r0
 554:	4d c0       	rjmp	.+154    	; 0x5f0 <main+0x160>
			PORTD ^= 0x01;
			_delay_ms (10);
			
			if (--Seconds == 255)
			{
				if (--Minuts == 255)
 556:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 55a:	81 50       	subi	r24, 0x01	; 1
 55c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 560:	8f 3f       	cpi	r24, 0xFF	; 255
 562:	29 f4       	brne	.+10     	; 0x56e <main+0xde>
				{
					TimerFinished();
 564:	18 d3       	rcall	.+1584   	; 0xb96 <TimerFinished>
					PlayBuzzer(FINISHED);
 566:	81 e0       	ldi	r24, 0x01	; 1
 568:	39 d2       	rcall	.+1138   	; 0x9dc <PlayBuzzer>
				OLED_WriteChar(SevenSegments_struc,59,4,':',false,false,false);
				OLED_WriteTwoDigitNumber(SevenSegments_struc,70,4,Seconds,false,false,false,false,false);
			//}
		}
	
		WaitForStartButton();
 56a:	4b d3       	rcall	.+1686   	; 0xc02 <WaitForStartButton>
		finished = false;
	
	}
 56c:	a7 cf       	rjmp	.-178    	; 0x4bc <main+0x2c>
					PlayBuzzer(FINISHED);
					finished = true;
					break;
				}
				else
					Seconds = 59;
 56e:	8b e3       	ldi	r24, 0x3B	; 59
 570:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <Seconds>
		
			//if (!finished) 
			//{	
				//OLED_SetCursor(0, 0);        //set the cursor position to (0, 0)
				//OLED_DrawBitmapRLE (0,0,CathClockMainScreenRLE,566); //Print out some text
				OLED_WriteTwoDigitNumber(SevenSegments_struc,37,4,Minuts,false,false,false,false,false);
 574:	1f 92       	push	r1
 576:	1f 92       	push	r1
 578:	81 2c       	mov	r8, r1
 57a:	a1 2c       	mov	r10, r1
 57c:	c1 2c       	mov	r12, r1
 57e:	e0 90 60 00 	lds	r14, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 582:	04 e0       	ldi	r16, 0x04	; 4
 584:	25 e2       	ldi	r18, 0x25	; 37
 586:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <_end>
 58a:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <_end+0x1>
 58e:	60 91 66 00 	lds	r22, 0x0066	; 0x800066 <_end+0x2>
 592:	70 91 67 00 	lds	r23, 0x0067	; 0x800067 <_end+0x3>
 596:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <_end+0x4>
 59a:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <_end+0x5>
 59e:	41 d1       	rcall	.+642    	; 0x822 <OLED_WriteTwoDigitNumber>
				OLED_WriteChar(SevenSegments_struc,59,4,':',false,false,false);
 5a0:	0f 2e       	mov	r0, r31
 5a2:	fa e3       	ldi	r31, 0x3A	; 58
 5a4:	ef 2e       	mov	r14, r31
 5a6:	f0 2d       	mov	r31, r0
 5a8:	2b e3       	ldi	r18, 0x3B	; 59
 5aa:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <_end>
 5ae:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <_end+0x1>
 5b2:	60 91 66 00 	lds	r22, 0x0066	; 0x800066 <_end+0x2>
 5b6:	70 91 67 00 	lds	r23, 0x0067	; 0x800067 <_end+0x3>
 5ba:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <_end+0x4>
 5be:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <_end+0x5>
 5c2:	29 d0       	rcall	.+82     	; 0x616 <OLED_WriteChar>
				OLED_WriteTwoDigitNumber(SevenSegments_struc,70,4,Seconds,false,false,false,false,false);
 5c4:	1f 92       	push	r1
 5c6:	1f 92       	push	r1
 5c8:	e0 90 61 00 	lds	r14, 0x0061	; 0x800061 <Seconds>
 5cc:	26 e4       	ldi	r18, 0x46	; 70
 5ce:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <_end>
 5d2:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <_end+0x1>
 5d6:	60 91 66 00 	lds	r22, 0x0066	; 0x800066 <_end+0x2>
 5da:	70 91 67 00 	lds	r23, 0x0067	; 0x800067 <_end+0x3>
 5de:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <_end+0x4>
 5e2:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <_end+0x5>
 5e6:	1d d1       	rcall	.+570    	; 0x822 <OLED_WriteTwoDigitNumber>
 5e8:	0f 90       	pop	r0
 5ea:	0f 90       	pop	r0
 5ec:	0f 90       	pop	r0
 5ee:	0f 90       	pop	r0
		WaitForStartButton();
		PlayBuzzer(START);
	
		while (!finished)
		{
			PORTD ^= 0x01;
 5f0:	92 b3       	in	r25, 0x12	; 18
 5f2:	81 e0       	ldi	r24, 0x01	; 1
 5f4:	89 27       	eor	r24, r25
 5f6:	82 bb       	out	0x12, r24	; 18
 5f8:	8f e1       	ldi	r24, 0x1F	; 31
 5fa:	9e e4       	ldi	r25, 0x4E	; 78
 5fc:	01 97       	sbiw	r24, 0x01	; 1
 5fe:	f1 f7       	brne	.-4      	; 0x5fc <main+0x16c>
 600:	00 c0       	rjmp	.+0      	; 0x602 <main+0x172>
 602:	00 00       	nop
			_delay_ms (10);
			
			if (--Seconds == 255)
 604:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <Seconds>
 608:	81 50       	subi	r24, 0x01	; 1
 60a:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <Seconds>
 60e:	8f 3f       	cpi	r24, 0xFF	; 255
 610:	09 f4       	brne	.+2      	; 0x614 <main+0x184>
 612:	a1 cf       	rjmp	.-190    	; 0x556 <main+0xc6>
 614:	af cf       	rjmp	.-162    	; 0x574 <main+0xe4>

Disassembly of section .text.__vector_14:

00000966 <__vector_14>:
	_delay_ms(50);
	} while (PIND & (1 << PIND4));
}

ISR (ADC_vect)
{
 966:	1f 92       	push	r1
 968:	0f 92       	push	r0
 96a:	0f b6       	in	r0, 0x3f	; 63
 96c:	0f 92       	push	r0
 96e:	11 24       	eor	r1, r1
 970:	ef 92       	push	r14
 972:	ff 92       	push	r15
 974:	0f 93       	push	r16
 976:	2f 93       	push	r18
 978:	3f 93       	push	r19
 97a:	4f 93       	push	r20
 97c:	5f 93       	push	r21
 97e:	6f 93       	push	r22
 980:	7f 93       	push	r23
 982:	8f 93       	push	r24
 984:	9f 93       	push	r25
 986:	af 93       	push	r26
 988:	bf 93       	push	r27
 98a:	ef 93       	push	r30
 98c:	ff 93       	push	r31
	cli();
 98e:	f8 94       	cli
	//PlayBuzzer(START);
	//sei();
	//unsigned char tempSREG = SREG;
	//OLED_SetCursor(0,0);

	OLED_WriteNumber(SevenSegments_struc,0,2,ADC);	//OLED_WriteTwoDigitNumber(ADCL);
 990:	e4 b0       	in	r14, 0x04	; 4
 992:	f5 b0       	in	r15, 0x05	; 5
 994:	02 e0       	ldi	r16, 0x02	; 2
 996:	20 e0       	ldi	r18, 0x00	; 0
 998:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <_end>
 99c:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <_end+0x1>
 9a0:	60 91 66 00 	lds	r22, 0x0066	; 0x800066 <_end+0x2>
 9a4:	70 91 67 00 	lds	r23, 0x0067	; 0x800067 <_end+0x3>
 9a8:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <_end+0x4>
 9ac:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <_end+0x5>
 9b0:	c2 de       	rcall	.-636    	; 0x736 <OLED_WriteNumber>
	//SREG = tempSREG;
	//ADCSRA |= (1<<ADIF);
	sei();
 9b2:	78 94       	sei
 9b4:	ff 91       	pop	r31
 9b6:	ef 91       	pop	r30
 9b8:	bf 91       	pop	r27
 9ba:	af 91       	pop	r26
 9bc:	9f 91       	pop	r25
 9be:	8f 91       	pop	r24
 9c0:	7f 91       	pop	r23
 9c2:	6f 91       	pop	r22
 9c4:	5f 91       	pop	r21
 9c6:	4f 91       	pop	r20
 9c8:	3f 91       	pop	r19
 9ca:	2f 91       	pop	r18
 9cc:	0f 91       	pop	r16
 9ce:	ff 90       	pop	r15
 9d0:	ef 90       	pop	r14
 9d2:	0f 90       	pop	r0
 9d4:	0f be       	out	0x3f, r0	; 63
 9d6:	0f 90       	pop	r0
 9d8:	1f 90       	pop	r1
 9da:	18 95       	reti

Disassembly of section .text.oledSendStart:

00000c4c <oledSendStart>:

/********************************************************************************
 Local FUnctions for sending the command/data
 ********************************************************************************/

void oledSendStart(uint8_t address){
 c4c:	cf 93       	push	r28
 c4e:	c8 2f       	mov	r28, r24

    
    i2c_tx_start(MASTER_TRANSMITTER);
 c50:	80 e0       	ldi	r24, 0x00	; 0
 c52:	b6 df       	rcall	.-148    	; 0xbc0 <i2c_tx_start>
    i2c_tx_address(address);
 c54:	8c 2f       	mov	r24, r28
 c56:	5c df       	rcall	.-328    	; 0xb10 <i2c_tx_address>
}
 c58:	cf 91       	pop	r28
 c5a:	08 95       	ret

Disassembly of section .text.oledSendStop:

00000c92 <oledSendStop>:


void oledSendStop(void){

    i2c_tx_stop();
 c92:	eb df       	rcall	.-42     	; 0xc6a <i2c_tx_stop>
 c94:	08 95       	ret

Disassembly of section .text.oledSendByte:

00000c96 <oledSendByte>:


void oledSendByte(uint8_t ch){

    
    i2c_tx_byte(ch);
 c96:	a6 df       	rcall	.-180    	; 0xbe4 <i2c_tx_byte>
 c98:	08 95       	ret

Disassembly of section .text.oledSendCommand:

00000c36 <oledSendCommand>:
    
}


void oledSendCommand(uint8_t cmd){
 c36:	cf 93       	push	r28
 c38:	c8 2f       	mov	r28, r24
    //oledSendStart(SSD1306_ADDRESS<<1);
    oledSendStart(SSD1306_ADDRESS);
 c3a:	8c e3       	ldi	r24, 0x3C	; 60
 c3c:	07 d0       	rcall	.+14     	; 0xc4c <oledSendStart>
    oledSendByte(SSD1306_COMMAND);
 c3e:	80 e0       	ldi	r24, 0x00	; 0
 c40:	2a d0       	rcall	.+84     	; 0xc96 <oledSendByte>
    oledSendByte(cmd);
 c42:	8c 2f       	mov	r24, r28
 c44:	28 d0       	rcall	.+80     	; 0xc96 <oledSendByte>
    oledSendStop();
 c46:	25 d0       	rcall	.+74     	; 0xc92 <oledSendStop>
}
 c48:	cf 91       	pop	r28
 c4a:	08 95       	ret

Disassembly of section .text.OLED_Clear:

00000ab2 <OLED_Clear>:
 * I/P Arguments: none.
 * Return value    : none
 * description  :This function clears the LCD and moves the cursor to beginning of first line
 ****************************************************************************************************/
void OLED_Clear()
{
 ab2:	cf 93       	push	r28
 ab4:	df 93       	push	r29
    int i;
    
    oledSendCommand(SSD1306_SET_COLUMN_ADDR);
 ab6:	81 e2       	ldi	r24, 0x21	; 33
 ab8:	be d0       	rcall	.+380    	; 0xc36 <oledSendCommand>
    oledSendCommand(0);
 aba:	80 e0       	ldi	r24, 0x00	; 0
 abc:	bc d0       	rcall	.+376    	; 0xc36 <oledSendCommand>
    oledSendCommand(127);
 abe:	8f e7       	ldi	r24, 0x7F	; 127
 ac0:	ba d0       	rcall	.+372    	; 0xc36 <oledSendCommand>
    
    oledSendCommand(SSD1306_SET_PAGE_ADDR);
 ac2:	82 e2       	ldi	r24, 0x22	; 34
 ac4:	b8 d0       	rcall	.+368    	; 0xc36 <oledSendCommand>
    oledSendCommand(0);
 ac6:	80 e0       	ldi	r24, 0x00	; 0
 ac8:	b6 d0       	rcall	.+364    	; 0xc36 <oledSendCommand>
    oledSendCommand(7);
 aca:	87 e0       	ldi	r24, 0x07	; 7
 acc:	b4 d0       	rcall	.+360    	; 0xc36 <oledSendCommand>
    
    
    oledSendStart(SSD1306_ADDRESS);
 ace:	8c e3       	ldi	r24, 0x3C	; 60
 ad0:	bd d0       	rcall	.+378    	; 0xc4c <oledSendStart>
    oledSendByte(SSD1306_DATA_CONTINUE);
 ad2:	80 e4       	ldi	r24, 0x40	; 64
 ad4:	e0 d0       	rcall	.+448    	; 0xc96 <oledSendByte>
    
    for (i=0; i<1024; i++)      // Write Zeros to clear the display
 ad6:	c0 e0       	ldi	r28, 0x00	; 0
 ad8:	d0 e0       	ldi	r29, 0x00	; 0
 ada:	03 c0       	rjmp	.+6      	; 0xae2 <OLED_Clear+0x30>
    {
        oledSendByte(0);
 adc:	80 e0       	ldi	r24, 0x00	; 0
 ade:	db d0       	rcall	.+438    	; 0xc96 <oledSendByte>
    
    
    oledSendStart(SSD1306_ADDRESS);
    oledSendByte(SSD1306_DATA_CONTINUE);
    
    for (i=0; i<1024; i++)      // Write Zeros to clear the display
 ae0:	21 96       	adiw	r28, 0x01	; 1
 ae2:	c1 15       	cp	r28, r1
 ae4:	84 e0       	ldi	r24, 0x04	; 4
 ae6:	d8 07       	cpc	r29, r24
 ae8:	cc f3       	brlt	.-14     	; 0xadc <OLED_Clear+0x2a>
    {
        oledSendByte(0);
    }
    
    oledSendCommand(SSD1306_SET_COLUMN_ADDR);
 aea:	81 e2       	ldi	r24, 0x21	; 33
 aec:	a4 d0       	rcall	.+328    	; 0xc36 <oledSendCommand>
    oledSendCommand(0);
 aee:	80 e0       	ldi	r24, 0x00	; 0
 af0:	a2 d0       	rcall	.+324    	; 0xc36 <oledSendCommand>
    oledSendCommand(127);
 af2:	8f e7       	ldi	r24, 0x7F	; 127
 af4:	a0 d0       	rcall	.+320    	; 0xc36 <oledSendCommand>
    
    oledSendCommand(SSD1306_SET_PAGE_ADDR);
 af6:	82 e2       	ldi	r24, 0x22	; 34
 af8:	9e d0       	rcall	.+316    	; 0xc36 <oledSendCommand>
    oledSendCommand(0);
 afa:	80 e0       	ldi	r24, 0x00	; 0
 afc:	9c d0       	rcall	.+312    	; 0xc36 <oledSendCommand>
    oledSendCommand(7);
 afe:	87 e0       	ldi	r24, 0x07	; 7
 b00:	9a d0       	rcall	.+308    	; 0xc36 <oledSendCommand>
    
    oledSendStart(SSD1306_ADDRESS);
 b02:	8c e3       	ldi	r24, 0x3C	; 60
 b04:	a3 d0       	rcall	.+326    	; 0xc4c <oledSendStart>
    oledSendByte(SSD1306_DATA_CONTINUE);
 b06:	80 e4       	ldi	r24, 0x40	; 64
 b08:	c6 d0       	rcall	.+396    	; 0xc96 <oledSendByte>
}
 b0a:	df 91       	pop	r29
 b0c:	cf 91       	pop	r28
 b0e:	08 95       	ret

Disassembly of section .text.OLED_Init:

00000a48 <OLED_Init>:
 * description  :This function is used to initialize the OLED in the normal mode.
 After initializing the OLED, It clears the OLED and sets the cursor to first line first position. .
 **************************************************************************************************/
void OLED_Init(void)
{
    i2c_init();
 a48:	1e d1       	rcall	.+572    	; 0xc86 <i2c_init>
    
    oledSendCommand(SSD1306_DISPLAY_OFF);
 a4a:	8e ea       	ldi	r24, 0xAE	; 174
 a4c:	f4 d0       	rcall	.+488    	; 0xc36 <oledSendCommand>
    oledSendCommand(SSD1306_SET_DISPLAY_CLOCK_DIV_RATIO);
 a4e:	85 ed       	ldi	r24, 0xD5	; 213
 a50:	f2 d0       	rcall	.+484    	; 0xc36 <oledSendCommand>
    oledSendCommand(0x80);
 a52:	80 e8       	ldi	r24, 0x80	; 128
 a54:	f0 d0       	rcall	.+480    	; 0xc36 <oledSendCommand>
    oledSendCommand(SSD1306_SET_MULTIPLEX_RATIO);
 a56:	88 ea       	ldi	r24, 0xA8	; 168
 a58:	ee d0       	rcall	.+476    	; 0xc36 <oledSendCommand>
    oledSendCommand(0x3F);
 a5a:	8f e3       	ldi	r24, 0x3F	; 63
 a5c:	ec d0       	rcall	.+472    	; 0xc36 <oledSendCommand>
    oledSendCommand(SSD1306_SET_DISPLAY_OFFSET);
 a5e:	83 ed       	ldi	r24, 0xD3	; 211
 a60:	ea d0       	rcall	.+468    	; 0xc36 <oledSendCommand>
    oledSendCommand(0x0);
 a62:	80 e0       	ldi	r24, 0x00	; 0
 a64:	e8 d0       	rcall	.+464    	; 0xc36 <oledSendCommand>
    oledSendCommand(SSD1306_SET_START_LINE | 0x0);
 a66:	80 e4       	ldi	r24, 0x40	; 64
 a68:	e6 d0       	rcall	.+460    	; 0xc36 <oledSendCommand>
    oledSendCommand(SSD1306_CHARGE_PUMP);
 a6a:	8d e8       	ldi	r24, 0x8D	; 141
 a6c:	e4 d0       	rcall	.+456    	; 0xc36 <oledSendCommand>
    oledSendCommand(0x14);
 a6e:	84 e1       	ldi	r24, 0x14	; 20
 a70:	e2 d0       	rcall	.+452    	; 0xc36 <oledSendCommand>
    oledSendCommand(SSD1306_MEMORY_ADDR_MODE);
 a72:	80 e2       	ldi	r24, 0x20	; 32
 a74:	e0 d0       	rcall	.+448    	; 0xc36 <oledSendCommand>
    oledSendCommand(0x00);
 a76:	80 e0       	ldi	r24, 0x00	; 0
 a78:	de d0       	rcall	.+444    	; 0xc36 <oledSendCommand>
    oledSendCommand(SSD1306_SET_SEGMENT_REMAP | 0x1);
 a7a:	81 ea       	ldi	r24, 0xA1	; 161
 a7c:	dc d0       	rcall	.+440    	; 0xc36 <oledSendCommand>
    oledSendCommand(SSD1306_COM_SCAN_DIR_DEC);
 a7e:	88 ec       	ldi	r24, 0xC8	; 200
 a80:	da d0       	rcall	.+436    	; 0xc36 <oledSendCommand>
    oledSendCommand(SSD1306_SET_COM_PINS);
 a82:	8a ed       	ldi	r24, 0xDA	; 218
 a84:	d8 d0       	rcall	.+432    	; 0xc36 <oledSendCommand>
    oledSendCommand(0x12);
 a86:	82 e1       	ldi	r24, 0x12	; 18
 a88:	d6 d0       	rcall	.+428    	; 0xc36 <oledSendCommand>
    oledSendCommand(SSD1306_SET_CONTRAST_CONTROL);
 a8a:	81 e8       	ldi	r24, 0x81	; 129
 a8c:	d4 d0       	rcall	.+424    	; 0xc36 <oledSendCommand>
    oledSendCommand(0xCF);
 a8e:	8f ec       	ldi	r24, 0xCF	; 207
 a90:	d2 d0       	rcall	.+420    	; 0xc36 <oledSendCommand>
    oledSendCommand(SSD1306_SET_PRECHARGE_PERIOD);
 a92:	89 ed       	ldi	r24, 0xD9	; 217
 a94:	d0 d0       	rcall	.+416    	; 0xc36 <oledSendCommand>
    oledSendCommand(0xF1);
 a96:	81 ef       	ldi	r24, 0xF1	; 241
 a98:	ce d0       	rcall	.+412    	; 0xc36 <oledSendCommand>
    oledSendCommand(SSD1306_SET_VCOM_DESELECT);
 a9a:	8b ed       	ldi	r24, 0xDB	; 219
 a9c:	cc d0       	rcall	.+408    	; 0xc36 <oledSendCommand>
    oledSendCommand(0x40);
 a9e:	80 e4       	ldi	r24, 0x40	; 64
 aa0:	ca d0       	rcall	.+404    	; 0xc36 <oledSendCommand>
    oledSendCommand(SSD1306_DISPLAY_ALL_ON_RESUME);
 aa2:	84 ea       	ldi	r24, 0xA4	; 164
 aa4:	c8 d0       	rcall	.+400    	; 0xc36 <oledSendCommand>
    oledSendCommand(SSD1306_NORMAL_DISPLAY);
 aa6:	86 ea       	ldi	r24, 0xA6	; 166
 aa8:	c6 d0       	rcall	.+396    	; 0xc36 <oledSendCommand>
    oledSendCommand(SSD1306_DISPLAY_ON);
 aaa:	8f ea       	ldi	r24, 0xAF	; 175
 aac:	c4 d0       	rcall	.+392    	; 0xc36 <oledSendCommand>
    
    OLED_Clear();  /* Clear the complete LCD during init */
 aae:	01 d0       	rcall	.+2      	; 0xab2 <OLED_Clear>
 ab0:	08 95       	ret

Disassembly of section .text.OLED_SetCursor:

00000b58 <OLED_SetCursor>:
 * description  :This function moves the Cursor to specified position
 Note:If the Input(Line/Char number) are out of range
 then no action will be taken
 ****************************************************************************************************/
void OLED_SetCursor(uint8_t lineNumber,uint8_t cursorPosition)
{
 b58:	cf 93       	push	r28
 b5a:	df 93       	push	r29
    /* Move the Cursor to specified position only if it is in range */
    if((lineNumber <= C_OledLastLine_U8) && (cursorPosition <= 127))
 b5c:	88 30       	cpi	r24, 0x08	; 8
 b5e:	c0 f4       	brcc	.+48     	; 0xb90 <OLED_SetCursor+0x38>
 b60:	66 23       	and	r22, r22
 b62:	b4 f0       	brlt	.+44     	; 0xb90 <OLED_SetCursor+0x38>
 b64:	d6 2f       	mov	r29, r22
 b66:	c8 2f       	mov	r28, r24
    {
        OledLineNum=lineNumber;   /* Save the specified line number */
 b68:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <OledLineNum>
        OledCursorPos=cursorPosition; /* Save the specified cursor position */
 b6c:	60 93 63 00 	sts	0x0063, r22	; 0x800063 <OledCursorPos>
        
        oledSendCommand(SSD1306_SET_COLUMN_ADDR);
 b70:	81 e2       	ldi	r24, 0x21	; 33
 b72:	61 d0       	rcall	.+194    	; 0xc36 <oledSendCommand>
        oledSendCommand(cursorPosition);
 b74:	8d 2f       	mov	r24, r29
 b76:	5f d0       	rcall	.+190    	; 0xc36 <oledSendCommand>
        oledSendCommand(127);
 b78:	8f e7       	ldi	r24, 0x7F	; 127
 b7a:	5d d0       	rcall	.+186    	; 0xc36 <oledSendCommand>
        
        oledSendCommand(SSD1306_SET_PAGE_ADDR);
 b7c:	82 e2       	ldi	r24, 0x22	; 34
 b7e:	5b d0       	rcall	.+182    	; 0xc36 <oledSendCommand>
        oledSendCommand(lineNumber);
 b80:	8c 2f       	mov	r24, r28
 b82:	59 d0       	rcall	.+178    	; 0xc36 <oledSendCommand>
        oledSendCommand(7);
 b84:	87 e0       	ldi	r24, 0x07	; 7
 b86:	57 d0       	rcall	.+174    	; 0xc36 <oledSendCommand>
        
        oledSendStart(SSD1306_ADDRESS);
 b88:	8c e3       	ldi	r24, 0x3C	; 60
 b8a:	60 d0       	rcall	.+192    	; 0xc4c <oledSendStart>
        oledSendByte(SSD1306_DATA_CONTINUE);
 b8c:	80 e4       	ldi	r24, 0x40	; 64
 b8e:	83 d0       	rcall	.+262    	; 0xc96 <oledSendByte>
    }
}
 b90:	df 91       	pop	r29
 b92:	cf 91       	pop	r28
 b94:	08 95       	ret

Disassembly of section .text.OLED_WriteChar:

00000616 <OLED_WriteChar>:
    
    for ( i=0; i<1024; i++)      // Send data
    {
        oledSendByte(ptr_Logo[i]);
    }
}
 616:	2f 92       	push	r2
 618:	3f 92       	push	r3
 61a:	4f 92       	push	r4
 61c:	5f 92       	push	r5
 61e:	6f 92       	push	r6
 620:	7f 92       	push	r7
 622:	8f 92       	push	r8
 624:	9f 92       	push	r9
 626:	af 92       	push	r10
 628:	bf 92       	push	r11
 62a:	cf 92       	push	r12
 62c:	df 92       	push	r13
 62e:	ef 92       	push	r14
 630:	ff 92       	push	r15
 632:	0f 93       	push	r16
 634:	1f 93       	push	r17
 636:	cf 93       	push	r28
 638:	df 93       	push	r29
 63a:	00 d0       	rcall	.+0      	; 0x63c <OLED_WriteChar+0x26>
 63c:	00 d0       	rcall	.+0      	; 0x63e <OLED_WriteChar+0x28>
 63e:	00 d0       	rcall	.+0      	; 0x640 <OLED_WriteChar+0x2a>
 640:	cd b7       	in	r28, 0x3d	; 61
 642:	de b7       	in	r29, 0x3e	; 62
 644:	34 2f       	mov	r19, r20
 646:	49 83       	std	Y+1, r20	; 0x01
 648:	5a 83       	std	Y+2, r21	; 0x02
 64a:	6b 83       	std	Y+3, r22	; 0x03
 64c:	7c 83       	std	Y+4, r23	; 0x04
 64e:	8d 83       	std	Y+5, r24	; 0x05
 650:	9e 83       	std	Y+6, r25	; 0x06
 652:	d2 2e       	mov	r13, r18
 654:	b0 2e       	mov	r11, r16
 656:	9e 2c       	mov	r9, r14
 658:	96 1a       	sub	r9, r22
 65a:	03 2f       	mov	r16, r19
 65c:	10 e0       	ldi	r17, 0x00	; 0
 65e:	45 2e       	mov	r4, r21
 660:	51 2c       	mov	r5, r1
 662:	04 9d       	mul	r16, r4
 664:	70 01       	movw	r14, r0
 666:	05 9d       	mul	r16, r5
 668:	f0 0c       	add	r15, r0
 66a:	14 9d       	mul	r17, r4
 66c:	f0 0c       	add	r15, r0
 66e:	11 24       	eor	r1, r1
 670:	8c e3       	ldi	r24, 0x3C	; 60
 672:	ec d2       	rcall	.+1496   	; 0xc4c <oledSendStart>
 674:	80 e4       	ldi	r24, 0x40	; 64
 676:	0f d3       	rcall	.+1566   	; 0xc96 <oledSendByte>
 678:	21 2c       	mov	r2, r1
 67a:	31 2c       	mov	r3, r1
 67c:	40 c0       	rjmp	.+128    	; 0x6fe <OLED_WriteChar+0xe8>
 67e:	6d 2d       	mov	r22, r13
 680:	62 0d       	add	r22, r2
 682:	8b 2d       	mov	r24, r11
 684:	86 0d       	add	r24, r6
 686:	68 d2       	rcall	.+1232   	; 0xb58 <OLED_SetCursor>
 688:	2c 81       	ldd	r18, Y+4	; 0x04
 68a:	3d 81       	ldd	r19, Y+5	; 0x05
 68c:	4e 81       	ldd	r20, Y+6	; 0x06
 68e:	9e 9c       	mul	r9, r14
 690:	c0 01       	movw	r24, r0
 692:	9f 9c       	mul	r9, r15
 694:	90 0d       	add	r25, r0
 696:	11 24       	eor	r1, r1
 698:	24 9c       	mul	r2, r4
 69a:	b0 01       	movw	r22, r0
 69c:	25 9c       	mul	r2, r5
 69e:	70 0d       	add	r23, r0
 6a0:	34 9c       	mul	r3, r4
 6a2:	70 0d       	add	r23, r0
 6a4:	11 24       	eor	r1, r1
 6a6:	86 0f       	add	r24, r22
 6a8:	97 1f       	adc	r25, r23
 6aa:	86 0d       	add	r24, r6
 6ac:	97 1d       	adc	r25, r7
 6ae:	28 0f       	add	r18, r24
 6b0:	39 1f       	adc	r19, r25
 6b2:	41 1d       	adc	r20, r1
 6b4:	97 fd       	sbrc	r25, 7
 6b6:	4a 95       	dec	r20
 6b8:	f9 01       	movw	r30, r18
 6ba:	84 91       	lpm	r24, Z
 6bc:	47 fd       	sbrc	r20, 7
 6be:	80 81       	ld	r24, Z
 6c0:	aa 20       	and	r10, r10
 6c2:	59 f0       	breq	.+22     	; 0x6da <OLED_WriteChar+0xc4>
 6c4:	92 01       	movw	r18, r4
 6c6:	21 50       	subi	r18, 0x01	; 1
 6c8:	31 09       	sbc	r19, r1
 6ca:	62 16       	cp	r6, r18
 6cc:	73 06       	cpc	r7, r19
 6ce:	29 f4       	brne	.+10     	; 0x6da <OLED_WriteChar+0xc4>
 6d0:	88 20       	and	r8, r8
 6d2:	11 f0       	breq	.+4      	; 0x6d8 <OLED_WriteChar+0xc2>
 6d4:	80 6c       	ori	r24, 0xC0	; 192
 6d6:	01 c0       	rjmp	.+2      	; 0x6da <OLED_WriteChar+0xc4>
 6d8:	80 68       	ori	r24, 0x80	; 128
 6da:	cc 20       	and	r12, r12
 6dc:	19 f0       	breq	.+6      	; 0x6e4 <OLED_WriteChar+0xce>
 6de:	80 95       	com	r24
 6e0:	da d2       	rcall	.+1460   	; 0xc96 <oledSendByte>
 6e2:	01 c0       	rjmp	.+2      	; 0x6e6 <OLED_WriteChar+0xd0>
 6e4:	d8 d2       	rcall	.+1456   	; 0xc96 <oledSendByte>
 6e6:	8f ef       	ldi	r24, 0xFF	; 255
 6e8:	68 1a       	sub	r6, r24
 6ea:	78 0a       	sbc	r7, r24
 6ec:	02 c0       	rjmp	.+4      	; 0x6f2 <OLED_WriteChar+0xdc>
 6ee:	61 2c       	mov	r6, r1
 6f0:	71 2c       	mov	r7, r1
 6f2:	64 14       	cp	r6, r4
 6f4:	75 04       	cpc	r7, r5
 6f6:	1c f2       	brlt	.-122    	; 0x67e <OLED_WriteChar+0x68>
 6f8:	8f ef       	ldi	r24, 0xFF	; 255
 6fa:	28 1a       	sub	r2, r24
 6fc:	38 0a       	sbc	r3, r24
 6fe:	20 16       	cp	r2, r16
 700:	31 06       	cpc	r3, r17
 702:	ac f3       	brlt	.-22     	; 0x6ee <OLED_WriteChar+0xd8>
 704:	26 96       	adiw	r28, 0x06	; 6
 706:	0f b6       	in	r0, 0x3f	; 63
 708:	f8 94       	cli
 70a:	de bf       	out	0x3e, r29	; 62
 70c:	0f be       	out	0x3f, r0	; 63
 70e:	cd bf       	out	0x3d, r28	; 61
 710:	df 91       	pop	r29
 712:	cf 91       	pop	r28
 714:	1f 91       	pop	r17
 716:	0f 91       	pop	r16
 718:	ff 90       	pop	r15
 71a:	ef 90       	pop	r14
 71c:	df 90       	pop	r13
 71e:	cf 90       	pop	r12
 720:	bf 90       	pop	r11
 722:	af 90       	pop	r10
 724:	9f 90       	pop	r9
 726:	8f 90       	pop	r8
 728:	7f 90       	pop	r7
 72a:	6f 90       	pop	r6
 72c:	5f 90       	pop	r5
 72e:	4f 90       	pop	r4
 730:	3f 90       	pop	r3
 732:	2f 90       	pop	r2
 734:	08 95       	ret

Disassembly of section .text.OLED_WriteTwoDigitNumber:

00000822 <OLED_WriteTwoDigitNumber>:
 822:	8f 92       	push	r8
 824:	9f 92       	push	r9
 826:	af 92       	push	r10
 828:	bf 92       	push	r11
 82a:	cf 92       	push	r12
 82c:	df 92       	push	r13
 82e:	ef 92       	push	r14
 830:	ff 92       	push	r15
 832:	0f 93       	push	r16
 834:	1f 93       	push	r17
 836:	cf 93       	push	r28
 838:	df 93       	push	r29
 83a:	00 d0       	rcall	.+0      	; 0x83c <OLED_WriteTwoDigitNumber+0x1a>
 83c:	00 d0       	rcall	.+0      	; 0x83e <OLED_WriteTwoDigitNumber+0x1c>
 83e:	00 d0       	rcall	.+0      	; 0x840 <OLED_WriteTwoDigitNumber+0x1e>
 840:	cd b7       	in	r28, 0x3d	; 61
 842:	de b7       	in	r29, 0x3e	; 62
 844:	49 83       	std	Y+1, r20	; 0x01
 846:	5a 83       	std	Y+2, r21	; 0x02
 848:	6b 83       	std	Y+3, r22	; 0x03
 84a:	7c 83       	std	Y+4, r23	; 0x04
 84c:	8d 83       	std	Y+5, r24	; 0x05
 84e:	9e 83       	std	Y+6, r25	; 0x06
 850:	b2 2e       	mov	r11, r18
 852:	9e 2c       	mov	r9, r14
 854:	da 2c       	mov	r13, r10
 856:	a8 2c       	mov	r10, r8
 858:	1d ec       	ldi	r17, 0xCD	; 205
 85a:	e1 9e       	mul	r14, r17
 85c:	11 2d       	mov	r17, r1
 85e:	11 24       	eor	r1, r1
 860:	16 95       	lsr	r17
 862:	16 95       	lsr	r17
 864:	16 95       	lsr	r17
 866:	0f 2e       	mov	r0, r31
 868:	f0 e3       	ldi	r31, 0x30	; 48
 86a:	ef 2e       	mov	r14, r31
 86c:	f0 2d       	mov	r31, r0
 86e:	e1 0e       	add	r14, r17
 870:	8e 88       	ldd	r8, Y+22	; 0x16
 872:	d1 de       	rcall	.-606    	; 0x616 <OLED_WriteChar>
 874:	49 81       	ldd	r20, Y+1	; 0x01
 876:	11 0f       	add	r17, r17
 878:	81 2f       	mov	r24, r17
 87a:	88 0f       	add	r24, r24
 87c:	88 0f       	add	r24, r24
 87e:	18 0f       	add	r17, r24
 880:	89 2d       	mov	r24, r9
 882:	81 1b       	sub	r24, r17
 884:	0f 2e       	mov	r0, r31
 886:	f0 e3       	ldi	r31, 0x30	; 48
 888:	ef 2e       	mov	r14, r31
 88a:	f0 2d       	mov	r31, r0
 88c:	e8 0e       	add	r14, r24
 88e:	2b 2d       	mov	r18, r11
 890:	24 0f       	add	r18, r20
 892:	8e 88       	ldd	r8, Y+22	; 0x16
 894:	ad 88       	ldd	r10, Y+21	; 0x15
 896:	cd 2c       	mov	r12, r13
 898:	5a 81       	ldd	r21, Y+2	; 0x02
 89a:	6b 81       	ldd	r22, Y+3	; 0x03
 89c:	7c 81       	ldd	r23, Y+4	; 0x04
 89e:	8d 81       	ldd	r24, Y+5	; 0x05
 8a0:	9e 81       	ldd	r25, Y+6	; 0x06
 8a2:	b9 de       	rcall	.-654    	; 0x616 <OLED_WriteChar>
 8a4:	26 96       	adiw	r28, 0x06	; 6
 8a6:	0f b6       	in	r0, 0x3f	; 63
 8a8:	f8 94       	cli
 8aa:	de bf       	out	0x3e, r29	; 62
 8ac:	0f be       	out	0x3f, r0	; 63
 8ae:	cd bf       	out	0x3d, r28	; 61
 8b0:	df 91       	pop	r29
 8b2:	cf 91       	pop	r28
 8b4:	1f 91       	pop	r17
 8b6:	0f 91       	pop	r16
 8b8:	ff 90       	pop	r15
 8ba:	ef 90       	pop	r14
 8bc:	df 90       	pop	r13
 8be:	cf 90       	pop	r12
 8c0:	bf 90       	pop	r11
 8c2:	af 90       	pop	r10
 8c4:	9f 90       	pop	r9
 8c6:	8f 90       	pop	r8
 8c8:	08 95       	ret

Disassembly of section .text.OLED_WriteNumber:

00000736 <OLED_WriteNumber>:
 736:	8f 92       	push	r8
 738:	af 92       	push	r10
 73a:	bf 92       	push	r11
 73c:	cf 92       	push	r12
 73e:	df 92       	push	r13
 740:	ef 92       	push	r14
 742:	ff 92       	push	r15
 744:	0f 93       	push	r16
 746:	1f 93       	push	r17
 748:	cf 93       	push	r28
 74a:	df 93       	push	r29
 74c:	00 d0       	rcall	.+0      	; 0x74e <OLED_WriteNumber+0x18>
 74e:	00 d0       	rcall	.+0      	; 0x750 <OLED_WriteNumber+0x1a>
 750:	00 d0       	rcall	.+0      	; 0x752 <OLED_WriteNumber+0x1c>
 752:	cd b7       	in	r28, 0x3d	; 61
 754:	de b7       	in	r29, 0x3e	; 62
 756:	49 83       	std	Y+1, r20	; 0x01
 758:	5a 83       	std	Y+2, r21	; 0x02
 75a:	6b 83       	std	Y+3, r22	; 0x03
 75c:	7c 83       	std	Y+4, r23	; 0x04
 75e:	8d 83       	std	Y+5, r24	; 0x05
 760:	9e 83       	std	Y+6, r25	; 0x06
 762:	b2 2e       	mov	r11, r18
 764:	10 2f       	mov	r17, r16
 766:	67 01       	movw	r12, r14
 768:	20 93 6b 00 	sts	0x006B, r18	; 0x80006b <Xposition.2335>
 76c:	62 2f       	mov	r22, r18
 76e:	80 2f       	mov	r24, r16
 770:	f3 d1       	rcall	.+998    	; 0xb58 <OLED_SetCursor>
 772:	2a e0       	ldi	r18, 0x0A	; 10
 774:	e2 16       	cp	r14, r18
 776:	f1 04       	cpc	r15, r1
 778:	98 f0       	brcs	.+38     	; 0x7a0 <OLED_WriteNumber+0x6a>
 77a:	97 01       	movw	r18, r14
 77c:	ad ec       	ldi	r26, 0xCD	; 205
 77e:	bc ec       	ldi	r27, 0xCC	; 204
 780:	4e d2       	rcall	.+1180   	; 0xc1e <__umulhisi3>
 782:	7c 01       	movw	r14, r24
 784:	f6 94       	lsr	r15
 786:	e7 94       	ror	r14
 788:	f6 94       	lsr	r15
 78a:	e7 94       	ror	r14
 78c:	f6 94       	lsr	r15
 78e:	e7 94       	ror	r14
 790:	2b 2d       	mov	r18, r11
 792:	49 81       	ldd	r20, Y+1	; 0x01
 794:	5a 81       	ldd	r21, Y+2	; 0x02
 796:	6b 81       	ldd	r22, Y+3	; 0x03
 798:	7c 81       	ldd	r23, Y+4	; 0x04
 79a:	8d 81       	ldd	r24, Y+5	; 0x05
 79c:	9e 81       	ldd	r25, Y+6	; 0x06
 79e:	cb df       	rcall	.-106    	; 0x736 <OLED_WriteNumber>
 7a0:	96 01       	movw	r18, r12
 7a2:	ad ec       	ldi	r26, 0xCD	; 205
 7a4:	bc ec       	ldi	r27, 0xCC	; 204
 7a6:	3b d2       	rcall	.+1142   	; 0xc1e <__umulhisi3>
 7a8:	96 95       	lsr	r25
 7aa:	87 95       	ror	r24
 7ac:	96 95       	lsr	r25
 7ae:	87 95       	ror	r24
 7b0:	96 95       	lsr	r25
 7b2:	87 95       	ror	r24
 7b4:	7c 01       	movw	r14, r24
 7b6:	ee 0c       	add	r14, r14
 7b8:	ff 1c       	adc	r15, r15
 7ba:	88 0f       	add	r24, r24
 7bc:	99 1f       	adc	r25, r25
 7be:	88 0f       	add	r24, r24
 7c0:	99 1f       	adc	r25, r25
 7c2:	88 0f       	add	r24, r24
 7c4:	99 1f       	adc	r25, r25
 7c6:	8e 0d       	add	r24, r14
 7c8:	9f 1d       	adc	r25, r15
 7ca:	28 1b       	sub	r18, r24
 7cc:	39 0b       	sbc	r19, r25
 7ce:	0f 2e       	mov	r0, r31
 7d0:	f0 e3       	ldi	r31, 0x30	; 48
 7d2:	ef 2e       	mov	r14, r31
 7d4:	f0 2d       	mov	r31, r0
 7d6:	e2 0e       	add	r14, r18
 7d8:	81 2c       	mov	r8, r1
 7da:	a1 2c       	mov	r10, r1
 7dc:	c1 2c       	mov	r12, r1
 7de:	01 2f       	mov	r16, r17
 7e0:	20 91 6b 00 	lds	r18, 0x006B	; 0x80006b <Xposition.2335>
 7e4:	49 81       	ldd	r20, Y+1	; 0x01
 7e6:	5a 81       	ldd	r21, Y+2	; 0x02
 7e8:	6b 81       	ldd	r22, Y+3	; 0x03
 7ea:	7c 81       	ldd	r23, Y+4	; 0x04
 7ec:	8d 81       	ldd	r24, Y+5	; 0x05
 7ee:	9e 81       	ldd	r25, Y+6	; 0x06
 7f0:	12 df       	rcall	.-476    	; 0x616 <OLED_WriteChar>
 7f2:	89 81       	ldd	r24, Y+1	; 0x01
 7f4:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <Xposition.2335>
 7f8:	89 0f       	add	r24, r25
 7fa:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <Xposition.2335>
 7fe:	26 96       	adiw	r28, 0x06	; 6
 800:	0f b6       	in	r0, 0x3f	; 63
 802:	f8 94       	cli
 804:	de bf       	out	0x3e, r29	; 62
 806:	0f be       	out	0x3f, r0	; 63
 808:	cd bf       	out	0x3d, r28	; 61
 80a:	df 91       	pop	r29
 80c:	cf 91       	pop	r28
 80e:	1f 91       	pop	r17
 810:	0f 91       	pop	r16
 812:	ff 90       	pop	r15
 814:	ef 90       	pop	r14
 816:	df 90       	pop	r13
 818:	cf 90       	pop	r12
 81a:	bf 90       	pop	r11
 81c:	af 90       	pop	r10
 81e:	8f 90       	pop	r8
 820:	08 95       	ret

Disassembly of section .text.OLED_DrawBitmapRLE:

000008ca <OLED_DrawBitmapRLE>:
#endif

void OLED_DrawBitmapRLE(unsigned char Xpos, unsigned char Ypos, const unsigned char *CompressedBitmap, unsigned int RleLength)
{
 8ca:	4f 92       	push	r4
 8cc:	5f 92       	push	r5
 8ce:	6f 92       	push	r6
 8d0:	8f 92       	push	r8
 8d2:	9f 92       	push	r9
 8d4:	af 92       	push	r10
 8d6:	bf 92       	push	r11
 8d8:	cf 92       	push	r12
 8da:	df 92       	push	r13
 8dc:	ef 92       	push	r14
 8de:	0f 93       	push	r16
 8e0:	1f 93       	push	r17
 8e2:	cf 93       	push	r28
 8e4:	df 93       	push	r29
 8e6:	69 01       	movw	r12, r18
 8e8:	e4 2e       	mov	r14, r20
 8ea:	48 01       	movw	r8, r16
	unsigned char NumOfRawsInBitmap, NumOfBytes,ByteValue;
	
	//	(Hight%8 == 0) ? NumOfRawsInBitmap = Hight/8 : NumOfRawsInBitmap = Hight/8+1;
	
   OLED_SetCursor(0,0);
 8ec:	60 e0       	ldi	r22, 0x00	; 0
 8ee:	80 e0       	ldi	r24, 0x00	; 0
 8f0:	33 d1       	rcall	.+614    	; 0xb58 <OLED_SetCursor>
   
   oledSendStart(SSD1306_ADDRESS);
 8f2:	8c e3       	ldi	r24, 0x3C	; 60
 8f4:	ab d1       	rcall	.+854    	; 0xc4c <oledSendStart>
   oledSendByte(SSD1306_DATA_CONTINUE);
 8f6:	80 e4       	ldi	r24, 0x40	; 64
 8f8:	ce d1       	rcall	.+924    	; 0xc96 <oledSendByte>
   
   	for (unsigned int i=0; i< RleLength/2; i++)
 8fa:	a1 2c       	mov	r10, r1
 8fc:	b1 2c       	mov	r11, r1
 8fe:	1e c0       	rjmp	.+60     	; 0x93c <OLED_DrawBitmapRLE+0x72>
	{
		NumOfBytes = *CompressedBitmap++;
 900:	f6 01       	movw	r30, r12
 902:	d4 91       	lpm	r29, Z
 904:	e7 fc       	sbrc	r14, 7
 906:	d0 81       	ld	r29, Z
		ByteValue = *CompressedBitmap++;
 908:	26 01       	movw	r4, r12
 90a:	6e 2c       	mov	r6, r14
 90c:	82 e0       	ldi	r24, 0x02	; 2
 90e:	48 0e       	add	r4, r24
 910:	51 1c       	adc	r5, r1
 912:	61 1c       	adc	r6, r1
 914:	8f ef       	ldi	r24, 0xFF	; 255
 916:	c8 1a       	sub	r12, r24
 918:	d8 0a       	sbc	r13, r24
 91a:	e8 0a       	sbc	r14, r24
 91c:	f6 01       	movw	r30, r12
 91e:	14 91       	lpm	r17, Z
 920:	e7 fc       	sbrc	r14, 7
 922:	10 81       	ld	r17, Z
		
		for (unsigned char x=0; x < NumOfBytes; x++)
 924:	c0 e0       	ldi	r28, 0x00	; 0
 926:	03 c0       	rjmp	.+6      	; 0x92e <OLED_DrawBitmapRLE+0x64>
		oledSendByte (ByteValue);
 928:	81 2f       	mov	r24, r17
 92a:	b5 d1       	rcall	.+874    	; 0xc96 <oledSendByte>
   	for (unsigned int i=0; i< RleLength/2; i++)
	{
		NumOfBytes = *CompressedBitmap++;
		ByteValue = *CompressedBitmap++;
		
		for (unsigned char x=0; x < NumOfBytes; x++)
 92c:	cf 5f       	subi	r28, 0xFF	; 255
 92e:	cd 17       	cp	r28, r29
 930:	d8 f3       	brcs	.-10     	; 0x928 <OLED_DrawBitmapRLE+0x5e>
   OLED_SetCursor(0,0);
   
   oledSendStart(SSD1306_ADDRESS);
   oledSendByte(SSD1306_DATA_CONTINUE);
   
   	for (unsigned int i=0; i< RleLength/2; i++)
 932:	8f ef       	ldi	r24, 0xFF	; 255
 934:	a8 1a       	sub	r10, r24
 936:	b8 0a       	sbc	r11, r24
	{
		NumOfBytes = *CompressedBitmap++;
		ByteValue = *CompressedBitmap++;
 938:	e6 2c       	mov	r14, r6
 93a:	62 01       	movw	r12, r4
   OLED_SetCursor(0,0);
   
   oledSendStart(SSD1306_ADDRESS);
   oledSendByte(SSD1306_DATA_CONTINUE);
   
   	for (unsigned int i=0; i< RleLength/2; i++)
 93c:	c4 01       	movw	r24, r8
 93e:	96 95       	lsr	r25
 940:	87 95       	ror	r24
 942:	a8 16       	cp	r10, r24
 944:	b9 06       	cpc	r11, r25
 946:	e0 f2       	brcs	.-72     	; 0x900 <OLED_DrawBitmapRLE+0x36>
		
		for (unsigned char x=0; x < NumOfBytes; x++)
		oledSendByte (ByteValue);
	}
	
}
 948:	df 91       	pop	r29
 94a:	cf 91       	pop	r28
 94c:	1f 91       	pop	r17
 94e:	0f 91       	pop	r16
 950:	ef 90       	pop	r14
 952:	df 90       	pop	r13
 954:	cf 90       	pop	r12
 956:	bf 90       	pop	r11
 958:	af 90       	pop	r10
 95a:	9f 90       	pop	r9
 95c:	8f 90       	pop	r8
 95e:	6f 90       	pop	r6
 960:	5f 90       	pop	r5
 962:	4f 90       	pop	r4
 964:	08 95       	ret

Disassembly of section .text.libgcc.mul:

00000c1e <__umulhisi3>:
 c1e:	a2 9f       	mul	r26, r18
 c20:	b0 01       	movw	r22, r0
 c22:	b3 9f       	mul	r27, r19
 c24:	c0 01       	movw	r24, r0
 c26:	a3 9f       	mul	r26, r19
 c28:	01 d0       	rcall	.+2      	; 0xc2c <__umulhisi3+0xe>
 c2a:	b2 9f       	mul	r27, r18
 c2c:	70 0d       	add	r23, r0
 c2e:	81 1d       	adc	r24, r1
 c30:	11 24       	eor	r1, r1
 c32:	91 1d       	adc	r25, r1
 c34:	08 95       	ret

Disassembly of section .text.__dummy_fini:

00000c9c <_fini>:
 c9c:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00000c9e <__funcs_on_exit>:
 c9e:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00000ca0 <__simulator_exit>:
 ca0:	08 95       	ret

Disassembly of section .text.exit:

00000c78 <exit>:
 c78:	ec 01       	movw	r28, r24
 c7a:	11 d0       	rcall	.+34     	; 0xc9e <__funcs_on_exit>
 c7c:	0f d0       	rcall	.+30     	; 0xc9c <_fini>
 c7e:	ce 01       	movw	r24, r28
 c80:	0f d0       	rcall	.+30     	; 0xca0 <__simulator_exit>
 c82:	ce 01       	movw	r24, r28
 c84:	0e d0       	rcall	.+28     	; 0xca2 <_Exit>

Disassembly of section .text._Exit:

00000ca2 <_Exit>:
 ca2:	f0 d9       	rcall	.-3104   	; 0x84 <_exit>
