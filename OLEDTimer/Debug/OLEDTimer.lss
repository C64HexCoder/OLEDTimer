
OLEDTimer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000088  00000000  00000000  000000d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000009e4  2**0
                  ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  000009e4  2**0
                  ALLOC
  3 .comment      0000002f  00000000  00000000  000009e4  2**0
                  CONTENTS, READONLY
  4 .stack.descriptors.hdr 0000000e  00000000  00000000  00000a13  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  00000a21  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001e6c  00000000  00000000  00000b39  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000824  00000000  00000000  000029a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a93  00000000  00000000  000031c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000350  00000000  00000000  00003c5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000026f  00000000  00000000  00003fac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d0f  00000000  00000000  0000421b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  00004f2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .text         00000002  00000900  00000900  000009d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000502c  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .text.i2c_init 0000000c  000008ec  000008ec  000009c0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.i2c_tx_start 00000024  00000868  00000868  0000093c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.i2c_tx_address 00000048  000007e2  000007e2  000008b6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.i2c_tx_byte 0000001e  0000088c  0000088c  00000960  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.i2c_tx_stop 0000000e  000008d0  000008d0  000009a4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .bss.masterMode 00000001  00800068  00800068  000009e4  2**0
                  ALLOC
 21 .text.main    0000006c  000006ae  000006ae  00000782  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .data.SevenSegments_struc 00000006  00800062  0000090a  000009de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 23 .progmemx.data.SevenSegments11x19 0000018c  000002be  000002be  00000392  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 24 .progmemx.data.CathClockMainScreenRLE 00000236  00000088  00000088  0000015c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 25 .text.oledSendStart 00000010  000008c0  000008c0  00000994  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.oledSendStop 00000004  000008f8  000008f8  000009cc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.oledSendByte 00000004  000008fc  000008fc  000009d0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.oledSendCommand 00000016  000008aa  000008aa  0000097e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.OLED_Clear 0000005e  00000784  00000784  00000858  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.OLED_Init 0000006a  0000071a  0000071a  000007ee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.OLED_SetCursor 0000003e  0000082a  0000082a  000008fe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.OLED_WriteChar 00000120  0000044a  0000044a  0000051e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text.OLED_WriteTwoDigitNumber 000000a8  0000056a  0000056a  0000063e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text.OLED_DrawBitmapRLE 0000009c  00000612  00000612  000006e6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text.__dummy_fini 00000002  00000902  00000902  000009d6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .text.__dummy_funcs_on_exit 00000002  00000904  00000904  000009d8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .text.__dummy_simulator_exit 00000002  00000906  00000906  000009da  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 38 .text.exit    0000000e  000008de  000008de  000009b2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 .text._Exit   00000002  00000908  00000908  000009dc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	1b c0       	rjmp	.+54     	; 0x38 <__ctors_end>
   2:	7e c4       	rjmp	.+2300   	; 0x900 <__bad_interrupt>
   4:	7d c4       	rjmp	.+2298   	; 0x900 <__bad_interrupt>
   6:	7c c4       	rjmp	.+2296   	; 0x900 <__bad_interrupt>
   8:	7b c4       	rjmp	.+2294   	; 0x900 <__bad_interrupt>
   a:	7a c4       	rjmp	.+2292   	; 0x900 <__bad_interrupt>
   c:	79 c4       	rjmp	.+2290   	; 0x900 <__bad_interrupt>
   e:	78 c4       	rjmp	.+2288   	; 0x900 <__bad_interrupt>
  10:	77 c4       	rjmp	.+2286   	; 0x900 <__bad_interrupt>
  12:	76 c4       	rjmp	.+2284   	; 0x900 <__bad_interrupt>
  14:	75 c4       	rjmp	.+2282   	; 0x900 <__bad_interrupt>
  16:	74 c4       	rjmp	.+2280   	; 0x900 <__bad_interrupt>
  18:	73 c4       	rjmp	.+2278   	; 0x900 <__bad_interrupt>
  1a:	72 c4       	rjmp	.+2276   	; 0x900 <__bad_interrupt>
  1c:	71 c4       	rjmp	.+2274   	; 0x900 <__bad_interrupt>
  1e:	70 c4       	rjmp	.+2272   	; 0x900 <__bad_interrupt>
  20:	6f c4       	rjmp	.+2270   	; 0x900 <__bad_interrupt>
  22:	6e c4       	rjmp	.+2268   	; 0x900 <__bad_interrupt>
  24:	6d c4       	rjmp	.+2266   	; 0x900 <__bad_interrupt>

00000026 <.dinit>:
  26:	00 60       	ori	r16, 0x00	; 0
  28:	00 62       	ori	r16, 0x20	; 32
  2a:	80 00       	.word	0x0080	; ????
  2c:	62 00       	.word	0x0062	; ????
  2e:	68 00       	.word	0x0068	; ????
  30:	09 0a       	sbc	r0, r25
  32:	00 68       	ori	r16, 0x80	; 128
  34:	00 69       	ori	r16, 0x90	; 144
  36:	80 00       	.word	0x0080	; ????

00000038 <__ctors_end>:
  38:	11 24       	eor	r1, r1
  3a:	1f be       	out	0x3f, r1	; 63
  3c:	cf e5       	ldi	r28, 0x5F	; 95
  3e:	d4 e0       	ldi	r29, 0x04	; 4
  40:	de bf       	out	0x3e, r29	; 62
  42:	cd bf       	out	0x3d, r28	; 61

00000044 <__do_copy_data>:
  44:	e6 e2       	ldi	r30, 0x26	; 38
  46:	f0 e0       	ldi	r31, 0x00	; 0
  48:	40 e0       	ldi	r20, 0x00	; 0
  4a:	17 c0       	rjmp	.+46     	; 0x7a <__do_clear_bss+0x8>
  4c:	b5 91       	lpm	r27, Z+
  4e:	a5 91       	lpm	r26, Z+
  50:	35 91       	lpm	r19, Z+
  52:	25 91       	lpm	r18, Z+
  54:	05 91       	lpm	r16, Z+
  56:	07 fd       	sbrc	r16, 7
  58:	0c c0       	rjmp	.+24     	; 0x72 <__do_clear_bss>
  5a:	95 91       	lpm	r25, Z+
  5c:	85 91       	lpm	r24, Z+
  5e:	ef 01       	movw	r28, r30
  60:	f9 2f       	mov	r31, r25
  62:	e8 2f       	mov	r30, r24
  64:	05 90       	lpm	r0, Z+
  66:	0d 92       	st	X+, r0
  68:	a2 17       	cp	r26, r18
  6a:	b3 07       	cpc	r27, r19
  6c:	d9 f7       	brne	.-10     	; 0x64 <__do_copy_data+0x20>
  6e:	fe 01       	movw	r30, r28
  70:	04 c0       	rjmp	.+8      	; 0x7a <__do_clear_bss+0x8>

00000072 <__do_clear_bss>:
  72:	1d 92       	st	X+, r1
  74:	a2 17       	cp	r26, r18
  76:	b3 07       	cpc	r27, r19
  78:	e1 f7       	brne	.-8      	; 0x72 <__do_clear_bss>
  7a:	e7 33       	cpi	r30, 0x37	; 55
  7c:	f4 07       	cpc	r31, r20
  7e:	31 f7       	brne	.-52     	; 0x4c <__do_copy_data+0x8>
  80:	16 d3       	rcall	.+1580   	; 0x6ae <main>
  82:	2d c4       	rjmp	.+2138   	; 0x8de <exit>

00000084 <_exit>:
  84:	f8 94       	cli

00000086 <__stop_program>:
  86:	ff cf       	rjmp	.-2      	; 0x86 <__stop_program>

Disassembly of section .text:

00000900 <__bad_interrupt>:
 900:	7f cb       	rjmp	.-2306   	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.i2c_init:

000008ec <i2c_init>:

static bool masterMode;

void i2c_init(void)
{
    TWSR &= ~((1 << TWPS1) | (1 << TWPS0)); // pre-scalar 1
 8ec:	81 b1       	in	r24, 0x01	; 1
 8ee:	8c 7f       	andi	r24, 0xFC	; 252
 8f0:	81 b9       	out	0x01, r24	; 1
    TWBR = 2; // I've changed it to 400k.. for fast disply... it was very slow display in 100k //((F_CPU / F_I2C) - 16) / 2; // baud rate factor 12
 8f2:	82 e0       	ldi	r24, 0x02	; 2
 8f4:	80 b9       	out	0x00, r24	; 0
 8f6:	08 95       	ret

Disassembly of section .text.i2c_tx_start:

00000868 <i2c_tx_start>:
    } else {
        status = TRANSMISSION_ERROR;
    }

    return status;
}
 868:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <masterMode>
 86c:	86 b7       	in	r24, 0x36	; 54
 86e:	84 6a       	ori	r24, 0xA4	; 164
 870:	86 bf       	out	0x36, r24	; 54
 872:	06 b6       	in	r0, 0x36	; 54
 874:	07 fe       	sbrs	r0, 7
 876:	fd cf       	rjmp	.-6      	; 0x872 <i2c_tx_start+0xa>
 878:	81 b1       	in	r24, 0x01	; 1
 87a:	88 7f       	andi	r24, 0xF8	; 248
 87c:	88 30       	cpi	r24, 0x08	; 8
 87e:	11 f0       	breq	.+4      	; 0x884 <i2c_tx_start+0x1c>
 880:	80 31       	cpi	r24, 0x10	; 16
 882:	11 f4       	brne	.+4      	; 0x888 <i2c_tx_start+0x20>
 884:	8f ef       	ldi	r24, 0xFF	; 255
 886:	08 95       	ret
 888:	8e ef       	ldi	r24, 0xFE	; 254
 88a:	08 95       	ret

Disassembly of section .text.i2c_tx_address:

000007e2 <i2c_tx_address>:
 7e2:	90 e0       	ldi	r25, 0x00	; 0
 7e4:	88 0f       	add	r24, r24
 7e6:	99 1f       	adc	r25, r25
 7e8:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <masterMode>
 7ec:	89 2b       	or	r24, r25
 7ee:	83 b9       	out	0x03, r24	; 3
 7f0:	84 e8       	ldi	r24, 0x84	; 132
 7f2:	86 bf       	out	0x36, r24	; 54
 7f4:	06 b6       	in	r0, 0x36	; 54
 7f6:	07 fe       	sbrs	r0, 7
 7f8:	fd cf       	rjmp	.-6      	; 0x7f4 <i2c_tx_address+0x12>
 7fa:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <masterMode>
 7fe:	81 11       	cpse	r24, r1
 800:	06 c0       	rjmp	.+12     	; 0x80e <i2c_tx_address+0x2c>
 802:	81 b1       	in	r24, 0x01	; 1
 804:	88 7f       	andi	r24, 0xF8	; 248
 806:	88 31       	cpi	r24, 0x18	; 24
 808:	51 f4       	brne	.+20     	; 0x81e <i2c_tx_address+0x3c>
 80a:	8f ef       	ldi	r24, 0xFF	; 255
 80c:	08 95       	ret
 80e:	81 30       	cpi	r24, 0x01	; 1
 810:	41 f4       	brne	.+16     	; 0x822 <i2c_tx_address+0x40>
 812:	81 b1       	in	r24, 0x01	; 1
 814:	88 7f       	andi	r24, 0xF8	; 248
 816:	80 34       	cpi	r24, 0x40	; 64
 818:	31 f4       	brne	.+12     	; 0x826 <i2c_tx_address+0x44>
 81a:	8f ef       	ldi	r24, 0xFF	; 255
 81c:	08 95       	ret
 81e:	8e ef       	ldi	r24, 0xFE	; 254
 820:	08 95       	ret
 822:	80 e0       	ldi	r24, 0x00	; 0
 824:	08 95       	ret
 826:	8e ef       	ldi	r24, 0xFE	; 254
 828:	08 95       	ret

Disassembly of section .text.i2c_tx_byte:

0000088c <i2c_tx_byte>:
 88c:	83 b9       	out	0x03, r24	; 3
 88e:	86 b7       	in	r24, 0x36	; 54
 890:	80 68       	ori	r24, 0x80	; 128
 892:	86 bf       	out	0x36, r24	; 54
 894:	06 b6       	in	r0, 0x36	; 54
 896:	07 fe       	sbrs	r0, 7
 898:	fd cf       	rjmp	.-6      	; 0x894 <i2c_tx_byte+0x8>
 89a:	81 b1       	in	r24, 0x01	; 1
 89c:	88 7f       	andi	r24, 0xF8	; 248
 89e:	88 32       	cpi	r24, 0x28	; 40
 8a0:	11 f4       	brne	.+4      	; 0x8a6 <i2c_tx_byte+0x1a>
 8a2:	8f ef       	ldi	r24, 0xFF	; 255
 8a4:	08 95       	ret
 8a6:	8e ef       	ldi	r24, 0xFE	; 254
 8a8:	08 95       	ret

Disassembly of section .text.i2c_tx_stop:

000008d0 <i2c_tx_stop>:

void i2c_tx_stop(void)
{
    /* clear interrupt flag, issue stop command (cleared automatically) */
    TWCR |= (1 << TWINT) | (1 << TWSTO);
 8d0:	86 b7       	in	r24, 0x36	; 54
 8d2:	80 69       	ori	r24, 0x90	; 144
 8d4:	86 bf       	out	0x36, r24	; 54

    while ((TWCR & (1 << TWSTO))); // wait until stop transmitted
 8d6:	06 b6       	in	r0, 0x36	; 54
 8d8:	04 fc       	sbrc	r0, 4
 8da:	fd cf       	rjmp	.-6      	; 0x8d6 <i2c_tx_stop+0x6>
}
 8dc:	08 95       	ret

Disassembly of section .text.main:

000006ae <main>:
#include "7segment digits.h"
//#include "OLED.h"

int main(void)
{
	DDRD = 0x01;
 6ae:	81 e0       	ldi	r24, 0x01	; 1
 6b0:	81 bb       	out	0x11, r24	; 17
	//OLED oled;
		
	OLED_Init();  //initialize the OLED
 6b2:	33 d0       	rcall	.+102    	; 0x71a <OLED_Init>
	OLED_Clear(); //clear the display (for good measure)
 6b4:	67 d0       	rcall	.+206    	; 0x784 <OLED_Clear>
		
	OLED_SetCursor(0, 0);        //set the cursor position to (0, 0)
 6b6:	60 e0       	ldi	r22, 0x00	; 0
 6b8:	80 e0       	ldi	r24, 0x00	; 0
 6ba:	b7 d0       	rcall	.+366    	; 0x82a <OLED_SetCursor>
	OLED_DrawBitmapRLE (0,0,CathClockMainScreenRLE,566); //Print out some text
 6bc:	06 e3       	ldi	r16, 0x36	; 54
 6be:	12 e0       	ldi	r17, 0x02	; 2
 6c0:	28 e8       	ldi	r18, 0x88	; 136
 6c2:	30 e0       	ldi	r19, 0x00	; 0
 6c4:	40 e0       	ldi	r20, 0x00	; 0
 6c6:	60 e0       	ldi	r22, 0x00	; 0
 6c8:	80 e0       	ldi	r24, 0x00	; 0
 6ca:	a3 df       	rcall	.-186    	; 0x612 <OLED_DrawBitmapRLE>
	OLED_WriteTwoDigitNumber(SevenSegments_struc,42,4,02,false,false,false,false,false);
 6cc:	1f 92       	push	r1
 6ce:	1f 92       	push	r1
 6d0:	81 2c       	mov	r8, r1
 6d2:	a1 2c       	mov	r10, r1
 6d4:	c1 2c       	mov	r12, r1
 6d6:	68 94       	set
 6d8:	ee 24       	eor	r14, r14
 6da:	e1 f8       	bld	r14, 1
 6dc:	04 e0       	ldi	r16, 0x04	; 4
 6de:	2a e2       	ldi	r18, 0x2A	; 42
 6e0:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <_end>
 6e4:	50 91 63 00 	lds	r21, 0x0063	; 0x800063 <_end+0x1>
 6e8:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <_end+0x2>
 6ec:	70 91 65 00 	lds	r23, 0x0065	; 0x800065 <_end+0x3>
 6f0:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <_end+0x4>
 6f4:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <_end+0x5>
 6f8:	38 df       	rcall	.-400    	; 0x56a <OLED_WriteTwoDigitNumber>
 6fa:	0f 90       	pop	r0
 6fc:	0f 90       	pop	r0
	
	
	while (1)
	{
		PORTD ^= 0x01;
 6fe:	92 b3       	in	r25, 0x12	; 18
 700:	81 e0       	ldi	r24, 0x01	; 1
 702:	89 27       	eor	r24, r25
 704:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 706:	2f ef       	ldi	r18, 0xFF	; 255
 708:	80 e7       	ldi	r24, 0x70	; 112
 70a:	92 e0       	ldi	r25, 0x02	; 2
 70c:	21 50       	subi	r18, 0x01	; 1
 70e:	80 40       	sbci	r24, 0x00	; 0
 710:	90 40       	sbci	r25, 0x00	; 0
 712:	e1 f7       	brne	.-8      	; 0x70c <main+0x5e>
 714:	00 c0       	rjmp	.+0      	; 0x716 <main+0x68>
 716:	00 00       	nop
 718:	f2 cf       	rjmp	.-28     	; 0x6fe <main+0x50>

Disassembly of section .text.oledSendStart:

000008c0 <oledSendStart>:

/********************************************************************************
 Local FUnctions for sending the command/data
 ********************************************************************************/

void oledSendStart(uint8_t address){
 8c0:	cf 93       	push	r28
 8c2:	c8 2f       	mov	r28, r24

    
    i2c_tx_start(MASTER_TRANSMITTER);
 8c4:	80 e0       	ldi	r24, 0x00	; 0
 8c6:	d0 df       	rcall	.-96     	; 0x868 <i2c_tx_start>
    i2c_tx_address(address);
 8c8:	8c 2f       	mov	r24, r28
 8ca:	8b df       	rcall	.-234    	; 0x7e2 <i2c_tx_address>
}
 8cc:	cf 91       	pop	r28
 8ce:	08 95       	ret

Disassembly of section .text.oledSendStop:

000008f8 <oledSendStop>:


void oledSendStop(void){

    i2c_tx_stop();
 8f8:	eb df       	rcall	.-42     	; 0x8d0 <i2c_tx_stop>
 8fa:	08 95       	ret

Disassembly of section .text.oledSendByte:

000008fc <oledSendByte>:


void oledSendByte(uint8_t ch){

    
    i2c_tx_byte(ch);
 8fc:	c7 df       	rcall	.-114    	; 0x88c <i2c_tx_byte>
 8fe:	08 95       	ret

Disassembly of section .text.oledSendCommand:

000008aa <oledSendCommand>:
    
}


void oledSendCommand(uint8_t cmd){
 8aa:	cf 93       	push	r28
 8ac:	c8 2f       	mov	r28, r24
    //oledSendStart(SSD1306_ADDRESS<<1);
    oledSendStart(SSD1306_ADDRESS);
 8ae:	8c e3       	ldi	r24, 0x3C	; 60
 8b0:	07 d0       	rcall	.+14     	; 0x8c0 <oledSendStart>
    oledSendByte(SSD1306_COMMAND);
 8b2:	80 e0       	ldi	r24, 0x00	; 0
 8b4:	23 d0       	rcall	.+70     	; 0x8fc <oledSendByte>
    oledSendByte(cmd);
 8b6:	8c 2f       	mov	r24, r28
 8b8:	21 d0       	rcall	.+66     	; 0x8fc <oledSendByte>
    oledSendStop();
 8ba:	1e d0       	rcall	.+60     	; 0x8f8 <oledSendStop>
}
 8bc:	cf 91       	pop	r28
 8be:	08 95       	ret

Disassembly of section .text.OLED_Clear:

00000784 <OLED_Clear>:
 * I/P Arguments: none.
 * Return value    : none
 * description  :This function clears the LCD and moves the cursor to beginning of first line
 ****************************************************************************************************/
void OLED_Clear()
{
 784:	cf 93       	push	r28
 786:	df 93       	push	r29
    int i;
    
    oledSendCommand(SSD1306_SET_COLUMN_ADDR);
 788:	81 e2       	ldi	r24, 0x21	; 33
 78a:	8f d0       	rcall	.+286    	; 0x8aa <oledSendCommand>
    oledSendCommand(0);
 78c:	80 e0       	ldi	r24, 0x00	; 0
 78e:	8d d0       	rcall	.+282    	; 0x8aa <oledSendCommand>
    oledSendCommand(127);
 790:	8f e7       	ldi	r24, 0x7F	; 127
 792:	8b d0       	rcall	.+278    	; 0x8aa <oledSendCommand>
    
    oledSendCommand(SSD1306_SET_PAGE_ADDR);
 794:	82 e2       	ldi	r24, 0x22	; 34
 796:	89 d0       	rcall	.+274    	; 0x8aa <oledSendCommand>
    oledSendCommand(0);
 798:	80 e0       	ldi	r24, 0x00	; 0
 79a:	87 d0       	rcall	.+270    	; 0x8aa <oledSendCommand>
    oledSendCommand(7);
 79c:	87 e0       	ldi	r24, 0x07	; 7
 79e:	85 d0       	rcall	.+266    	; 0x8aa <oledSendCommand>
    
    
    oledSendStart(SSD1306_ADDRESS);
 7a0:	8c e3       	ldi	r24, 0x3C	; 60
 7a2:	8e d0       	rcall	.+284    	; 0x8c0 <oledSendStart>
    oledSendByte(SSD1306_DATA_CONTINUE);
 7a4:	80 e4       	ldi	r24, 0x40	; 64
 7a6:	aa d0       	rcall	.+340    	; 0x8fc <oledSendByte>
    
    for (i=0; i<1024; i++)      // Write Zeros to clear the display
 7a8:	c0 e0       	ldi	r28, 0x00	; 0
 7aa:	d0 e0       	ldi	r29, 0x00	; 0
 7ac:	03 c0       	rjmp	.+6      	; 0x7b4 <OLED_Clear+0x30>
    {
        oledSendByte(0);
 7ae:	80 e0       	ldi	r24, 0x00	; 0
 7b0:	a5 d0       	rcall	.+330    	; 0x8fc <oledSendByte>
    
    
    oledSendStart(SSD1306_ADDRESS);
    oledSendByte(SSD1306_DATA_CONTINUE);
    
    for (i=0; i<1024; i++)      // Write Zeros to clear the display
 7b2:	21 96       	adiw	r28, 0x01	; 1
 7b4:	c1 15       	cp	r28, r1
 7b6:	84 e0       	ldi	r24, 0x04	; 4
 7b8:	d8 07       	cpc	r29, r24
 7ba:	cc f3       	brlt	.-14     	; 0x7ae <OLED_Clear+0x2a>
    {
        oledSendByte(0);
    }
    
    oledSendCommand(SSD1306_SET_COLUMN_ADDR);
 7bc:	81 e2       	ldi	r24, 0x21	; 33
 7be:	75 d0       	rcall	.+234    	; 0x8aa <oledSendCommand>
    oledSendCommand(0);
 7c0:	80 e0       	ldi	r24, 0x00	; 0
 7c2:	73 d0       	rcall	.+230    	; 0x8aa <oledSendCommand>
    oledSendCommand(127);
 7c4:	8f e7       	ldi	r24, 0x7F	; 127
 7c6:	71 d0       	rcall	.+226    	; 0x8aa <oledSendCommand>
    
    oledSendCommand(SSD1306_SET_PAGE_ADDR);
 7c8:	82 e2       	ldi	r24, 0x22	; 34
 7ca:	6f d0       	rcall	.+222    	; 0x8aa <oledSendCommand>
    oledSendCommand(0);
 7cc:	80 e0       	ldi	r24, 0x00	; 0
 7ce:	6d d0       	rcall	.+218    	; 0x8aa <oledSendCommand>
    oledSendCommand(7);
 7d0:	87 e0       	ldi	r24, 0x07	; 7
 7d2:	6b d0       	rcall	.+214    	; 0x8aa <oledSendCommand>
    
    oledSendStart(SSD1306_ADDRESS);
 7d4:	8c e3       	ldi	r24, 0x3C	; 60
 7d6:	74 d0       	rcall	.+232    	; 0x8c0 <oledSendStart>
    oledSendByte(SSD1306_DATA_CONTINUE);
 7d8:	80 e4       	ldi	r24, 0x40	; 64
 7da:	90 d0       	rcall	.+288    	; 0x8fc <oledSendByte>
}
 7dc:	df 91       	pop	r29
 7de:	cf 91       	pop	r28
 7e0:	08 95       	ret

Disassembly of section .text.OLED_Init:

0000071a <OLED_Init>:
 * description  :This function is used to initialize the OLED in the normal mode.
 After initializing the OLED, It clears the OLED and sets the cursor to first line first position. .
 **************************************************************************************************/
void OLED_Init(void)
{
    i2c_init();
 71a:	e8 d0       	rcall	.+464    	; 0x8ec <i2c_init>
    
    oledSendCommand(SSD1306_DISPLAY_OFF);
 71c:	8e ea       	ldi	r24, 0xAE	; 174
 71e:	c5 d0       	rcall	.+394    	; 0x8aa <oledSendCommand>
    oledSendCommand(SSD1306_SET_DISPLAY_CLOCK_DIV_RATIO);
 720:	85 ed       	ldi	r24, 0xD5	; 213
 722:	c3 d0       	rcall	.+390    	; 0x8aa <oledSendCommand>
    oledSendCommand(0x80);
 724:	80 e8       	ldi	r24, 0x80	; 128
 726:	c1 d0       	rcall	.+386    	; 0x8aa <oledSendCommand>
    oledSendCommand(SSD1306_SET_MULTIPLEX_RATIO);
 728:	88 ea       	ldi	r24, 0xA8	; 168
 72a:	bf d0       	rcall	.+382    	; 0x8aa <oledSendCommand>
    oledSendCommand(0x3F);
 72c:	8f e3       	ldi	r24, 0x3F	; 63
 72e:	bd d0       	rcall	.+378    	; 0x8aa <oledSendCommand>
    oledSendCommand(SSD1306_SET_DISPLAY_OFFSET);
 730:	83 ed       	ldi	r24, 0xD3	; 211
 732:	bb d0       	rcall	.+374    	; 0x8aa <oledSendCommand>
    oledSendCommand(0x0);
 734:	80 e0       	ldi	r24, 0x00	; 0
 736:	b9 d0       	rcall	.+370    	; 0x8aa <oledSendCommand>
    oledSendCommand(SSD1306_SET_START_LINE | 0x0);
 738:	80 e4       	ldi	r24, 0x40	; 64
 73a:	b7 d0       	rcall	.+366    	; 0x8aa <oledSendCommand>
    oledSendCommand(SSD1306_CHARGE_PUMP);
 73c:	8d e8       	ldi	r24, 0x8D	; 141
 73e:	b5 d0       	rcall	.+362    	; 0x8aa <oledSendCommand>
    oledSendCommand(0x14);
 740:	84 e1       	ldi	r24, 0x14	; 20
 742:	b3 d0       	rcall	.+358    	; 0x8aa <oledSendCommand>
    oledSendCommand(SSD1306_MEMORY_ADDR_MODE);
 744:	80 e2       	ldi	r24, 0x20	; 32
 746:	b1 d0       	rcall	.+354    	; 0x8aa <oledSendCommand>
    oledSendCommand(0x00);
 748:	80 e0       	ldi	r24, 0x00	; 0
 74a:	af d0       	rcall	.+350    	; 0x8aa <oledSendCommand>
    oledSendCommand(SSD1306_SET_SEGMENT_REMAP | 0x1);
 74c:	81 ea       	ldi	r24, 0xA1	; 161
 74e:	ad d0       	rcall	.+346    	; 0x8aa <oledSendCommand>
    oledSendCommand(SSD1306_COM_SCAN_DIR_DEC);
 750:	88 ec       	ldi	r24, 0xC8	; 200
 752:	ab d0       	rcall	.+342    	; 0x8aa <oledSendCommand>
    oledSendCommand(SSD1306_SET_COM_PINS);
 754:	8a ed       	ldi	r24, 0xDA	; 218
 756:	a9 d0       	rcall	.+338    	; 0x8aa <oledSendCommand>
    oledSendCommand(0x12);
 758:	82 e1       	ldi	r24, 0x12	; 18
 75a:	a7 d0       	rcall	.+334    	; 0x8aa <oledSendCommand>
    oledSendCommand(SSD1306_SET_CONTRAST_CONTROL);
 75c:	81 e8       	ldi	r24, 0x81	; 129
 75e:	a5 d0       	rcall	.+330    	; 0x8aa <oledSendCommand>
    oledSendCommand(0xCF);
 760:	8f ec       	ldi	r24, 0xCF	; 207
 762:	a3 d0       	rcall	.+326    	; 0x8aa <oledSendCommand>
    oledSendCommand(SSD1306_SET_PRECHARGE_PERIOD);
 764:	89 ed       	ldi	r24, 0xD9	; 217
 766:	a1 d0       	rcall	.+322    	; 0x8aa <oledSendCommand>
    oledSendCommand(0xF1);
 768:	81 ef       	ldi	r24, 0xF1	; 241
 76a:	9f d0       	rcall	.+318    	; 0x8aa <oledSendCommand>
    oledSendCommand(SSD1306_SET_VCOM_DESELECT);
 76c:	8b ed       	ldi	r24, 0xDB	; 219
 76e:	9d d0       	rcall	.+314    	; 0x8aa <oledSendCommand>
    oledSendCommand(0x40);
 770:	80 e4       	ldi	r24, 0x40	; 64
 772:	9b d0       	rcall	.+310    	; 0x8aa <oledSendCommand>
    oledSendCommand(SSD1306_DISPLAY_ALL_ON_RESUME);
 774:	84 ea       	ldi	r24, 0xA4	; 164
 776:	99 d0       	rcall	.+306    	; 0x8aa <oledSendCommand>
    oledSendCommand(SSD1306_NORMAL_DISPLAY);
 778:	86 ea       	ldi	r24, 0xA6	; 166
 77a:	97 d0       	rcall	.+302    	; 0x8aa <oledSendCommand>
    oledSendCommand(SSD1306_DISPLAY_ON);
 77c:	8f ea       	ldi	r24, 0xAF	; 175
 77e:	95 d0       	rcall	.+298    	; 0x8aa <oledSendCommand>
    
    OLED_Clear();  /* Clear the complete LCD during init */
 780:	01 d0       	rcall	.+2      	; 0x784 <OLED_Clear>
 782:	08 95       	ret

Disassembly of section .text.OLED_SetCursor:

0000082a <OLED_SetCursor>:
 * description  :This function moves the Cursor to specified position
 Note:If the Input(Line/Char number) are out of range
 then no action will be taken
 ****************************************************************************************************/
void OLED_SetCursor(uint8_t lineNumber,uint8_t cursorPosition)
{
 82a:	cf 93       	push	r28
 82c:	df 93       	push	r29
    /* Move the Cursor to specified position only if it is in range */
    if((lineNumber <= C_OledLastLine_U8) && (cursorPosition <= 127))
 82e:	88 30       	cpi	r24, 0x08	; 8
 830:	c0 f4       	brcc	.+48     	; 0x862 <OLED_SetCursor+0x38>
 832:	66 23       	and	r22, r22
 834:	b4 f0       	brlt	.+44     	; 0x862 <OLED_SetCursor+0x38>
 836:	d6 2f       	mov	r29, r22
 838:	c8 2f       	mov	r28, r24
    {
        OledLineNum=lineNumber;   /* Save the specified line number */
 83a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
        OledCursorPos=cursorPosition; /* Save the specified cursor position */
 83e:	60 93 61 00 	sts	0x0061, r22	; 0x800061 <OledCursorPos>
        
        oledSendCommand(SSD1306_SET_COLUMN_ADDR);
 842:	81 e2       	ldi	r24, 0x21	; 33
 844:	32 d0       	rcall	.+100    	; 0x8aa <oledSendCommand>
        oledSendCommand(cursorPosition);
 846:	8d 2f       	mov	r24, r29
 848:	30 d0       	rcall	.+96     	; 0x8aa <oledSendCommand>
        oledSendCommand(127);
 84a:	8f e7       	ldi	r24, 0x7F	; 127
 84c:	2e d0       	rcall	.+92     	; 0x8aa <oledSendCommand>
        
        oledSendCommand(SSD1306_SET_PAGE_ADDR);
 84e:	82 e2       	ldi	r24, 0x22	; 34
 850:	2c d0       	rcall	.+88     	; 0x8aa <oledSendCommand>
        oledSendCommand(lineNumber);
 852:	8c 2f       	mov	r24, r28
 854:	2a d0       	rcall	.+84     	; 0x8aa <oledSendCommand>
        oledSendCommand(7);
 856:	87 e0       	ldi	r24, 0x07	; 7
 858:	28 d0       	rcall	.+80     	; 0x8aa <oledSendCommand>
        
        oledSendStart(SSD1306_ADDRESS);
 85a:	8c e3       	ldi	r24, 0x3C	; 60
 85c:	31 d0       	rcall	.+98     	; 0x8c0 <oledSendStart>
        oledSendByte(SSD1306_DATA_CONTINUE);
 85e:	80 e4       	ldi	r24, 0x40	; 64
 860:	4d d0       	rcall	.+154    	; 0x8fc <oledSendByte>
    }
}
 862:	df 91       	pop	r29
 864:	cf 91       	pop	r28
 866:	08 95       	ret

Disassembly of section .text.OLED_WriteChar:

0000044a <OLED_WriteChar>:
    
    for ( i=0; i<1024; i++)      // Send data
    {
        oledSendByte(ptr_Logo[i]);
    }
}
 44a:	2f 92       	push	r2
 44c:	3f 92       	push	r3
 44e:	4f 92       	push	r4
 450:	5f 92       	push	r5
 452:	6f 92       	push	r6
 454:	7f 92       	push	r7
 456:	8f 92       	push	r8
 458:	9f 92       	push	r9
 45a:	af 92       	push	r10
 45c:	bf 92       	push	r11
 45e:	cf 92       	push	r12
 460:	df 92       	push	r13
 462:	ef 92       	push	r14
 464:	ff 92       	push	r15
 466:	0f 93       	push	r16
 468:	1f 93       	push	r17
 46a:	cf 93       	push	r28
 46c:	df 93       	push	r29
 46e:	00 d0       	rcall	.+0      	; 0x470 <__stack+0x11>
 470:	00 d0       	rcall	.+0      	; 0x472 <__stack+0x13>
 472:	00 d0       	rcall	.+0      	; 0x474 <__stack+0x15>
 474:	cd b7       	in	r28, 0x3d	; 61
 476:	de b7       	in	r29, 0x3e	; 62
 478:	34 2f       	mov	r19, r20
 47a:	49 83       	std	Y+1, r20	; 0x01
 47c:	5a 83       	std	Y+2, r21	; 0x02
 47e:	6b 83       	std	Y+3, r22	; 0x03
 480:	7c 83       	std	Y+4, r23	; 0x04
 482:	8d 83       	std	Y+5, r24	; 0x05
 484:	9e 83       	std	Y+6, r25	; 0x06
 486:	d2 2e       	mov	r13, r18
 488:	b0 2e       	mov	r11, r16
 48a:	9e 2c       	mov	r9, r14
 48c:	96 1a       	sub	r9, r22
 48e:	03 2f       	mov	r16, r19
 490:	10 e0       	ldi	r17, 0x00	; 0
 492:	45 2e       	mov	r4, r21
 494:	51 2c       	mov	r5, r1
 496:	04 9d       	mul	r16, r4
 498:	70 01       	movw	r14, r0
 49a:	05 9d       	mul	r16, r5
 49c:	f0 0c       	add	r15, r0
 49e:	14 9d       	mul	r17, r4
 4a0:	f0 0c       	add	r15, r0
 4a2:	11 24       	eor	r1, r1
 4a4:	8c e3       	ldi	r24, 0x3C	; 60
 4a6:	0c d2       	rcall	.+1048   	; 0x8c0 <oledSendStart>
 4a8:	80 e4       	ldi	r24, 0x40	; 64
 4aa:	28 d2       	rcall	.+1104   	; 0x8fc <oledSendByte>
 4ac:	21 2c       	mov	r2, r1
 4ae:	31 2c       	mov	r3, r1
 4b0:	40 c0       	rjmp	.+128    	; 0x532 <__stack+0xd3>
 4b2:	6d 2d       	mov	r22, r13
 4b4:	62 0d       	add	r22, r2
 4b6:	8b 2d       	mov	r24, r11
 4b8:	86 0d       	add	r24, r6
 4ba:	b7 d1       	rcall	.+878    	; 0x82a <OLED_SetCursor>
 4bc:	2c 81       	ldd	r18, Y+4	; 0x04
 4be:	3d 81       	ldd	r19, Y+5	; 0x05
 4c0:	4e 81       	ldd	r20, Y+6	; 0x06
 4c2:	9e 9c       	mul	r9, r14
 4c4:	c0 01       	movw	r24, r0
 4c6:	9f 9c       	mul	r9, r15
 4c8:	90 0d       	add	r25, r0
 4ca:	11 24       	eor	r1, r1
 4cc:	24 9c       	mul	r2, r4
 4ce:	b0 01       	movw	r22, r0
 4d0:	25 9c       	mul	r2, r5
 4d2:	70 0d       	add	r23, r0
 4d4:	34 9c       	mul	r3, r4
 4d6:	70 0d       	add	r23, r0
 4d8:	11 24       	eor	r1, r1
 4da:	86 0f       	add	r24, r22
 4dc:	97 1f       	adc	r25, r23
 4de:	86 0d       	add	r24, r6
 4e0:	97 1d       	adc	r25, r7
 4e2:	28 0f       	add	r18, r24
 4e4:	39 1f       	adc	r19, r25
 4e6:	41 1d       	adc	r20, r1
 4e8:	97 fd       	sbrc	r25, 7
 4ea:	4a 95       	dec	r20
 4ec:	f9 01       	movw	r30, r18
 4ee:	84 91       	lpm	r24, Z
 4f0:	47 fd       	sbrc	r20, 7
 4f2:	80 81       	ld	r24, Z
 4f4:	aa 20       	and	r10, r10
 4f6:	59 f0       	breq	.+22     	; 0x50e <__stack+0xaf>
 4f8:	92 01       	movw	r18, r4
 4fa:	21 50       	subi	r18, 0x01	; 1
 4fc:	31 09       	sbc	r19, r1
 4fe:	62 16       	cp	r6, r18
 500:	73 06       	cpc	r7, r19
 502:	29 f4       	brne	.+10     	; 0x50e <__stack+0xaf>
 504:	88 20       	and	r8, r8
 506:	11 f0       	breq	.+4      	; 0x50c <__stack+0xad>
 508:	80 6c       	ori	r24, 0xC0	; 192
 50a:	01 c0       	rjmp	.+2      	; 0x50e <__stack+0xaf>
 50c:	80 68       	ori	r24, 0x80	; 128
 50e:	cc 20       	and	r12, r12
 510:	19 f0       	breq	.+6      	; 0x518 <__stack+0xb9>
 512:	80 95       	com	r24
 514:	f3 d1       	rcall	.+998    	; 0x8fc <oledSendByte>
 516:	01 c0       	rjmp	.+2      	; 0x51a <__stack+0xbb>
 518:	f1 d1       	rcall	.+994    	; 0x8fc <oledSendByte>
 51a:	8f ef       	ldi	r24, 0xFF	; 255
 51c:	68 1a       	sub	r6, r24
 51e:	78 0a       	sbc	r7, r24
 520:	02 c0       	rjmp	.+4      	; 0x526 <__stack+0xc7>
 522:	61 2c       	mov	r6, r1
 524:	71 2c       	mov	r7, r1
 526:	64 14       	cp	r6, r4
 528:	75 04       	cpc	r7, r5
 52a:	1c f2       	brlt	.-122    	; 0x4b2 <__stack+0x53>
 52c:	8f ef       	ldi	r24, 0xFF	; 255
 52e:	28 1a       	sub	r2, r24
 530:	38 0a       	sbc	r3, r24
 532:	20 16       	cp	r2, r16
 534:	31 06       	cpc	r3, r17
 536:	ac f3       	brlt	.-22     	; 0x522 <__stack+0xc3>
 538:	26 96       	adiw	r28, 0x06	; 6
 53a:	0f b6       	in	r0, 0x3f	; 63
 53c:	f8 94       	cli
 53e:	de bf       	out	0x3e, r29	; 62
 540:	0f be       	out	0x3f, r0	; 63
 542:	cd bf       	out	0x3d, r28	; 61
 544:	df 91       	pop	r29
 546:	cf 91       	pop	r28
 548:	1f 91       	pop	r17
 54a:	0f 91       	pop	r16
 54c:	ff 90       	pop	r15
 54e:	ef 90       	pop	r14
 550:	df 90       	pop	r13
 552:	cf 90       	pop	r12
 554:	bf 90       	pop	r11
 556:	af 90       	pop	r10
 558:	9f 90       	pop	r9
 55a:	8f 90       	pop	r8
 55c:	7f 90       	pop	r7
 55e:	6f 90       	pop	r6
 560:	5f 90       	pop	r5
 562:	4f 90       	pop	r4
 564:	3f 90       	pop	r3
 566:	2f 90       	pop	r2
 568:	08 95       	ret

Disassembly of section .text.OLED_WriteTwoDigitNumber:

0000056a <OLED_WriteTwoDigitNumber>:
 56a:	8f 92       	push	r8
 56c:	9f 92       	push	r9
 56e:	af 92       	push	r10
 570:	bf 92       	push	r11
 572:	cf 92       	push	r12
 574:	df 92       	push	r13
 576:	ef 92       	push	r14
 578:	ff 92       	push	r15
 57a:	0f 93       	push	r16
 57c:	1f 93       	push	r17
 57e:	cf 93       	push	r28
 580:	df 93       	push	r29
 582:	00 d0       	rcall	.+0      	; 0x584 <OLED_WriteTwoDigitNumber+0x1a>
 584:	00 d0       	rcall	.+0      	; 0x586 <OLED_WriteTwoDigitNumber+0x1c>
 586:	00 d0       	rcall	.+0      	; 0x588 <OLED_WriteTwoDigitNumber+0x1e>
 588:	cd b7       	in	r28, 0x3d	; 61
 58a:	de b7       	in	r29, 0x3e	; 62
 58c:	49 83       	std	Y+1, r20	; 0x01
 58e:	5a 83       	std	Y+2, r21	; 0x02
 590:	6b 83       	std	Y+3, r22	; 0x03
 592:	7c 83       	std	Y+4, r23	; 0x04
 594:	8d 83       	std	Y+5, r24	; 0x05
 596:	9e 83       	std	Y+6, r25	; 0x06
 598:	b2 2e       	mov	r11, r18
 59a:	9e 2c       	mov	r9, r14
 59c:	da 2c       	mov	r13, r10
 59e:	a8 2c       	mov	r10, r8
 5a0:	1d ec       	ldi	r17, 0xCD	; 205
 5a2:	e1 9e       	mul	r14, r17
 5a4:	11 2d       	mov	r17, r1
 5a6:	11 24       	eor	r1, r1
 5a8:	16 95       	lsr	r17
 5aa:	16 95       	lsr	r17
 5ac:	16 95       	lsr	r17
 5ae:	0f 2e       	mov	r0, r31
 5b0:	f0 e3       	ldi	r31, 0x30	; 48
 5b2:	ef 2e       	mov	r14, r31
 5b4:	f0 2d       	mov	r31, r0
 5b6:	e1 0e       	add	r14, r17
 5b8:	8e 88       	ldd	r8, Y+22	; 0x16
 5ba:	47 df       	rcall	.-370    	; 0x44a <OLED_WriteChar>
 5bc:	49 81       	ldd	r20, Y+1	; 0x01
 5be:	11 0f       	add	r17, r17
 5c0:	81 2f       	mov	r24, r17
 5c2:	88 0f       	add	r24, r24
 5c4:	88 0f       	add	r24, r24
 5c6:	18 0f       	add	r17, r24
 5c8:	89 2d       	mov	r24, r9
 5ca:	81 1b       	sub	r24, r17
 5cc:	0f 2e       	mov	r0, r31
 5ce:	f0 e3       	ldi	r31, 0x30	; 48
 5d0:	ef 2e       	mov	r14, r31
 5d2:	f0 2d       	mov	r31, r0
 5d4:	e8 0e       	add	r14, r24
 5d6:	2b 2d       	mov	r18, r11
 5d8:	24 0f       	add	r18, r20
 5da:	8e 88       	ldd	r8, Y+22	; 0x16
 5dc:	ad 88       	ldd	r10, Y+21	; 0x15
 5de:	cd 2c       	mov	r12, r13
 5e0:	5a 81       	ldd	r21, Y+2	; 0x02
 5e2:	6b 81       	ldd	r22, Y+3	; 0x03
 5e4:	7c 81       	ldd	r23, Y+4	; 0x04
 5e6:	8d 81       	ldd	r24, Y+5	; 0x05
 5e8:	9e 81       	ldd	r25, Y+6	; 0x06
 5ea:	2f df       	rcall	.-418    	; 0x44a <OLED_WriteChar>
 5ec:	26 96       	adiw	r28, 0x06	; 6
 5ee:	0f b6       	in	r0, 0x3f	; 63
 5f0:	f8 94       	cli
 5f2:	de bf       	out	0x3e, r29	; 62
 5f4:	0f be       	out	0x3f, r0	; 63
 5f6:	cd bf       	out	0x3d, r28	; 61
 5f8:	df 91       	pop	r29
 5fa:	cf 91       	pop	r28
 5fc:	1f 91       	pop	r17
 5fe:	0f 91       	pop	r16
 600:	ff 90       	pop	r15
 602:	ef 90       	pop	r14
 604:	df 90       	pop	r13
 606:	cf 90       	pop	r12
 608:	bf 90       	pop	r11
 60a:	af 90       	pop	r10
 60c:	9f 90       	pop	r9
 60e:	8f 90       	pop	r8
 610:	08 95       	ret

Disassembly of section .text.OLED_DrawBitmapRLE:

00000612 <OLED_DrawBitmapRLE>:
#endif

void OLED_DrawBitmapRLE(unsigned char Xpos, unsigned char Ypos, const unsigned char *CompressedBitmap, unsigned int RleLength)
{
 612:	4f 92       	push	r4
 614:	5f 92       	push	r5
 616:	6f 92       	push	r6
 618:	8f 92       	push	r8
 61a:	9f 92       	push	r9
 61c:	af 92       	push	r10
 61e:	bf 92       	push	r11
 620:	cf 92       	push	r12
 622:	df 92       	push	r13
 624:	ef 92       	push	r14
 626:	0f 93       	push	r16
 628:	1f 93       	push	r17
 62a:	cf 93       	push	r28
 62c:	df 93       	push	r29
 62e:	69 01       	movw	r12, r18
 630:	e4 2e       	mov	r14, r20
 632:	48 01       	movw	r8, r16
	unsigned char NumOfRawsInBitmap, NumOfBytes,ByteValue;
	
	//	(Hight%8 == 0) ? NumOfRawsInBitmap = Hight/8 : NumOfRawsInBitmap = Hight/8+1;
	
   OLED_SetCursor(0,0);
 634:	60 e0       	ldi	r22, 0x00	; 0
 636:	80 e0       	ldi	r24, 0x00	; 0
 638:	f8 d0       	rcall	.+496    	; 0x82a <OLED_SetCursor>
   
   oledSendStart(SSD1306_ADDRESS);
 63a:	8c e3       	ldi	r24, 0x3C	; 60
 63c:	41 d1       	rcall	.+642    	; 0x8c0 <oledSendStart>
   oledSendByte(SSD1306_DATA_CONTINUE);
 63e:	80 e4       	ldi	r24, 0x40	; 64
 640:	5d d1       	rcall	.+698    	; 0x8fc <oledSendByte>
   
   	for (unsigned int i=0; i< RleLength/2; i++)
 642:	a1 2c       	mov	r10, r1
 644:	b1 2c       	mov	r11, r1
 646:	1e c0       	rjmp	.+60     	; 0x684 <OLED_DrawBitmapRLE+0x72>
	{
		NumOfBytes = *CompressedBitmap++;
 648:	f6 01       	movw	r30, r12
 64a:	d4 91       	lpm	r29, Z
 64c:	e7 fc       	sbrc	r14, 7
 64e:	d0 81       	ld	r29, Z
		ByteValue = *CompressedBitmap++;
 650:	26 01       	movw	r4, r12
 652:	6e 2c       	mov	r6, r14
 654:	82 e0       	ldi	r24, 0x02	; 2
 656:	48 0e       	add	r4, r24
 658:	51 1c       	adc	r5, r1
 65a:	61 1c       	adc	r6, r1
 65c:	8f ef       	ldi	r24, 0xFF	; 255
 65e:	c8 1a       	sub	r12, r24
 660:	d8 0a       	sbc	r13, r24
 662:	e8 0a       	sbc	r14, r24
 664:	f6 01       	movw	r30, r12
 666:	14 91       	lpm	r17, Z
 668:	e7 fc       	sbrc	r14, 7
 66a:	10 81       	ld	r17, Z
		
		for (unsigned char x=0; x < NumOfBytes; x++)
 66c:	c0 e0       	ldi	r28, 0x00	; 0
 66e:	03 c0       	rjmp	.+6      	; 0x676 <OLED_DrawBitmapRLE+0x64>
		oledSendByte (ByteValue);
 670:	81 2f       	mov	r24, r17
 672:	44 d1       	rcall	.+648    	; 0x8fc <oledSendByte>
   	for (unsigned int i=0; i< RleLength/2; i++)
	{
		NumOfBytes = *CompressedBitmap++;
		ByteValue = *CompressedBitmap++;
		
		for (unsigned char x=0; x < NumOfBytes; x++)
 674:	cf 5f       	subi	r28, 0xFF	; 255
 676:	cd 17       	cp	r28, r29
 678:	d8 f3       	brcs	.-10     	; 0x670 <OLED_DrawBitmapRLE+0x5e>
   OLED_SetCursor(0,0);
   
   oledSendStart(SSD1306_ADDRESS);
   oledSendByte(SSD1306_DATA_CONTINUE);
   
   	for (unsigned int i=0; i< RleLength/2; i++)
 67a:	8f ef       	ldi	r24, 0xFF	; 255
 67c:	a8 1a       	sub	r10, r24
 67e:	b8 0a       	sbc	r11, r24
	{
		NumOfBytes = *CompressedBitmap++;
		ByteValue = *CompressedBitmap++;
 680:	e6 2c       	mov	r14, r6
 682:	62 01       	movw	r12, r4
   OLED_SetCursor(0,0);
   
   oledSendStart(SSD1306_ADDRESS);
   oledSendByte(SSD1306_DATA_CONTINUE);
   
   	for (unsigned int i=0; i< RleLength/2; i++)
 684:	c4 01       	movw	r24, r8
 686:	96 95       	lsr	r25
 688:	87 95       	ror	r24
 68a:	a8 16       	cp	r10, r24
 68c:	b9 06       	cpc	r11, r25
 68e:	e0 f2       	brcs	.-72     	; 0x648 <OLED_DrawBitmapRLE+0x36>
		
		for (unsigned char x=0; x < NumOfBytes; x++)
		oledSendByte (ByteValue);
	}
	
}
 690:	df 91       	pop	r29
 692:	cf 91       	pop	r28
 694:	1f 91       	pop	r17
 696:	0f 91       	pop	r16
 698:	ef 90       	pop	r14
 69a:	df 90       	pop	r13
 69c:	cf 90       	pop	r12
 69e:	bf 90       	pop	r11
 6a0:	af 90       	pop	r10
 6a2:	9f 90       	pop	r9
 6a4:	8f 90       	pop	r8
 6a6:	6f 90       	pop	r6
 6a8:	5f 90       	pop	r5
 6aa:	4f 90       	pop	r4
 6ac:	08 95       	ret

Disassembly of section .text.__dummy_fini:

00000902 <_fini>:
 902:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00000904 <__funcs_on_exit>:
 904:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00000906 <__simulator_exit>:
 906:	08 95       	ret

Disassembly of section .text.exit:

000008de <exit>:
 8de:	ec 01       	movw	r28, r24
 8e0:	11 d0       	rcall	.+34     	; 0x904 <__funcs_on_exit>
 8e2:	0f d0       	rcall	.+30     	; 0x902 <_fini>
 8e4:	ce 01       	movw	r24, r28
 8e6:	0f d0       	rcall	.+30     	; 0x906 <__simulator_exit>
 8e8:	ce 01       	movw	r24, r28
 8ea:	0e d0       	rcall	.+28     	; 0x908 <_Exit>

Disassembly of section .text._Exit:

00000908 <_Exit>:
 908:	bd db       	rcall	.-2182   	; 0x84 <_exit>
