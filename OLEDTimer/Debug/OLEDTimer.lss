
OLEDTimer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000088  00000000  00000000  00000134  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000088  000003f2  2**0
                  ALLOC
  2 .bss          000000a9  00800060  00800060  00000c98  2**0
                  ALLOC
  3 .comment      0000002f  00000000  00000000  00000c98  2**0
                  CONTENTS, READONLY
  4 .stack.descriptors.hdr 0000000e  00000000  00000000  00000cc7  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000130  00000000  00000000  00000cd5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000021e5  00000000  00000000  00000e05  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008ab  00000000  00000000  00002fea  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000be3  00000000  00000000  00003895  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003a0  00000000  00000000  00004478  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000027e  00000000  00000000  00004818  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f8f  00000000  00000000  00004a96  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000130  00000000  00000000  00005a25  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .text         00000002  00000b54  00000b54  00000c88  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00005b58  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .text.i2c_init 0000000c  00000b40  00000b40  00000c74  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.i2c_tx_start 00000024  00000aa0  00000aa0  00000bd4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.i2c_tx_address 00000048  000009f0  000009f0  00000b24  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.i2c_tx_byte 0000001e  00000ac4  00000ac4  00000bf8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.i2c_tx_stop 0000000e  00000b24  00000b24  00000c58  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .bss.masterMode 00000001  0080010f  0080010f  00000c98  2**0
                  ALLOC
 21 .text.TimerFinished 0000002a  00000a76  00000a76  00000baa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.PlayBuzzer 0000006c  000008bc  000008bc  000009f0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.WaitForStartButton 0000001c  00000ae2  00000ae2  00000c16  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.main    0000016c  000004ec  000004ec  00000620  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .progmemx.data.Big_Tooth 000000c2  00000429  00000429  0000055d  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 26 .data.SevenSegments_struc 00000006  00800109  00000b5e  00000c92  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 27 .progmemx.data.SevenSegments11x19 0000016b  000002be  000002be  000003f2  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 28 .progmemx.data.CathClockMainScreenRLE 00000236  00000088  00000088  000001bc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 29 .text.oledSendStart 00000010  00000b14  00000b14  00000c48  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.oledSendStop 00000004  00000b4c  00000b4c  00000c80  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.oledSendByte 00000004  00000b50  00000b50  00000c84  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.oledSendCommand 00000016  00000afe  00000afe  00000c32  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text.OLED_Clear 0000005e  00000992  00000992  00000ac6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text.OLED_Init 0000006a  00000928  00000928  00000a5c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text.OLED_SetCursor 0000003e  00000a38  00000a38  00000b6c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .text.OLED_WriteChar 00000120  00000658  00000658  0000078c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .text.OLED_WriteTwoDigitNumber 000000a8  00000778  00000778  000008ac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 38 .text.OLED_DrawBitmapRLE 0000009c  00000820  00000820  00000954  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 .text.__dummy_fini 00000002  00000b56  00000b56  00000c8a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 40 .text.__dummy_funcs_on_exit 00000002  00000b58  00000b58  00000c8c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 41 .text.__dummy_simulator_exit 00000002  00000b5a  00000b5a  00000c8e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 42 .text.exit    0000000e  00000b32  00000b32  00000c66  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 43 .text._Exit   00000002  00000b5c  00000b5c  00000c90  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	1b c0       	rjmp	.+54     	; 0x38 <__ctors_end>
   2:	a8 c5       	rjmp	.+2896   	; 0xb54 <__bad_interrupt>
   4:	a7 c5       	rjmp	.+2894   	; 0xb54 <__bad_interrupt>
   6:	a6 c5       	rjmp	.+2892   	; 0xb54 <__bad_interrupt>
   8:	a5 c5       	rjmp	.+2890   	; 0xb54 <__bad_interrupt>
   a:	a4 c5       	rjmp	.+2888   	; 0xb54 <__bad_interrupt>
   c:	a3 c5       	rjmp	.+2886   	; 0xb54 <__bad_interrupt>
   e:	a2 c5       	rjmp	.+2884   	; 0xb54 <__bad_interrupt>
  10:	a1 c5       	rjmp	.+2882   	; 0xb54 <__bad_interrupt>
  12:	a0 c5       	rjmp	.+2880   	; 0xb54 <__bad_interrupt>
  14:	9f c5       	rjmp	.+2878   	; 0xb54 <__bad_interrupt>
  16:	9e c5       	rjmp	.+2876   	; 0xb54 <__bad_interrupt>
  18:	9d c5       	rjmp	.+2874   	; 0xb54 <__bad_interrupt>
  1a:	9c c5       	rjmp	.+2872   	; 0xb54 <__bad_interrupt>
  1c:	9b c5       	rjmp	.+2870   	; 0xb54 <__bad_interrupt>
  1e:	9a c5       	rjmp	.+2868   	; 0xb54 <__bad_interrupt>
  20:	99 c5       	rjmp	.+2866   	; 0xb54 <__bad_interrupt>
  22:	98 c5       	rjmp	.+2864   	; 0xb54 <__bad_interrupt>
  24:	97 c5       	rjmp	.+2862   	; 0xb54 <__bad_interrupt>

00000026 <.dinit>:
  26:	00 60       	ori	r16, 0x00	; 0
  28:	01 09       	sbc	r16, r1
  2a:	80 01       	movw	r16, r0
  2c:	09 01       	movw	r0, r18
  2e:	0f 00       	.word	0x000f	; ????
  30:	0b 5e       	subi	r16, 0xEB	; 235
  32:	01 0f       	add	r16, r17
  34:	01 10       	cpse	r0, r1
  36:	80 00       	.word	0x0080	; ????

00000038 <__ctors_end>:
  38:	11 24       	eor	r1, r1
  3a:	1f be       	out	0x3f, r1	; 63
  3c:	cf e5       	ldi	r28, 0x5F	; 95
  3e:	d4 e0       	ldi	r29, 0x04	; 4
  40:	de bf       	out	0x3e, r29	; 62
  42:	cd bf       	out	0x3d, r28	; 61

00000044 <__do_copy_data>:
  44:	e6 e2       	ldi	r30, 0x26	; 38
  46:	f0 e0       	ldi	r31, 0x00	; 0
  48:	40 e0       	ldi	r20, 0x00	; 0
  4a:	17 c0       	rjmp	.+46     	; 0x7a <__do_clear_bss+0x8>
  4c:	b5 91       	lpm	r27, Z+
  4e:	a5 91       	lpm	r26, Z+
  50:	35 91       	lpm	r19, Z+
  52:	25 91       	lpm	r18, Z+
  54:	05 91       	lpm	r16, Z+
  56:	07 fd       	sbrc	r16, 7
  58:	0c c0       	rjmp	.+24     	; 0x72 <__do_clear_bss>
  5a:	95 91       	lpm	r25, Z+
  5c:	85 91       	lpm	r24, Z+
  5e:	ef 01       	movw	r28, r30
  60:	f9 2f       	mov	r31, r25
  62:	e8 2f       	mov	r30, r24
  64:	05 90       	lpm	r0, Z+
  66:	0d 92       	st	X+, r0
  68:	a2 17       	cp	r26, r18
  6a:	b3 07       	cpc	r27, r19
  6c:	d9 f7       	brne	.-10     	; 0x64 <__do_copy_data+0x20>
  6e:	fe 01       	movw	r30, r28
  70:	04 c0       	rjmp	.+8      	; 0x7a <__do_clear_bss+0x8>

00000072 <__do_clear_bss>:
  72:	1d 92       	st	X+, r1
  74:	a2 17       	cp	r26, r18
  76:	b3 07       	cpc	r27, r19
  78:	e1 f7       	brne	.-8      	; 0x72 <__do_clear_bss>
  7a:	e7 33       	cpi	r30, 0x37	; 55
  7c:	f4 07       	cpc	r31, r20
  7e:	31 f7       	brne	.-52     	; 0x4c <__do_copy_data+0x8>
  80:	35 d2       	rcall	.+1130   	; 0x4ec <main>
  82:	57 c5       	rjmp	.+2734   	; 0xb32 <exit>

00000084 <_exit>:
  84:	f8 94       	cli

00000086 <__stop_program>:
  86:	ff cf       	rjmp	.-2      	; 0x86 <__stop_program>

Disassembly of section .text:

00000b54 <__bad_interrupt>:
 b54:	55 ca       	rjmp	.-2902   	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.i2c_init:

00000b40 <i2c_init>:

static bool masterMode;

void i2c_init(void)
{
    TWSR &= ~((1 << TWPS1) | (1 << TWPS0)); // pre-scalar 1
 b40:	81 b1       	in	r24, 0x01	; 1
 b42:	8c 7f       	andi	r24, 0xFC	; 252
 b44:	81 b9       	out	0x01, r24	; 1
    TWBR = 2; // I've changed it to 400k.. for fast disply... it was very slow display in 100k //((F_CPU / F_I2C) - 16) / 2; // baud rate factor 12
 b46:	82 e0       	ldi	r24, 0x02	; 2
 b48:	80 b9       	out	0x00, r24	; 0
 b4a:	08 95       	ret

Disassembly of section .text.i2c_tx_start:

00000aa0 <i2c_tx_start>:
    } else {
        status = TRANSMISSION_ERROR;
    }

    return status;
}
 aa0:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <masterMode>
 aa4:	86 b7       	in	r24, 0x36	; 54
 aa6:	84 6a       	ori	r24, 0xA4	; 164
 aa8:	86 bf       	out	0x36, r24	; 54
 aaa:	06 b6       	in	r0, 0x36	; 54
 aac:	07 fe       	sbrs	r0, 7
 aae:	fd cf       	rjmp	.-6      	; 0xaaa <i2c_tx_start+0xa>
 ab0:	81 b1       	in	r24, 0x01	; 1
 ab2:	88 7f       	andi	r24, 0xF8	; 248
 ab4:	88 30       	cpi	r24, 0x08	; 8
 ab6:	11 f0       	breq	.+4      	; 0xabc <i2c_tx_start+0x1c>
 ab8:	80 31       	cpi	r24, 0x10	; 16
 aba:	11 f4       	brne	.+4      	; 0xac0 <i2c_tx_start+0x20>
 abc:	8f ef       	ldi	r24, 0xFF	; 255
 abe:	08 95       	ret
 ac0:	8e ef       	ldi	r24, 0xFE	; 254
 ac2:	08 95       	ret

Disassembly of section .text.i2c_tx_address:

000009f0 <i2c_tx_address>:
 9f0:	90 e0       	ldi	r25, 0x00	; 0
 9f2:	88 0f       	add	r24, r24
 9f4:	99 1f       	adc	r25, r25
 9f6:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <masterMode>
 9fa:	89 2b       	or	r24, r25
 9fc:	83 b9       	out	0x03, r24	; 3
 9fe:	84 e8       	ldi	r24, 0x84	; 132
 a00:	86 bf       	out	0x36, r24	; 54
 a02:	06 b6       	in	r0, 0x36	; 54
 a04:	07 fe       	sbrs	r0, 7
 a06:	fd cf       	rjmp	.-6      	; 0xa02 <i2c_tx_address+0x12>
 a08:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <masterMode>
 a0c:	81 11       	cpse	r24, r1
 a0e:	06 c0       	rjmp	.+12     	; 0xa1c <i2c_tx_address+0x2c>
 a10:	81 b1       	in	r24, 0x01	; 1
 a12:	88 7f       	andi	r24, 0xF8	; 248
 a14:	88 31       	cpi	r24, 0x18	; 24
 a16:	51 f4       	brne	.+20     	; 0xa2c <i2c_tx_address+0x3c>
 a18:	8f ef       	ldi	r24, 0xFF	; 255
 a1a:	08 95       	ret
 a1c:	81 30       	cpi	r24, 0x01	; 1
 a1e:	41 f4       	brne	.+16     	; 0xa30 <i2c_tx_address+0x40>
 a20:	81 b1       	in	r24, 0x01	; 1
 a22:	88 7f       	andi	r24, 0xF8	; 248
 a24:	80 34       	cpi	r24, 0x40	; 64
 a26:	31 f4       	brne	.+12     	; 0xa34 <i2c_tx_address+0x44>
 a28:	8f ef       	ldi	r24, 0xFF	; 255
 a2a:	08 95       	ret
 a2c:	8e ef       	ldi	r24, 0xFE	; 254
 a2e:	08 95       	ret
 a30:	80 e0       	ldi	r24, 0x00	; 0
 a32:	08 95       	ret
 a34:	8e ef       	ldi	r24, 0xFE	; 254
 a36:	08 95       	ret

Disassembly of section .text.i2c_tx_byte:

00000ac4 <i2c_tx_byte>:
 ac4:	83 b9       	out	0x03, r24	; 3
 ac6:	86 b7       	in	r24, 0x36	; 54
 ac8:	80 68       	ori	r24, 0x80	; 128
 aca:	86 bf       	out	0x36, r24	; 54
 acc:	06 b6       	in	r0, 0x36	; 54
 ace:	07 fe       	sbrs	r0, 7
 ad0:	fd cf       	rjmp	.-6      	; 0xacc <i2c_tx_byte+0x8>
 ad2:	81 b1       	in	r24, 0x01	; 1
 ad4:	88 7f       	andi	r24, 0xF8	; 248
 ad6:	88 32       	cpi	r24, 0x28	; 40
 ad8:	11 f4       	brne	.+4      	; 0xade <i2c_tx_byte+0x1a>
 ada:	8f ef       	ldi	r24, 0xFF	; 255
 adc:	08 95       	ret
 ade:	8e ef       	ldi	r24, 0xFE	; 254
 ae0:	08 95       	ret

Disassembly of section .text.i2c_tx_stop:

00000b24 <i2c_tx_stop>:

void i2c_tx_stop(void)
{
    /* clear interrupt flag, issue stop command (cleared automatically) */
    TWCR |= (1 << TWINT) | (1 << TWSTO);
 b24:	86 b7       	in	r24, 0x36	; 54
 b26:	80 69       	ori	r24, 0x90	; 144
 b28:	86 bf       	out	0x36, r24	; 54

    while ((TWCR & (1 << TWSTO))); // wait until stop transmitted
 b2a:	06 b6       	in	r0, 0x36	; 54
 b2c:	04 fc       	sbrc	r0, 4
 b2e:	fd cf       	rjmp	.-6      	; 0xb2a <i2c_tx_stop+0x6>
}
 b30:	08 95       	ret

Disassembly of section .text.TimerFinished:

00000a76 <TimerFinished>:
    //TODO:: Please write your application code 

}

void TimerFinished ()
{
 a76:	0f 93       	push	r16
 a78:	1f 93       	push	r17
	OLED_SetCursor(0,0);
 a7a:	60 e0       	ldi	r22, 0x00	; 0
 a7c:	80 e0       	ldi	r24, 0x00	; 0
 a7e:	dc df       	rcall	.-72     	; 0xa38 <OLED_SetCursor>
	OLED_DrawBitmapRLE(0,0,Big_Tooth,194);
 a80:	02 ec       	ldi	r16, 0xC2	; 194
 a82:	10 e0       	ldi	r17, 0x00	; 0
 a84:	29 e2       	ldi	r18, 0x29	; 41
 a86:	34 e0       	ldi	r19, 0x04	; 4
 a88:	40 e0       	ldi	r20, 0x00	; 0
 a8a:	60 e0       	ldi	r22, 0x00	; 0
 a8c:	80 e0       	ldi	r24, 0x00	; 0
 a8e:	c8 de       	rcall	.-624    	; 0x820 <OLED_DrawBitmapRLE>
	Minuts = 2;
 a90:	82 e0       	ldi	r24, 0x02	; 2
 a92:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	Seconds = 0;		
 a96:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <Seconds>
}
 a9a:	1f 91       	pop	r17
 a9c:	0f 91       	pop	r16
 a9e:	08 95       	ret

Disassembly of section .text.PlayBuzzer:

000008bc <PlayBuzzer>:


void PlayBuzzer (char event)
{
	switch (event)
 8bc:	88 23       	and	r24, r24
 8be:	19 f0       	breq	.+6      	; 0x8c6 <PlayBuzzer+0xa>
 8c0:	81 30       	cpi	r24, 0x01	; 1
 8c2:	61 f1       	breq	.+88     	; 0x91c <PlayBuzzer+0x60>
 8c4:	08 95       	ret
	{
		case 0:
			PORTD |= 0x02;
 8c6:	82 b3       	in	r24, 0x12	; 18
 8c8:	82 60       	ori	r24, 0x02	; 2
 8ca:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 8cc:	2f ef       	ldi	r18, 0xFF	; 255
 8ce:	40 e7       	ldi	r20, 0x70	; 112
 8d0:	82 e0       	ldi	r24, 0x02	; 2
 8d2:	21 50       	subi	r18, 0x01	; 1
 8d4:	40 40       	sbci	r20, 0x00	; 0
 8d6:	80 40       	sbci	r24, 0x00	; 0
 8d8:	e1 f7       	brne	.-8      	; 0x8d2 <PlayBuzzer+0x16>
 8da:	00 c0       	rjmp	.+0      	; 0x8dc <PlayBuzzer+0x20>
 8dc:	00 00       	nop
			_delay_ms(100);
			PORTD &= ~0x02;
 8de:	82 b3       	in	r24, 0x12	; 18
 8e0:	8d 7f       	andi	r24, 0xFD	; 253
 8e2:	82 bb       	out	0x12, r24	; 18
		break;
 8e4:	08 95       	ret
		case 1:
			for (int i=0; i < 5; i++)
			{
				PORTD |= 0x02;
 8e6:	82 b3       	in	r24, 0x12	; 18
 8e8:	82 60       	ori	r24, 0x02	; 2
 8ea:	82 bb       	out	0x12, r24	; 18
 8ec:	9f ef       	ldi	r25, 0xFF	; 255
 8ee:	41 ee       	ldi	r20, 0xE1	; 225
 8f0:	84 e0       	ldi	r24, 0x04	; 4
 8f2:	91 50       	subi	r25, 0x01	; 1
 8f4:	40 40       	sbci	r20, 0x00	; 0
 8f6:	80 40       	sbci	r24, 0x00	; 0
 8f8:	e1 f7       	brne	.-8      	; 0x8f2 <PlayBuzzer+0x36>
 8fa:	00 c0       	rjmp	.+0      	; 0x8fc <PlayBuzzer+0x40>
 8fc:	00 00       	nop
				_delay_ms(FINISH_BUZ_TIME);
				PORTD &= ~0x02;
 8fe:	82 b3       	in	r24, 0x12	; 18
 900:	8d 7f       	andi	r24, 0xFD	; 253
 902:	82 bb       	out	0x12, r24	; 18
 904:	9f ef       	ldi	r25, 0xFF	; 255
 906:	41 ee       	ldi	r20, 0xE1	; 225
 908:	84 e0       	ldi	r24, 0x04	; 4
 90a:	91 50       	subi	r25, 0x01	; 1
 90c:	40 40       	sbci	r20, 0x00	; 0
 90e:	80 40       	sbci	r24, 0x00	; 0
 910:	e1 f7       	brne	.-8      	; 0x90a <PlayBuzzer+0x4e>
 912:	00 c0       	rjmp	.+0      	; 0x914 <PlayBuzzer+0x58>
 914:	00 00       	nop
			PORTD |= 0x02;
			_delay_ms(100);
			PORTD &= ~0x02;
		break;
		case 1:
			for (int i=0; i < 5; i++)
 916:	2f 5f       	subi	r18, 0xFF	; 255
 918:	3f 4f       	sbci	r19, 0xFF	; 255
 91a:	02 c0       	rjmp	.+4      	; 0x920 <PlayBuzzer+0x64>
}


void PlayBuzzer (char event)
{
	switch (event)
 91c:	20 e0       	ldi	r18, 0x00	; 0
 91e:	30 e0       	ldi	r19, 0x00	; 0
			PORTD |= 0x02;
			_delay_ms(100);
			PORTD &= ~0x02;
		break;
		case 1:
			for (int i=0; i < 5; i++)
 920:	25 30       	cpi	r18, 0x05	; 5
 922:	31 05       	cpc	r19, r1
 924:	04 f3       	brlt	.-64     	; 0x8e6 <PlayBuzzer+0x2a>
 926:	08 95       	ret

Disassembly of section .text.WaitForStartButton:

00000ae2 <WaitForStartButton>:
}

void WaitForStartButton ()
{
	do {
	while (PIND & (1 << PIND4));
 ae2:	84 99       	sbic	0x10, 4	; 16
 ae4:	fe cf       	rjmp	.-4      	; 0xae2 <WaitForStartButton>
 ae6:	2f e7       	ldi	r18, 0x7F	; 127
 ae8:	88 e3       	ldi	r24, 0x38	; 56
 aea:	91 e0       	ldi	r25, 0x01	; 1
 aec:	21 50       	subi	r18, 0x01	; 1
 aee:	80 40       	sbci	r24, 0x00	; 0
 af0:	90 40       	sbci	r25, 0x00	; 0
 af2:	e1 f7       	brne	.-8      	; 0xaec <WaitForStartButton+0xa>
 af4:	00 c0       	rjmp	.+0      	; 0xaf6 <WaitForStartButton+0x14>
 af6:	00 00       	nop
	_delay_ms(50);
	} while (PIND & (1 << PIND4));
 af8:	84 99       	sbic	0x10, 4	; 16
 afa:	f3 cf       	rjmp	.-26     	; 0xae2 <WaitForStartButton>
 afc:	08 95       	ret

Disassembly of section .text.main:

000004ec <main>:
unsigned char Buffer[55][3];


int main(void)
{
	DDRD = 0x03;
 4ec:	83 e0       	ldi	r24, 0x03	; 3
 4ee:	81 bb       	out	0x11, r24	; 17
	//OLED oled;
	Minuts = 2;
 4f0:	82 e0       	ldi	r24, 0x02	; 2
 4f2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	Seconds = 0;
 4f6:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <Seconds>
	char finished = false;
	
	OLED_Init();  //initialize the OLED
 4fa:	16 d2       	rcall	.+1068   	; 0x928 <OLED_Init>
	OLED_Clear(); //clear the display (for good measure)
 4fc:	4a d2       	rcall	.+1172   	; 0x992 <OLED_Clear>
	
		while (1) {
			OLED_SetCursor(0, 0);        //set the cursor position to (0, 0)
 4fe:	60 e0       	ldi	r22, 0x00	; 0
 500:	80 e0       	ldi	r24, 0x00	; 0
 502:	9a d2       	rcall	.+1332   	; 0xa38 <OLED_SetCursor>
			OLED_DrawBitmapRLE (0,0,CathClockMainScreenRLE,566); //Print out some text
 504:	06 e3       	ldi	r16, 0x36	; 54
 506:	12 e0       	ldi	r17, 0x02	; 2
 508:	28 e8       	ldi	r18, 0x88	; 136
 50a:	30 e0       	ldi	r19, 0x00	; 0
 50c:	40 e0       	ldi	r20, 0x00	; 0
 50e:	60 e0       	ldi	r22, 0x00	; 0
 510:	80 e0       	ldi	r24, 0x00	; 0
 512:	86 d1       	rcall	.+780    	; 0x820 <OLED_DrawBitmapRLE>
			OLED_WriteTwoDigitNumber(SevenSegments_struc,37,4,02,false,false,false,false,false);
 514:	1f 92       	push	r1
 516:	1f 92       	push	r1
 518:	81 2c       	mov	r8, r1
 51a:	a1 2c       	mov	r10, r1
 51c:	c1 2c       	mov	r12, r1
 51e:	68 94       	set
 520:	ee 24       	eor	r14, r14
 522:	e1 f8       	bld	r14, 1
 524:	04 e0       	ldi	r16, 0x04	; 4
 526:	25 e2       	ldi	r18, 0x25	; 37
 528:	40 91 09 01 	lds	r20, 0x0109	; 0x800109 <SevenSegments_struc>
 52c:	50 91 0a 01 	lds	r21, 0x010A	; 0x80010a <SevenSegments_struc+0x1>
 530:	60 91 0b 01 	lds	r22, 0x010B	; 0x80010b <SevenSegments_struc+0x2>
 534:	70 91 0c 01 	lds	r23, 0x010C	; 0x80010c <SevenSegments_struc+0x3>
 538:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <SevenSegments_struc+0x4>
 53c:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <SevenSegments_struc+0x5>
 540:	1b d1       	rcall	.+566    	; 0x778 <OLED_WriteTwoDigitNumber>
			OLED_WriteChar(SevenSegments_struc,59,4,':',false,false,false);
 542:	0f 2e       	mov	r0, r31
 544:	fa e3       	ldi	r31, 0x3A	; 58
 546:	ef 2e       	mov	r14, r31
 548:	f0 2d       	mov	r31, r0
 54a:	2b e3       	ldi	r18, 0x3B	; 59
 54c:	40 91 09 01 	lds	r20, 0x0109	; 0x800109 <SevenSegments_struc>
 550:	50 91 0a 01 	lds	r21, 0x010A	; 0x80010a <SevenSegments_struc+0x1>
 554:	60 91 0b 01 	lds	r22, 0x010B	; 0x80010b <SevenSegments_struc+0x2>
 558:	70 91 0c 01 	lds	r23, 0x010C	; 0x80010c <SevenSegments_struc+0x3>
 55c:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <SevenSegments_struc+0x4>
 560:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <SevenSegments_struc+0x5>
 564:	79 d0       	rcall	.+242    	; 0x658 <OLED_WriteChar>
			OLED_WriteTwoDigitNumber(SevenSegments_struc,70,4,0,false,false,false,false,false);
 566:	1f 92       	push	r1
 568:	1f 92       	push	r1
 56a:	e1 2c       	mov	r14, r1
 56c:	26 e4       	ldi	r18, 0x46	; 70
 56e:	40 91 09 01 	lds	r20, 0x0109	; 0x800109 <SevenSegments_struc>
 572:	50 91 0a 01 	lds	r21, 0x010A	; 0x80010a <SevenSegments_struc+0x1>
 576:	60 91 0b 01 	lds	r22, 0x010B	; 0x80010b <SevenSegments_struc+0x2>
 57a:	70 91 0c 01 	lds	r23, 0x010C	; 0x80010c <SevenSegments_struc+0x3>
 57e:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <SevenSegments_struc+0x4>
 582:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <SevenSegments_struc+0x5>
 586:	f8 d0       	rcall	.+496    	; 0x778 <OLED_WriteTwoDigitNumber>
	
		WaitForStartButton();
 588:	ac d2       	rcall	.+1368   	; 0xae2 <WaitForStartButton>
		PlayBuzzer(START);
 58a:	80 e0       	ldi	r24, 0x00	; 0
 58c:	97 d1       	rcall	.+814    	; 0x8bc <PlayBuzzer>
	
		while (!finished)
 58e:	0f 90       	pop	r0
 590:	0f 90       	pop	r0
 592:	0f 90       	pop	r0
 594:	0f 90       	pop	r0
 596:	4d c0       	rjmp	.+154    	; 0x632 <main+0x146>
			PORTD ^= 0x01;
			_delay_ms (10);
			
			if (--Seconds == 255)
			{
				if (--Minuts == 255)
 598:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 59c:	81 50       	subi	r24, 0x01	; 1
 59e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 5a2:	8f 3f       	cpi	r24, 0xFF	; 255
 5a4:	29 f4       	brne	.+10     	; 0x5b0 <main+0xc4>
				{
					TimerFinished();
 5a6:	67 d2       	rcall	.+1230   	; 0xa76 <TimerFinished>
					PlayBuzzer(FINISHED);
 5a8:	81 e0       	ldi	r24, 0x01	; 1
 5aa:	88 d1       	rcall	.+784    	; 0x8bc <PlayBuzzer>
				OLED_WriteChar(SevenSegments_struc,59,4,':',false,false,false);
				OLED_WriteTwoDigitNumber(SevenSegments_struc,70,4,Seconds,false,false,false,false,false);
			//}
		}
	
		WaitForStartButton();
 5ac:	9a d2       	rcall	.+1332   	; 0xae2 <WaitForStartButton>
		finished = false;
	
	}
 5ae:	a7 cf       	rjmp	.-178    	; 0x4fe <main+0x12>
					PlayBuzzer(FINISHED);
					finished = true;
					break;
				}
				else
					Seconds = 59;
 5b0:	8b e3       	ldi	r24, 0x3B	; 59
 5b2:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <Seconds>
		
			//if (!finished) 
			//{	
				//OLED_SetCursor(0, 0);        //set the cursor position to (0, 0)
				//OLED_DrawBitmapRLE (0,0,CathClockMainScreenRLE,566); //Print out some text
				OLED_WriteTwoDigitNumber(SevenSegments_struc,37,4,Minuts,false,false,false,false,false);
 5b6:	1f 92       	push	r1
 5b8:	1f 92       	push	r1
 5ba:	81 2c       	mov	r8, r1
 5bc:	a1 2c       	mov	r10, r1
 5be:	c1 2c       	mov	r12, r1
 5c0:	e0 90 60 00 	lds	r14, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 5c4:	04 e0       	ldi	r16, 0x04	; 4
 5c6:	25 e2       	ldi	r18, 0x25	; 37
 5c8:	40 91 09 01 	lds	r20, 0x0109	; 0x800109 <SevenSegments_struc>
 5cc:	50 91 0a 01 	lds	r21, 0x010A	; 0x80010a <SevenSegments_struc+0x1>
 5d0:	60 91 0b 01 	lds	r22, 0x010B	; 0x80010b <SevenSegments_struc+0x2>
 5d4:	70 91 0c 01 	lds	r23, 0x010C	; 0x80010c <SevenSegments_struc+0x3>
 5d8:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <SevenSegments_struc+0x4>
 5dc:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <SevenSegments_struc+0x5>
 5e0:	cb d0       	rcall	.+406    	; 0x778 <OLED_WriteTwoDigitNumber>
				OLED_WriteChar(SevenSegments_struc,59,4,':',false,false,false);
 5e2:	0f 2e       	mov	r0, r31
 5e4:	fa e3       	ldi	r31, 0x3A	; 58
 5e6:	ef 2e       	mov	r14, r31
 5e8:	f0 2d       	mov	r31, r0
 5ea:	2b e3       	ldi	r18, 0x3B	; 59
 5ec:	40 91 09 01 	lds	r20, 0x0109	; 0x800109 <SevenSegments_struc>
 5f0:	50 91 0a 01 	lds	r21, 0x010A	; 0x80010a <SevenSegments_struc+0x1>
 5f4:	60 91 0b 01 	lds	r22, 0x010B	; 0x80010b <SevenSegments_struc+0x2>
 5f8:	70 91 0c 01 	lds	r23, 0x010C	; 0x80010c <SevenSegments_struc+0x3>
 5fc:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <SevenSegments_struc+0x4>
 600:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <SevenSegments_struc+0x5>
 604:	29 d0       	rcall	.+82     	; 0x658 <OLED_WriteChar>
				OLED_WriteTwoDigitNumber(SevenSegments_struc,70,4,Seconds,false,false,false,false,false);
 606:	1f 92       	push	r1
 608:	1f 92       	push	r1
 60a:	e0 90 06 01 	lds	r14, 0x0106	; 0x800106 <Seconds>
 60e:	26 e4       	ldi	r18, 0x46	; 70
 610:	40 91 09 01 	lds	r20, 0x0109	; 0x800109 <SevenSegments_struc>
 614:	50 91 0a 01 	lds	r21, 0x010A	; 0x80010a <SevenSegments_struc+0x1>
 618:	60 91 0b 01 	lds	r22, 0x010B	; 0x80010b <SevenSegments_struc+0x2>
 61c:	70 91 0c 01 	lds	r23, 0x010C	; 0x80010c <SevenSegments_struc+0x3>
 620:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <SevenSegments_struc+0x4>
 624:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <SevenSegments_struc+0x5>
 628:	a7 d0       	rcall	.+334    	; 0x778 <OLED_WriteTwoDigitNumber>
 62a:	0f 90       	pop	r0
 62c:	0f 90       	pop	r0
 62e:	0f 90       	pop	r0
 630:	0f 90       	pop	r0
		WaitForStartButton();
		PlayBuzzer(START);
	
		while (!finished)
		{
			PORTD ^= 0x01;
 632:	92 b3       	in	r25, 0x12	; 18
 634:	81 e0       	ldi	r24, 0x01	; 1
 636:	89 27       	eor	r24, r25
 638:	82 bb       	out	0x12, r24	; 18
 63a:	8f e1       	ldi	r24, 0x1F	; 31
 63c:	9e e4       	ldi	r25, 0x4E	; 78
 63e:	01 97       	sbiw	r24, 0x01	; 1
 640:	f1 f7       	brne	.-4      	; 0x63e <main+0x152>
 642:	00 c0       	rjmp	.+0      	; 0x644 <main+0x158>
 644:	00 00       	nop
			_delay_ms (10);
			
			if (--Seconds == 255)
 646:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <Seconds>
 64a:	81 50       	subi	r24, 0x01	; 1
 64c:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <Seconds>
 650:	8f 3f       	cpi	r24, 0xFF	; 255
 652:	09 f4       	brne	.+2      	; 0x656 <main+0x16a>
 654:	a1 cf       	rjmp	.-190    	; 0x598 <main+0xac>
 656:	af cf       	rjmp	.-162    	; 0x5b6 <main+0xca>

Disassembly of section .text.oledSendStart:

00000b14 <oledSendStart>:

/********************************************************************************
 Local FUnctions for sending the command/data
 ********************************************************************************/

void oledSendStart(uint8_t address){
 b14:	cf 93       	push	r28
 b16:	c8 2f       	mov	r28, r24

    
    i2c_tx_start(MASTER_TRANSMITTER);
 b18:	80 e0       	ldi	r24, 0x00	; 0
 b1a:	c2 df       	rcall	.-124    	; 0xaa0 <i2c_tx_start>
    i2c_tx_address(address);
 b1c:	8c 2f       	mov	r24, r28
 b1e:	68 df       	rcall	.-304    	; 0x9f0 <i2c_tx_address>
}
 b20:	cf 91       	pop	r28
 b22:	08 95       	ret

Disassembly of section .text.oledSendStop:

00000b4c <oledSendStop>:


void oledSendStop(void){

    i2c_tx_stop();
 b4c:	eb df       	rcall	.-42     	; 0xb24 <i2c_tx_stop>
 b4e:	08 95       	ret

Disassembly of section .text.oledSendByte:

00000b50 <oledSendByte>:


void oledSendByte(uint8_t ch){

    
    i2c_tx_byte(ch);
 b50:	b9 df       	rcall	.-142    	; 0xac4 <i2c_tx_byte>
 b52:	08 95       	ret

Disassembly of section .text.oledSendCommand:

00000afe <oledSendCommand>:
    
}


void oledSendCommand(uint8_t cmd){
 afe:	cf 93       	push	r28
 b00:	c8 2f       	mov	r28, r24
    //oledSendStart(SSD1306_ADDRESS<<1);
    oledSendStart(SSD1306_ADDRESS);
 b02:	8c e3       	ldi	r24, 0x3C	; 60
 b04:	07 d0       	rcall	.+14     	; 0xb14 <oledSendStart>
    oledSendByte(SSD1306_COMMAND);
 b06:	80 e0       	ldi	r24, 0x00	; 0
 b08:	23 d0       	rcall	.+70     	; 0xb50 <oledSendByte>
    oledSendByte(cmd);
 b0a:	8c 2f       	mov	r24, r28
 b0c:	21 d0       	rcall	.+66     	; 0xb50 <oledSendByte>
    oledSendStop();
 b0e:	1e d0       	rcall	.+60     	; 0xb4c <oledSendStop>
}
 b10:	cf 91       	pop	r28
 b12:	08 95       	ret

Disassembly of section .text.OLED_Clear:

00000992 <OLED_Clear>:
 * I/P Arguments: none.
 * Return value    : none
 * description  :This function clears the LCD and moves the cursor to beginning of first line
 ****************************************************************************************************/
void OLED_Clear()
{
 992:	cf 93       	push	r28
 994:	df 93       	push	r29
    int i;
    
    oledSendCommand(SSD1306_SET_COLUMN_ADDR);
 996:	81 e2       	ldi	r24, 0x21	; 33
 998:	b2 d0       	rcall	.+356    	; 0xafe <oledSendCommand>
    oledSendCommand(0);
 99a:	80 e0       	ldi	r24, 0x00	; 0
 99c:	b0 d0       	rcall	.+352    	; 0xafe <oledSendCommand>
    oledSendCommand(127);
 99e:	8f e7       	ldi	r24, 0x7F	; 127
 9a0:	ae d0       	rcall	.+348    	; 0xafe <oledSendCommand>
    
    oledSendCommand(SSD1306_SET_PAGE_ADDR);
 9a2:	82 e2       	ldi	r24, 0x22	; 34
 9a4:	ac d0       	rcall	.+344    	; 0xafe <oledSendCommand>
    oledSendCommand(0);
 9a6:	80 e0       	ldi	r24, 0x00	; 0
 9a8:	aa d0       	rcall	.+340    	; 0xafe <oledSendCommand>
    oledSendCommand(7);
 9aa:	87 e0       	ldi	r24, 0x07	; 7
 9ac:	a8 d0       	rcall	.+336    	; 0xafe <oledSendCommand>
    
    
    oledSendStart(SSD1306_ADDRESS);
 9ae:	8c e3       	ldi	r24, 0x3C	; 60
 9b0:	b1 d0       	rcall	.+354    	; 0xb14 <oledSendStart>
    oledSendByte(SSD1306_DATA_CONTINUE);
 9b2:	80 e4       	ldi	r24, 0x40	; 64
 9b4:	cd d0       	rcall	.+410    	; 0xb50 <oledSendByte>
    
    for (i=0; i<1024; i++)      // Write Zeros to clear the display
 9b6:	c0 e0       	ldi	r28, 0x00	; 0
 9b8:	d0 e0       	ldi	r29, 0x00	; 0
 9ba:	03 c0       	rjmp	.+6      	; 0x9c2 <OLED_Clear+0x30>
    {
        oledSendByte(0);
 9bc:	80 e0       	ldi	r24, 0x00	; 0
 9be:	c8 d0       	rcall	.+400    	; 0xb50 <oledSendByte>
    
    
    oledSendStart(SSD1306_ADDRESS);
    oledSendByte(SSD1306_DATA_CONTINUE);
    
    for (i=0; i<1024; i++)      // Write Zeros to clear the display
 9c0:	21 96       	adiw	r28, 0x01	; 1
 9c2:	c1 15       	cp	r28, r1
 9c4:	84 e0       	ldi	r24, 0x04	; 4
 9c6:	d8 07       	cpc	r29, r24
 9c8:	cc f3       	brlt	.-14     	; 0x9bc <OLED_Clear+0x2a>
    {
        oledSendByte(0);
    }
    
    oledSendCommand(SSD1306_SET_COLUMN_ADDR);
 9ca:	81 e2       	ldi	r24, 0x21	; 33
 9cc:	98 d0       	rcall	.+304    	; 0xafe <oledSendCommand>
    oledSendCommand(0);
 9ce:	80 e0       	ldi	r24, 0x00	; 0
 9d0:	96 d0       	rcall	.+300    	; 0xafe <oledSendCommand>
    oledSendCommand(127);
 9d2:	8f e7       	ldi	r24, 0x7F	; 127
 9d4:	94 d0       	rcall	.+296    	; 0xafe <oledSendCommand>
    
    oledSendCommand(SSD1306_SET_PAGE_ADDR);
 9d6:	82 e2       	ldi	r24, 0x22	; 34
 9d8:	92 d0       	rcall	.+292    	; 0xafe <oledSendCommand>
    oledSendCommand(0);
 9da:	80 e0       	ldi	r24, 0x00	; 0
 9dc:	90 d0       	rcall	.+288    	; 0xafe <oledSendCommand>
    oledSendCommand(7);
 9de:	87 e0       	ldi	r24, 0x07	; 7
 9e0:	8e d0       	rcall	.+284    	; 0xafe <oledSendCommand>
    
    oledSendStart(SSD1306_ADDRESS);
 9e2:	8c e3       	ldi	r24, 0x3C	; 60
 9e4:	97 d0       	rcall	.+302    	; 0xb14 <oledSendStart>
    oledSendByte(SSD1306_DATA_CONTINUE);
 9e6:	80 e4       	ldi	r24, 0x40	; 64
 9e8:	b3 d0       	rcall	.+358    	; 0xb50 <oledSendByte>
}
 9ea:	df 91       	pop	r29
 9ec:	cf 91       	pop	r28
 9ee:	08 95       	ret

Disassembly of section .text.OLED_Init:

00000928 <OLED_Init>:
 * description  :This function is used to initialize the OLED in the normal mode.
 After initializing the OLED, It clears the OLED and sets the cursor to first line first position. .
 **************************************************************************************************/
void OLED_Init(void)
{
    i2c_init();
 928:	0b d1       	rcall	.+534    	; 0xb40 <i2c_init>
    
    oledSendCommand(SSD1306_DISPLAY_OFF);
 92a:	8e ea       	ldi	r24, 0xAE	; 174
 92c:	e8 d0       	rcall	.+464    	; 0xafe <oledSendCommand>
    oledSendCommand(SSD1306_SET_DISPLAY_CLOCK_DIV_RATIO);
 92e:	85 ed       	ldi	r24, 0xD5	; 213
 930:	e6 d0       	rcall	.+460    	; 0xafe <oledSendCommand>
    oledSendCommand(0x80);
 932:	80 e8       	ldi	r24, 0x80	; 128
 934:	e4 d0       	rcall	.+456    	; 0xafe <oledSendCommand>
    oledSendCommand(SSD1306_SET_MULTIPLEX_RATIO);
 936:	88 ea       	ldi	r24, 0xA8	; 168
 938:	e2 d0       	rcall	.+452    	; 0xafe <oledSendCommand>
    oledSendCommand(0x3F);
 93a:	8f e3       	ldi	r24, 0x3F	; 63
 93c:	e0 d0       	rcall	.+448    	; 0xafe <oledSendCommand>
    oledSendCommand(SSD1306_SET_DISPLAY_OFFSET);
 93e:	83 ed       	ldi	r24, 0xD3	; 211
 940:	de d0       	rcall	.+444    	; 0xafe <oledSendCommand>
    oledSendCommand(0x0);
 942:	80 e0       	ldi	r24, 0x00	; 0
 944:	dc d0       	rcall	.+440    	; 0xafe <oledSendCommand>
    oledSendCommand(SSD1306_SET_START_LINE | 0x0);
 946:	80 e4       	ldi	r24, 0x40	; 64
 948:	da d0       	rcall	.+436    	; 0xafe <oledSendCommand>
    oledSendCommand(SSD1306_CHARGE_PUMP);
 94a:	8d e8       	ldi	r24, 0x8D	; 141
 94c:	d8 d0       	rcall	.+432    	; 0xafe <oledSendCommand>
    oledSendCommand(0x14);
 94e:	84 e1       	ldi	r24, 0x14	; 20
 950:	d6 d0       	rcall	.+428    	; 0xafe <oledSendCommand>
    oledSendCommand(SSD1306_MEMORY_ADDR_MODE);
 952:	80 e2       	ldi	r24, 0x20	; 32
 954:	d4 d0       	rcall	.+424    	; 0xafe <oledSendCommand>
    oledSendCommand(0x00);
 956:	80 e0       	ldi	r24, 0x00	; 0
 958:	d2 d0       	rcall	.+420    	; 0xafe <oledSendCommand>
    oledSendCommand(SSD1306_SET_SEGMENT_REMAP | 0x1);
 95a:	81 ea       	ldi	r24, 0xA1	; 161
 95c:	d0 d0       	rcall	.+416    	; 0xafe <oledSendCommand>
    oledSendCommand(SSD1306_COM_SCAN_DIR_DEC);
 95e:	88 ec       	ldi	r24, 0xC8	; 200
 960:	ce d0       	rcall	.+412    	; 0xafe <oledSendCommand>
    oledSendCommand(SSD1306_SET_COM_PINS);
 962:	8a ed       	ldi	r24, 0xDA	; 218
 964:	cc d0       	rcall	.+408    	; 0xafe <oledSendCommand>
    oledSendCommand(0x12);
 966:	82 e1       	ldi	r24, 0x12	; 18
 968:	ca d0       	rcall	.+404    	; 0xafe <oledSendCommand>
    oledSendCommand(SSD1306_SET_CONTRAST_CONTROL);
 96a:	81 e8       	ldi	r24, 0x81	; 129
 96c:	c8 d0       	rcall	.+400    	; 0xafe <oledSendCommand>
    oledSendCommand(0xCF);
 96e:	8f ec       	ldi	r24, 0xCF	; 207
 970:	c6 d0       	rcall	.+396    	; 0xafe <oledSendCommand>
    oledSendCommand(SSD1306_SET_PRECHARGE_PERIOD);
 972:	89 ed       	ldi	r24, 0xD9	; 217
 974:	c4 d0       	rcall	.+392    	; 0xafe <oledSendCommand>
    oledSendCommand(0xF1);
 976:	81 ef       	ldi	r24, 0xF1	; 241
 978:	c2 d0       	rcall	.+388    	; 0xafe <oledSendCommand>
    oledSendCommand(SSD1306_SET_VCOM_DESELECT);
 97a:	8b ed       	ldi	r24, 0xDB	; 219
 97c:	c0 d0       	rcall	.+384    	; 0xafe <oledSendCommand>
    oledSendCommand(0x40);
 97e:	80 e4       	ldi	r24, 0x40	; 64
 980:	be d0       	rcall	.+380    	; 0xafe <oledSendCommand>
    oledSendCommand(SSD1306_DISPLAY_ALL_ON_RESUME);
 982:	84 ea       	ldi	r24, 0xA4	; 164
 984:	bc d0       	rcall	.+376    	; 0xafe <oledSendCommand>
    oledSendCommand(SSD1306_NORMAL_DISPLAY);
 986:	86 ea       	ldi	r24, 0xA6	; 166
 988:	ba d0       	rcall	.+372    	; 0xafe <oledSendCommand>
    oledSendCommand(SSD1306_DISPLAY_ON);
 98a:	8f ea       	ldi	r24, 0xAF	; 175
 98c:	b8 d0       	rcall	.+368    	; 0xafe <oledSendCommand>
    
    OLED_Clear();  /* Clear the complete LCD during init */
 98e:	01 d0       	rcall	.+2      	; 0x992 <OLED_Clear>
 990:	08 95       	ret

Disassembly of section .text.OLED_SetCursor:

00000a38 <OLED_SetCursor>:
 * description  :This function moves the Cursor to specified position
 Note:If the Input(Line/Char number) are out of range
 then no action will be taken
 ****************************************************************************************************/
void OLED_SetCursor(uint8_t lineNumber,uint8_t cursorPosition)
{
 a38:	cf 93       	push	r28
 a3a:	df 93       	push	r29
    /* Move the Cursor to specified position only if it is in range */
    if((lineNumber <= C_OledLastLine_U8) && (cursorPosition <= 127))
 a3c:	88 30       	cpi	r24, 0x08	; 8
 a3e:	c0 f4       	brcc	.+48     	; 0xa70 <OLED_SetCursor+0x38>
 a40:	66 23       	and	r22, r22
 a42:	b4 f0       	brlt	.+44     	; 0xa70 <OLED_SetCursor+0x38>
 a44:	d6 2f       	mov	r29, r22
 a46:	c8 2f       	mov	r28, r24
    {
        OledLineNum=lineNumber;   /* Save the specified line number */
 a48:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <OledLineNum>
        OledCursorPos=cursorPosition; /* Save the specified cursor position */
 a4c:	60 93 08 01 	sts	0x0108, r22	; 0x800108 <OledCursorPos>
        
        oledSendCommand(SSD1306_SET_COLUMN_ADDR);
 a50:	81 e2       	ldi	r24, 0x21	; 33
 a52:	55 d0       	rcall	.+170    	; 0xafe <oledSendCommand>
        oledSendCommand(cursorPosition);
 a54:	8d 2f       	mov	r24, r29
 a56:	53 d0       	rcall	.+166    	; 0xafe <oledSendCommand>
        oledSendCommand(127);
 a58:	8f e7       	ldi	r24, 0x7F	; 127
 a5a:	51 d0       	rcall	.+162    	; 0xafe <oledSendCommand>
        
        oledSendCommand(SSD1306_SET_PAGE_ADDR);
 a5c:	82 e2       	ldi	r24, 0x22	; 34
 a5e:	4f d0       	rcall	.+158    	; 0xafe <oledSendCommand>
        oledSendCommand(lineNumber);
 a60:	8c 2f       	mov	r24, r28
 a62:	4d d0       	rcall	.+154    	; 0xafe <oledSendCommand>
        oledSendCommand(7);
 a64:	87 e0       	ldi	r24, 0x07	; 7
 a66:	4b d0       	rcall	.+150    	; 0xafe <oledSendCommand>
        
        oledSendStart(SSD1306_ADDRESS);
 a68:	8c e3       	ldi	r24, 0x3C	; 60
 a6a:	54 d0       	rcall	.+168    	; 0xb14 <oledSendStart>
        oledSendByte(SSD1306_DATA_CONTINUE);
 a6c:	80 e4       	ldi	r24, 0x40	; 64
 a6e:	70 d0       	rcall	.+224    	; 0xb50 <oledSendByte>
    }
}
 a70:	df 91       	pop	r29
 a72:	cf 91       	pop	r28
 a74:	08 95       	ret

Disassembly of section .text.OLED_WriteChar:

00000658 <OLED_WriteChar>:
    
    for ( i=0; i<1024; i++)      // Send data
    {
        oledSendByte(ptr_Logo[i]);
    }
}
 658:	2f 92       	push	r2
 65a:	3f 92       	push	r3
 65c:	4f 92       	push	r4
 65e:	5f 92       	push	r5
 660:	6f 92       	push	r6
 662:	7f 92       	push	r7
 664:	8f 92       	push	r8
 666:	9f 92       	push	r9
 668:	af 92       	push	r10
 66a:	bf 92       	push	r11
 66c:	cf 92       	push	r12
 66e:	df 92       	push	r13
 670:	ef 92       	push	r14
 672:	ff 92       	push	r15
 674:	0f 93       	push	r16
 676:	1f 93       	push	r17
 678:	cf 93       	push	r28
 67a:	df 93       	push	r29
 67c:	00 d0       	rcall	.+0      	; 0x67e <OLED_WriteChar+0x26>
 67e:	00 d0       	rcall	.+0      	; 0x680 <OLED_WriteChar+0x28>
 680:	00 d0       	rcall	.+0      	; 0x682 <OLED_WriteChar+0x2a>
 682:	cd b7       	in	r28, 0x3d	; 61
 684:	de b7       	in	r29, 0x3e	; 62
 686:	34 2f       	mov	r19, r20
 688:	49 83       	std	Y+1, r20	; 0x01
 68a:	5a 83       	std	Y+2, r21	; 0x02
 68c:	6b 83       	std	Y+3, r22	; 0x03
 68e:	7c 83       	std	Y+4, r23	; 0x04
 690:	8d 83       	std	Y+5, r24	; 0x05
 692:	9e 83       	std	Y+6, r25	; 0x06
 694:	d2 2e       	mov	r13, r18
 696:	b0 2e       	mov	r11, r16
 698:	9e 2c       	mov	r9, r14
 69a:	96 1a       	sub	r9, r22
 69c:	03 2f       	mov	r16, r19
 69e:	10 e0       	ldi	r17, 0x00	; 0
 6a0:	45 2e       	mov	r4, r21
 6a2:	51 2c       	mov	r5, r1
 6a4:	04 9d       	mul	r16, r4
 6a6:	70 01       	movw	r14, r0
 6a8:	05 9d       	mul	r16, r5
 6aa:	f0 0c       	add	r15, r0
 6ac:	14 9d       	mul	r17, r4
 6ae:	f0 0c       	add	r15, r0
 6b0:	11 24       	eor	r1, r1
 6b2:	8c e3       	ldi	r24, 0x3C	; 60
 6b4:	2f d2       	rcall	.+1118   	; 0xb14 <oledSendStart>
 6b6:	80 e4       	ldi	r24, 0x40	; 64
 6b8:	4b d2       	rcall	.+1174   	; 0xb50 <oledSendByte>
 6ba:	21 2c       	mov	r2, r1
 6bc:	31 2c       	mov	r3, r1
 6be:	40 c0       	rjmp	.+128    	; 0x740 <OLED_WriteChar+0xe8>
 6c0:	6d 2d       	mov	r22, r13
 6c2:	62 0d       	add	r22, r2
 6c4:	8b 2d       	mov	r24, r11
 6c6:	86 0d       	add	r24, r6
 6c8:	b7 d1       	rcall	.+878    	; 0xa38 <OLED_SetCursor>
 6ca:	2c 81       	ldd	r18, Y+4	; 0x04
 6cc:	3d 81       	ldd	r19, Y+5	; 0x05
 6ce:	4e 81       	ldd	r20, Y+6	; 0x06
 6d0:	9e 9c       	mul	r9, r14
 6d2:	c0 01       	movw	r24, r0
 6d4:	9f 9c       	mul	r9, r15
 6d6:	90 0d       	add	r25, r0
 6d8:	11 24       	eor	r1, r1
 6da:	24 9c       	mul	r2, r4
 6dc:	b0 01       	movw	r22, r0
 6de:	25 9c       	mul	r2, r5
 6e0:	70 0d       	add	r23, r0
 6e2:	34 9c       	mul	r3, r4
 6e4:	70 0d       	add	r23, r0
 6e6:	11 24       	eor	r1, r1
 6e8:	86 0f       	add	r24, r22
 6ea:	97 1f       	adc	r25, r23
 6ec:	86 0d       	add	r24, r6
 6ee:	97 1d       	adc	r25, r7
 6f0:	28 0f       	add	r18, r24
 6f2:	39 1f       	adc	r19, r25
 6f4:	41 1d       	adc	r20, r1
 6f6:	97 fd       	sbrc	r25, 7
 6f8:	4a 95       	dec	r20
 6fa:	f9 01       	movw	r30, r18
 6fc:	84 91       	lpm	r24, Z
 6fe:	47 fd       	sbrc	r20, 7
 700:	80 81       	ld	r24, Z
 702:	aa 20       	and	r10, r10
 704:	59 f0       	breq	.+22     	; 0x71c <OLED_WriteChar+0xc4>
 706:	92 01       	movw	r18, r4
 708:	21 50       	subi	r18, 0x01	; 1
 70a:	31 09       	sbc	r19, r1
 70c:	62 16       	cp	r6, r18
 70e:	73 06       	cpc	r7, r19
 710:	29 f4       	brne	.+10     	; 0x71c <OLED_WriteChar+0xc4>
 712:	88 20       	and	r8, r8
 714:	11 f0       	breq	.+4      	; 0x71a <OLED_WriteChar+0xc2>
 716:	80 6c       	ori	r24, 0xC0	; 192
 718:	01 c0       	rjmp	.+2      	; 0x71c <OLED_WriteChar+0xc4>
 71a:	80 68       	ori	r24, 0x80	; 128
 71c:	cc 20       	and	r12, r12
 71e:	19 f0       	breq	.+6      	; 0x726 <OLED_WriteChar+0xce>
 720:	80 95       	com	r24
 722:	16 d2       	rcall	.+1068   	; 0xb50 <oledSendByte>
 724:	01 c0       	rjmp	.+2      	; 0x728 <OLED_WriteChar+0xd0>
 726:	14 d2       	rcall	.+1064   	; 0xb50 <oledSendByte>
 728:	8f ef       	ldi	r24, 0xFF	; 255
 72a:	68 1a       	sub	r6, r24
 72c:	78 0a       	sbc	r7, r24
 72e:	02 c0       	rjmp	.+4      	; 0x734 <OLED_WriteChar+0xdc>
 730:	61 2c       	mov	r6, r1
 732:	71 2c       	mov	r7, r1
 734:	64 14       	cp	r6, r4
 736:	75 04       	cpc	r7, r5
 738:	1c f2       	brlt	.-122    	; 0x6c0 <OLED_WriteChar+0x68>
 73a:	8f ef       	ldi	r24, 0xFF	; 255
 73c:	28 1a       	sub	r2, r24
 73e:	38 0a       	sbc	r3, r24
 740:	20 16       	cp	r2, r16
 742:	31 06       	cpc	r3, r17
 744:	ac f3       	brlt	.-22     	; 0x730 <OLED_WriteChar+0xd8>
 746:	26 96       	adiw	r28, 0x06	; 6
 748:	0f b6       	in	r0, 0x3f	; 63
 74a:	f8 94       	cli
 74c:	de bf       	out	0x3e, r29	; 62
 74e:	0f be       	out	0x3f, r0	; 63
 750:	cd bf       	out	0x3d, r28	; 61
 752:	df 91       	pop	r29
 754:	cf 91       	pop	r28
 756:	1f 91       	pop	r17
 758:	0f 91       	pop	r16
 75a:	ff 90       	pop	r15
 75c:	ef 90       	pop	r14
 75e:	df 90       	pop	r13
 760:	cf 90       	pop	r12
 762:	bf 90       	pop	r11
 764:	af 90       	pop	r10
 766:	9f 90       	pop	r9
 768:	8f 90       	pop	r8
 76a:	7f 90       	pop	r7
 76c:	6f 90       	pop	r6
 76e:	5f 90       	pop	r5
 770:	4f 90       	pop	r4
 772:	3f 90       	pop	r3
 774:	2f 90       	pop	r2
 776:	08 95       	ret

Disassembly of section .text.OLED_WriteTwoDigitNumber:

00000778 <OLED_WriteTwoDigitNumber>:
 778:	8f 92       	push	r8
 77a:	9f 92       	push	r9
 77c:	af 92       	push	r10
 77e:	bf 92       	push	r11
 780:	cf 92       	push	r12
 782:	df 92       	push	r13
 784:	ef 92       	push	r14
 786:	ff 92       	push	r15
 788:	0f 93       	push	r16
 78a:	1f 93       	push	r17
 78c:	cf 93       	push	r28
 78e:	df 93       	push	r29
 790:	00 d0       	rcall	.+0      	; 0x792 <OLED_WriteTwoDigitNumber+0x1a>
 792:	00 d0       	rcall	.+0      	; 0x794 <OLED_WriteTwoDigitNumber+0x1c>
 794:	00 d0       	rcall	.+0      	; 0x796 <OLED_WriteTwoDigitNumber+0x1e>
 796:	cd b7       	in	r28, 0x3d	; 61
 798:	de b7       	in	r29, 0x3e	; 62
 79a:	49 83       	std	Y+1, r20	; 0x01
 79c:	5a 83       	std	Y+2, r21	; 0x02
 79e:	6b 83       	std	Y+3, r22	; 0x03
 7a0:	7c 83       	std	Y+4, r23	; 0x04
 7a2:	8d 83       	std	Y+5, r24	; 0x05
 7a4:	9e 83       	std	Y+6, r25	; 0x06
 7a6:	b2 2e       	mov	r11, r18
 7a8:	9e 2c       	mov	r9, r14
 7aa:	da 2c       	mov	r13, r10
 7ac:	a8 2c       	mov	r10, r8
 7ae:	1d ec       	ldi	r17, 0xCD	; 205
 7b0:	e1 9e       	mul	r14, r17
 7b2:	11 2d       	mov	r17, r1
 7b4:	11 24       	eor	r1, r1
 7b6:	16 95       	lsr	r17
 7b8:	16 95       	lsr	r17
 7ba:	16 95       	lsr	r17
 7bc:	0f 2e       	mov	r0, r31
 7be:	f0 e3       	ldi	r31, 0x30	; 48
 7c0:	ef 2e       	mov	r14, r31
 7c2:	f0 2d       	mov	r31, r0
 7c4:	e1 0e       	add	r14, r17
 7c6:	8e 88       	ldd	r8, Y+22	; 0x16
 7c8:	47 df       	rcall	.-370    	; 0x658 <OLED_WriteChar>
 7ca:	49 81       	ldd	r20, Y+1	; 0x01
 7cc:	11 0f       	add	r17, r17
 7ce:	81 2f       	mov	r24, r17
 7d0:	88 0f       	add	r24, r24
 7d2:	88 0f       	add	r24, r24
 7d4:	18 0f       	add	r17, r24
 7d6:	89 2d       	mov	r24, r9
 7d8:	81 1b       	sub	r24, r17
 7da:	0f 2e       	mov	r0, r31
 7dc:	f0 e3       	ldi	r31, 0x30	; 48
 7de:	ef 2e       	mov	r14, r31
 7e0:	f0 2d       	mov	r31, r0
 7e2:	e8 0e       	add	r14, r24
 7e4:	2b 2d       	mov	r18, r11
 7e6:	24 0f       	add	r18, r20
 7e8:	8e 88       	ldd	r8, Y+22	; 0x16
 7ea:	ad 88       	ldd	r10, Y+21	; 0x15
 7ec:	cd 2c       	mov	r12, r13
 7ee:	5a 81       	ldd	r21, Y+2	; 0x02
 7f0:	6b 81       	ldd	r22, Y+3	; 0x03
 7f2:	7c 81       	ldd	r23, Y+4	; 0x04
 7f4:	8d 81       	ldd	r24, Y+5	; 0x05
 7f6:	9e 81       	ldd	r25, Y+6	; 0x06
 7f8:	2f df       	rcall	.-418    	; 0x658 <OLED_WriteChar>
 7fa:	26 96       	adiw	r28, 0x06	; 6
 7fc:	0f b6       	in	r0, 0x3f	; 63
 7fe:	f8 94       	cli
 800:	de bf       	out	0x3e, r29	; 62
 802:	0f be       	out	0x3f, r0	; 63
 804:	cd bf       	out	0x3d, r28	; 61
 806:	df 91       	pop	r29
 808:	cf 91       	pop	r28
 80a:	1f 91       	pop	r17
 80c:	0f 91       	pop	r16
 80e:	ff 90       	pop	r15
 810:	ef 90       	pop	r14
 812:	df 90       	pop	r13
 814:	cf 90       	pop	r12
 816:	bf 90       	pop	r11
 818:	af 90       	pop	r10
 81a:	9f 90       	pop	r9
 81c:	8f 90       	pop	r8
 81e:	08 95       	ret

Disassembly of section .text.OLED_DrawBitmapRLE:

00000820 <OLED_DrawBitmapRLE>:
#endif

void OLED_DrawBitmapRLE(unsigned char Xpos, unsigned char Ypos, const unsigned char *CompressedBitmap, unsigned int RleLength)
{
 820:	4f 92       	push	r4
 822:	5f 92       	push	r5
 824:	6f 92       	push	r6
 826:	8f 92       	push	r8
 828:	9f 92       	push	r9
 82a:	af 92       	push	r10
 82c:	bf 92       	push	r11
 82e:	cf 92       	push	r12
 830:	df 92       	push	r13
 832:	ef 92       	push	r14
 834:	0f 93       	push	r16
 836:	1f 93       	push	r17
 838:	cf 93       	push	r28
 83a:	df 93       	push	r29
 83c:	69 01       	movw	r12, r18
 83e:	e4 2e       	mov	r14, r20
 840:	48 01       	movw	r8, r16
	unsigned char NumOfRawsInBitmap, NumOfBytes,ByteValue;
	
	//	(Hight%8 == 0) ? NumOfRawsInBitmap = Hight/8 : NumOfRawsInBitmap = Hight/8+1;
	
   OLED_SetCursor(0,0);
 842:	60 e0       	ldi	r22, 0x00	; 0
 844:	80 e0       	ldi	r24, 0x00	; 0
 846:	f8 d0       	rcall	.+496    	; 0xa38 <OLED_SetCursor>
   
   oledSendStart(SSD1306_ADDRESS);
 848:	8c e3       	ldi	r24, 0x3C	; 60
 84a:	64 d1       	rcall	.+712    	; 0xb14 <oledSendStart>
   oledSendByte(SSD1306_DATA_CONTINUE);
 84c:	80 e4       	ldi	r24, 0x40	; 64
 84e:	80 d1       	rcall	.+768    	; 0xb50 <oledSendByte>
   
   	for (unsigned int i=0; i< RleLength/2; i++)
 850:	a1 2c       	mov	r10, r1
 852:	b1 2c       	mov	r11, r1
 854:	1e c0       	rjmp	.+60     	; 0x892 <OLED_DrawBitmapRLE+0x72>
	{
		NumOfBytes = *CompressedBitmap++;
 856:	f6 01       	movw	r30, r12
 858:	d4 91       	lpm	r29, Z
 85a:	e7 fc       	sbrc	r14, 7
 85c:	d0 81       	ld	r29, Z
		ByteValue = *CompressedBitmap++;
 85e:	26 01       	movw	r4, r12
 860:	6e 2c       	mov	r6, r14
 862:	82 e0       	ldi	r24, 0x02	; 2
 864:	48 0e       	add	r4, r24
 866:	51 1c       	adc	r5, r1
 868:	61 1c       	adc	r6, r1
 86a:	8f ef       	ldi	r24, 0xFF	; 255
 86c:	c8 1a       	sub	r12, r24
 86e:	d8 0a       	sbc	r13, r24
 870:	e8 0a       	sbc	r14, r24
 872:	f6 01       	movw	r30, r12
 874:	14 91       	lpm	r17, Z
 876:	e7 fc       	sbrc	r14, 7
 878:	10 81       	ld	r17, Z
		
		for (unsigned char x=0; x < NumOfBytes; x++)
 87a:	c0 e0       	ldi	r28, 0x00	; 0
 87c:	03 c0       	rjmp	.+6      	; 0x884 <OLED_DrawBitmapRLE+0x64>
		oledSendByte (ByteValue);
 87e:	81 2f       	mov	r24, r17
 880:	67 d1       	rcall	.+718    	; 0xb50 <oledSendByte>
   	for (unsigned int i=0; i< RleLength/2; i++)
	{
		NumOfBytes = *CompressedBitmap++;
		ByteValue = *CompressedBitmap++;
		
		for (unsigned char x=0; x < NumOfBytes; x++)
 882:	cf 5f       	subi	r28, 0xFF	; 255
 884:	cd 17       	cp	r28, r29
 886:	d8 f3       	brcs	.-10     	; 0x87e <OLED_DrawBitmapRLE+0x5e>
   OLED_SetCursor(0,0);
   
   oledSendStart(SSD1306_ADDRESS);
   oledSendByte(SSD1306_DATA_CONTINUE);
   
   	for (unsigned int i=0; i< RleLength/2; i++)
 888:	8f ef       	ldi	r24, 0xFF	; 255
 88a:	a8 1a       	sub	r10, r24
 88c:	b8 0a       	sbc	r11, r24
	{
		NumOfBytes = *CompressedBitmap++;
		ByteValue = *CompressedBitmap++;
 88e:	e6 2c       	mov	r14, r6
 890:	62 01       	movw	r12, r4
   OLED_SetCursor(0,0);
   
   oledSendStart(SSD1306_ADDRESS);
   oledSendByte(SSD1306_DATA_CONTINUE);
   
   	for (unsigned int i=0; i< RleLength/2; i++)
 892:	c4 01       	movw	r24, r8
 894:	96 95       	lsr	r25
 896:	87 95       	ror	r24
 898:	a8 16       	cp	r10, r24
 89a:	b9 06       	cpc	r11, r25
 89c:	e0 f2       	brcs	.-72     	; 0x856 <OLED_DrawBitmapRLE+0x36>
		
		for (unsigned char x=0; x < NumOfBytes; x++)
		oledSendByte (ByteValue);
	}
	
}
 89e:	df 91       	pop	r29
 8a0:	cf 91       	pop	r28
 8a2:	1f 91       	pop	r17
 8a4:	0f 91       	pop	r16
 8a6:	ef 90       	pop	r14
 8a8:	df 90       	pop	r13
 8aa:	cf 90       	pop	r12
 8ac:	bf 90       	pop	r11
 8ae:	af 90       	pop	r10
 8b0:	9f 90       	pop	r9
 8b2:	8f 90       	pop	r8
 8b4:	6f 90       	pop	r6
 8b6:	5f 90       	pop	r5
 8b8:	4f 90       	pop	r4
 8ba:	08 95       	ret

Disassembly of section .text.__dummy_fini:

00000b56 <_fini>:
 b56:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00000b58 <__funcs_on_exit>:
 b58:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00000b5a <__simulator_exit>:
 b5a:	08 95       	ret

Disassembly of section .text.exit:

00000b32 <exit>:
 b32:	ec 01       	movw	r28, r24
 b34:	11 d0       	rcall	.+34     	; 0xb58 <__funcs_on_exit>
 b36:	0f d0       	rcall	.+30     	; 0xb56 <_fini>
 b38:	ce 01       	movw	r24, r28
 b3a:	0f d0       	rcall	.+30     	; 0xb5a <__simulator_exit>
 b3c:	ce 01       	movw	r24, r28
 b3e:	0e d0       	rcall	.+28     	; 0xb5c <_Exit>

Disassembly of section .text._Exit:

00000b5c <_Exit>:
 b5c:	93 da       	rcall	.-2778   	; 0x84 <_exit>
