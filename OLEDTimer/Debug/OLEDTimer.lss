
OLEDTimer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000088  00000000  00000000  00000134  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000088  000003f2  2**0
                  ALLOC
  2 .bss          000000a9  00800060  00800060  00000b26  2**0
                  ALLOC
  3 .comment      0000002f  00000000  00000000  00000b26  2**0
                  CONTENTS, READONLY
  4 .stack.descriptors.hdr 0000000e  00000000  00000000  00000b55  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000120  00000000  00000000  00000b63  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001ffe  00000000  00000000  00000c83  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000866  00000000  00000000  00002c81  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000aed  00000000  00000000  000034e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000374  00000000  00000000  00003fd4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028c  00000000  00000000  00004348  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000db2  00000000  00000000  000045d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  00005386  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .text         00000002  000009e2  000009e2  00000b16  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00005490  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .text.i2c_init 0000000c  000009c2  000009c2  00000af6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.i2c_tx_start 00000024  0000093e  0000093e  00000a72  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.i2c_tx_address 00000048  000008b8  000008b8  000009ec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.i2c_tx_byte 0000001e  00000962  00000962  00000a96  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.i2c_tx_stop 0000000e  000009a6  000009a6  00000ada  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .bss.masterMode 00000001  0080010f  0080010f  00000b26  2**0
                  ALLOC
 21 .text.TimerFinished 0000000c  000009ce  000009ce  00000b02  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.main    00000162  0000042a  0000042a  0000055e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .data.SevenSegments_struc 00000006  00800109  000009ec  00000b20  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 24 .progmemx.data.SevenSegments11x19 0000016b  000002be  000002be  000003f2  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 25 .progmemx.data.CathClockMainScreenRLE 00000236  00000088  00000088  000001bc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 26 .text.oledSendStart 00000010  00000996  00000996  00000aca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.oledSendStop 00000004  000009da  000009da  00000b0e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.oledSendByte 00000004  000009de  000009de  00000b12  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.oledSendCommand 00000016  00000980  00000980  00000ab4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.OLED_Clear 0000005e  0000085a  0000085a  0000098e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.OLED_Init 0000006a  000007f0  000007f0  00000924  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.OLED_SetCursor 0000003e  00000900  00000900  00000a34  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text.OLED_WriteChar 00000120  0000058c  0000058c  000006c0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text.OLED_WriteTwoDigitNumber 000000a8  000006ac  000006ac  000007e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text.OLED_DrawBitmapRLE 0000009c  00000754  00000754  00000888  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .text.__dummy_fini 00000002  000009e4  000009e4  00000b18  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .text.__dummy_funcs_on_exit 00000002  000009e6  000009e6  00000b1a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 38 .text.__dummy_simulator_exit 00000002  000009e8  000009e8  00000b1c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 .text.exit    0000000e  000009b4  000009b4  00000ae8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 40 .text._Exit   00000002  000009ea  000009ea  00000b1e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	1b c0       	rjmp	.+54     	; 0x38 <__ctors_end>
   2:	ef c4       	rjmp	.+2526   	; 0x9e2 <__bad_interrupt>
   4:	ee c4       	rjmp	.+2524   	; 0x9e2 <__bad_interrupt>
   6:	ed c4       	rjmp	.+2522   	; 0x9e2 <__bad_interrupt>
   8:	ec c4       	rjmp	.+2520   	; 0x9e2 <__bad_interrupt>
   a:	eb c4       	rjmp	.+2518   	; 0x9e2 <__bad_interrupt>
   c:	ea c4       	rjmp	.+2516   	; 0x9e2 <__bad_interrupt>
   e:	e9 c4       	rjmp	.+2514   	; 0x9e2 <__bad_interrupt>
  10:	e8 c4       	rjmp	.+2512   	; 0x9e2 <__bad_interrupt>
  12:	e7 c4       	rjmp	.+2510   	; 0x9e2 <__bad_interrupt>
  14:	e6 c4       	rjmp	.+2508   	; 0x9e2 <__bad_interrupt>
  16:	e5 c4       	rjmp	.+2506   	; 0x9e2 <__bad_interrupt>
  18:	e4 c4       	rjmp	.+2504   	; 0x9e2 <__bad_interrupt>
  1a:	e3 c4       	rjmp	.+2502   	; 0x9e2 <__bad_interrupt>
  1c:	e2 c4       	rjmp	.+2500   	; 0x9e2 <__bad_interrupt>
  1e:	e1 c4       	rjmp	.+2498   	; 0x9e2 <__bad_interrupt>
  20:	e0 c4       	rjmp	.+2496   	; 0x9e2 <__bad_interrupt>
  22:	df c4       	rjmp	.+2494   	; 0x9e2 <__bad_interrupt>
  24:	de c4       	rjmp	.+2492   	; 0x9e2 <__bad_interrupt>

00000026 <.dinit>:
  26:	00 60       	ori	r16, 0x00	; 0
  28:	01 09       	sbc	r16, r1
  2a:	80 01       	movw	r16, r0
  2c:	09 01       	movw	r0, r18
  2e:	0f 00       	.word	0x000f	; ????
  30:	09 ec       	ldi	r16, 0xC9	; 201
  32:	01 0f       	add	r16, r17
  34:	01 10       	cpse	r0, r1
  36:	80 00       	.word	0x0080	; ????

00000038 <__ctors_end>:
  38:	11 24       	eor	r1, r1
  3a:	1f be       	out	0x3f, r1	; 63
  3c:	cf e5       	ldi	r28, 0x5F	; 95
  3e:	d4 e0       	ldi	r29, 0x04	; 4
  40:	de bf       	out	0x3e, r29	; 62
  42:	cd bf       	out	0x3d, r28	; 61

00000044 <__do_copy_data>:
  44:	e6 e2       	ldi	r30, 0x26	; 38
  46:	f0 e0       	ldi	r31, 0x00	; 0
  48:	40 e0       	ldi	r20, 0x00	; 0
  4a:	17 c0       	rjmp	.+46     	; 0x7a <__do_clear_bss+0x8>
  4c:	b5 91       	lpm	r27, Z+
  4e:	a5 91       	lpm	r26, Z+
  50:	35 91       	lpm	r19, Z+
  52:	25 91       	lpm	r18, Z+
  54:	05 91       	lpm	r16, Z+
  56:	07 fd       	sbrc	r16, 7
  58:	0c c0       	rjmp	.+24     	; 0x72 <__do_clear_bss>
  5a:	95 91       	lpm	r25, Z+
  5c:	85 91       	lpm	r24, Z+
  5e:	ef 01       	movw	r28, r30
  60:	f9 2f       	mov	r31, r25
  62:	e8 2f       	mov	r30, r24
  64:	05 90       	lpm	r0, Z+
  66:	0d 92       	st	X+, r0
  68:	a2 17       	cp	r26, r18
  6a:	b3 07       	cpc	r27, r19
  6c:	d9 f7       	brne	.-10     	; 0x64 <__do_copy_data+0x20>
  6e:	fe 01       	movw	r30, r28
  70:	04 c0       	rjmp	.+8      	; 0x7a <__do_clear_bss+0x8>

00000072 <__do_clear_bss>:
  72:	1d 92       	st	X+, r1
  74:	a2 17       	cp	r26, r18
  76:	b3 07       	cpc	r27, r19
  78:	e1 f7       	brne	.-8      	; 0x72 <__do_clear_bss>
  7a:	e7 33       	cpi	r30, 0x37	; 55
  7c:	f4 07       	cpc	r31, r20
  7e:	31 f7       	brne	.-52     	; 0x4c <__do_copy_data+0x8>
  80:	d4 d1       	rcall	.+936    	; 0x42a <main>
  82:	98 c4       	rjmp	.+2352   	; 0x9b4 <exit>

00000084 <_exit>:
  84:	f8 94       	cli

00000086 <__stop_program>:
  86:	ff cf       	rjmp	.-2      	; 0x86 <__stop_program>

Disassembly of section .text:

000009e2 <__bad_interrupt>:
 9e2:	0e cb       	rjmp	.-2532   	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.i2c_init:

000009c2 <i2c_init>:

static bool masterMode;

void i2c_init(void)
{
    TWSR &= ~((1 << TWPS1) | (1 << TWPS0)); // pre-scalar 1
 9c2:	81 b1       	in	r24, 0x01	; 1
 9c4:	8c 7f       	andi	r24, 0xFC	; 252
 9c6:	81 b9       	out	0x01, r24	; 1
    TWBR = 2; // I've changed it to 400k.. for fast disply... it was very slow display in 100k //((F_CPU / F_I2C) - 16) / 2; // baud rate factor 12
 9c8:	82 e0       	ldi	r24, 0x02	; 2
 9ca:	80 b9       	out	0x00, r24	; 0
 9cc:	08 95       	ret

Disassembly of section .text.i2c_tx_start:

0000093e <i2c_tx_start>:
    } else {
        status = TRANSMISSION_ERROR;
    }

    return status;
}
 93e:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <masterMode>
 942:	86 b7       	in	r24, 0x36	; 54
 944:	84 6a       	ori	r24, 0xA4	; 164
 946:	86 bf       	out	0x36, r24	; 54
 948:	06 b6       	in	r0, 0x36	; 54
 94a:	07 fe       	sbrs	r0, 7
 94c:	fd cf       	rjmp	.-6      	; 0x948 <i2c_tx_start+0xa>
 94e:	81 b1       	in	r24, 0x01	; 1
 950:	88 7f       	andi	r24, 0xF8	; 248
 952:	88 30       	cpi	r24, 0x08	; 8
 954:	11 f0       	breq	.+4      	; 0x95a <i2c_tx_start+0x1c>
 956:	80 31       	cpi	r24, 0x10	; 16
 958:	11 f4       	brne	.+4      	; 0x95e <i2c_tx_start+0x20>
 95a:	8f ef       	ldi	r24, 0xFF	; 255
 95c:	08 95       	ret
 95e:	8e ef       	ldi	r24, 0xFE	; 254
 960:	08 95       	ret

Disassembly of section .text.i2c_tx_address:

000008b8 <i2c_tx_address>:
 8b8:	90 e0       	ldi	r25, 0x00	; 0
 8ba:	88 0f       	add	r24, r24
 8bc:	99 1f       	adc	r25, r25
 8be:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <masterMode>
 8c2:	89 2b       	or	r24, r25
 8c4:	83 b9       	out	0x03, r24	; 3
 8c6:	84 e8       	ldi	r24, 0x84	; 132
 8c8:	86 bf       	out	0x36, r24	; 54
 8ca:	06 b6       	in	r0, 0x36	; 54
 8cc:	07 fe       	sbrs	r0, 7
 8ce:	fd cf       	rjmp	.-6      	; 0x8ca <i2c_tx_address+0x12>
 8d0:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <masterMode>
 8d4:	81 11       	cpse	r24, r1
 8d6:	06 c0       	rjmp	.+12     	; 0x8e4 <i2c_tx_address+0x2c>
 8d8:	81 b1       	in	r24, 0x01	; 1
 8da:	88 7f       	andi	r24, 0xF8	; 248
 8dc:	88 31       	cpi	r24, 0x18	; 24
 8de:	51 f4       	brne	.+20     	; 0x8f4 <i2c_tx_address+0x3c>
 8e0:	8f ef       	ldi	r24, 0xFF	; 255
 8e2:	08 95       	ret
 8e4:	81 30       	cpi	r24, 0x01	; 1
 8e6:	41 f4       	brne	.+16     	; 0x8f8 <i2c_tx_address+0x40>
 8e8:	81 b1       	in	r24, 0x01	; 1
 8ea:	88 7f       	andi	r24, 0xF8	; 248
 8ec:	80 34       	cpi	r24, 0x40	; 64
 8ee:	31 f4       	brne	.+12     	; 0x8fc <i2c_tx_address+0x44>
 8f0:	8f ef       	ldi	r24, 0xFF	; 255
 8f2:	08 95       	ret
 8f4:	8e ef       	ldi	r24, 0xFE	; 254
 8f6:	08 95       	ret
 8f8:	80 e0       	ldi	r24, 0x00	; 0
 8fa:	08 95       	ret
 8fc:	8e ef       	ldi	r24, 0xFE	; 254
 8fe:	08 95       	ret

Disassembly of section .text.i2c_tx_byte:

00000962 <i2c_tx_byte>:
 962:	83 b9       	out	0x03, r24	; 3
 964:	86 b7       	in	r24, 0x36	; 54
 966:	80 68       	ori	r24, 0x80	; 128
 968:	86 bf       	out	0x36, r24	; 54
 96a:	06 b6       	in	r0, 0x36	; 54
 96c:	07 fe       	sbrs	r0, 7
 96e:	fd cf       	rjmp	.-6      	; 0x96a <i2c_tx_byte+0x8>
 970:	81 b1       	in	r24, 0x01	; 1
 972:	88 7f       	andi	r24, 0xF8	; 248
 974:	88 32       	cpi	r24, 0x28	; 40
 976:	11 f4       	brne	.+4      	; 0x97c <i2c_tx_byte+0x1a>
 978:	8f ef       	ldi	r24, 0xFF	; 255
 97a:	08 95       	ret
 97c:	8e ef       	ldi	r24, 0xFE	; 254
 97e:	08 95       	ret

Disassembly of section .text.i2c_tx_stop:

000009a6 <i2c_tx_stop>:

void i2c_tx_stop(void)
{
    /* clear interrupt flag, issue stop command (cleared automatically) */
    TWCR |= (1 << TWINT) | (1 << TWSTO);
 9a6:	86 b7       	in	r24, 0x36	; 54
 9a8:	80 69       	ori	r24, 0x90	; 144
 9aa:	86 bf       	out	0x36, r24	; 54

    while ((TWCR & (1 << TWSTO))); // wait until stop transmitted
 9ac:	06 b6       	in	r0, 0x36	; 54
 9ae:	04 fc       	sbrc	r0, 4
 9b0:	fd cf       	rjmp	.-6      	; 0x9ac <i2c_tx_stop+0x6>
}
 9b2:	08 95       	ret

Disassembly of section .text.TimerFinished:

000009ce <TimerFinished>:

}

void TimerFinished ()
{
	Minuts = 2;
 9ce:	82 e0       	ldi	r24, 0x02	; 2
 9d0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	Seconds = 0;		
 9d4:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <Seconds>
 9d8:	08 95       	ret

Disassembly of section .text.main:

0000042a <main>:
unsigned char Buffer[55][3];


int main(void)
{
	DDRD = 0x01;
 42a:	81 e0       	ldi	r24, 0x01	; 1
 42c:	81 bb       	out	0x11, r24	; 17
	//OLED oled;
	Minuts = 2;
 42e:	82 e0       	ldi	r24, 0x02	; 2
 430:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	Seconds = 0;
 434:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <Seconds>
	
	OLED_Init();  //initialize the OLED
 438:	db d1       	rcall	.+950    	; 0x7f0 <OLED_Init>
	OLED_Clear(); //clear the display (for good measure)
 43a:	0f d2       	rcall	.+1054   	; 0x85a <OLED_Clear>
		
			OLED_SetCursor(0, 0);        //set the cursor position to (0, 0)
 43c:	60 e0       	ldi	r22, 0x00	; 0
 43e:	80 e0       	ldi	r24, 0x00	; 0
 440:	5f d2       	rcall	.+1214   	; 0x900 <OLED_SetCursor>
			OLED_DrawBitmapRLE (0,0,CathClockMainScreenRLE,566); //Print out some text
 442:	06 e3       	ldi	r16, 0x36	; 54
 444:	12 e0       	ldi	r17, 0x02	; 2
 446:	28 e8       	ldi	r18, 0x88	; 136
 448:	30 e0       	ldi	r19, 0x00	; 0
 44a:	40 e0       	ldi	r20, 0x00	; 0
 44c:	60 e0       	ldi	r22, 0x00	; 0
 44e:	80 e0       	ldi	r24, 0x00	; 0
 450:	81 d1       	rcall	.+770    	; 0x754 <OLED_DrawBitmapRLE>
			OLED_WriteTwoDigitNumber(SevenSegments_struc,37,4,02,false,false,false,false,false);
 452:	1f 92       	push	r1
 454:	1f 92       	push	r1
 456:	81 2c       	mov	r8, r1
 458:	a1 2c       	mov	r10, r1
 45a:	c1 2c       	mov	r12, r1
 45c:	68 94       	set
 45e:	ee 24       	eor	r14, r14
 460:	e1 f8       	bld	r14, 1
 462:	04 e0       	ldi	r16, 0x04	; 4
 464:	25 e2       	ldi	r18, 0x25	; 37
 466:	40 91 09 01 	lds	r20, 0x0109	; 0x800109 <_end>
 46a:	50 91 0a 01 	lds	r21, 0x010A	; 0x80010a <_end+0x1>
 46e:	60 91 0b 01 	lds	r22, 0x010B	; 0x80010b <_end+0x2>
 472:	70 91 0c 01 	lds	r23, 0x010C	; 0x80010c <_end+0x3>
 476:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <_end+0x4>
 47a:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <_end+0x5>
 47e:	16 d1       	rcall	.+556    	; 0x6ac <OLED_WriteTwoDigitNumber>
			OLED_WriteChar(SevenSegments_struc,59,4,':',false,false,false);
 480:	0f 2e       	mov	r0, r31
 482:	fa e3       	ldi	r31, 0x3A	; 58
 484:	ef 2e       	mov	r14, r31
 486:	f0 2d       	mov	r31, r0
 488:	2b e3       	ldi	r18, 0x3B	; 59
 48a:	40 91 09 01 	lds	r20, 0x0109	; 0x800109 <_end>
 48e:	50 91 0a 01 	lds	r21, 0x010A	; 0x80010a <_end+0x1>
 492:	60 91 0b 01 	lds	r22, 0x010B	; 0x80010b <_end+0x2>
 496:	70 91 0c 01 	lds	r23, 0x010C	; 0x80010c <_end+0x3>
 49a:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <_end+0x4>
 49e:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <_end+0x5>
 4a2:	74 d0       	rcall	.+232    	; 0x58c <OLED_WriteChar>
			OLED_WriteTwoDigitNumber(SevenSegments_struc,70,4,0,false,false,false,false,false);
 4a4:	1f 92       	push	r1
 4a6:	1f 92       	push	r1
 4a8:	e1 2c       	mov	r14, r1
 4aa:	26 e4       	ldi	r18, 0x46	; 70
 4ac:	40 91 09 01 	lds	r20, 0x0109	; 0x800109 <_end>
 4b0:	50 91 0a 01 	lds	r21, 0x010A	; 0x80010a <_end+0x1>
 4b4:	60 91 0b 01 	lds	r22, 0x010B	; 0x80010b <_end+0x2>
 4b8:	70 91 0c 01 	lds	r23, 0x010C	; 0x80010c <_end+0x3>
 4bc:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <_end+0x4>
 4c0:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <_end+0x5>
 4c4:	f3 d0       	rcall	.+486    	; 0x6ac <OLED_WriteTwoDigitNumber>
 4c6:	0f 90       	pop	r0
 4c8:	0f 90       	pop	r0
 4ca:	0f 90       	pop	r0
 4cc:	0f 90       	pop	r0
	
	
	while (1)
	{
		PORTD ^= 0x01;
 4ce:	92 b3       	in	r25, 0x12	; 18
 4d0:	81 e0       	ldi	r24, 0x01	; 1
 4d2:	89 27       	eor	r24, r25
 4d4:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4d6:	2f ef       	ldi	r18, 0xFF	; 255
 4d8:	89 e6       	ldi	r24, 0x69	; 105
 4da:	98 e1       	ldi	r25, 0x18	; 24
 4dc:	21 50       	subi	r18, 0x01	; 1
 4de:	80 40       	sbci	r24, 0x00	; 0
 4e0:	90 40       	sbci	r25, 0x00	; 0
 4e2:	e1 f7       	brne	.-8      	; 0x4dc <__stack+0x7d>
 4e4:	00 c0       	rjmp	.+0      	; 0x4e6 <__stack+0x87>
 4e6:	00 00       	nop
		_delay_ms (1000);
			
		if (--Seconds == 255)
 4e8:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <Seconds>
 4ec:	81 50       	subi	r24, 0x01	; 1
 4ee:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <Seconds>
 4f2:	8f 3f       	cpi	r24, 0xFF	; 255
 4f4:	61 f4       	brne	.+24     	; 0x50e <__stack+0xaf>
		{
			if (--Minuts == 255)
 4f6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 4fa:	81 50       	subi	r24, 0x01	; 1
 4fc:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 500:	8f 3f       	cpi	r24, 0xFF	; 255
 502:	11 f4       	brne	.+4      	; 0x508 <__stack+0xa9>
				TimerFinished();
 504:	64 d2       	rcall	.+1224   	; 0x9ce <TimerFinished>
 506:	03 c0       	rjmp	.+6      	; 0x50e <__stack+0xaf>
			else
				Seconds = 59;
 508:	8b e3       	ldi	r24, 0x3B	; 59
 50a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <Seconds>
	
	
			
		//OLED_SetCursor(0, 0);        //set the cursor position to (0, 0)
		//OLED_DrawBitmapRLE (0,0,CathClockMainScreenRLE,566); //Print out some text
		OLED_WriteTwoDigitNumber(SevenSegments_struc,37,4,Minuts,false,false,false,false,false);
 50e:	1f 92       	push	r1
 510:	1f 92       	push	r1
 512:	81 2c       	mov	r8, r1
 514:	a1 2c       	mov	r10, r1
 516:	c1 2c       	mov	r12, r1
 518:	e0 90 60 00 	lds	r14, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 51c:	04 e0       	ldi	r16, 0x04	; 4
 51e:	25 e2       	ldi	r18, 0x25	; 37
 520:	40 91 09 01 	lds	r20, 0x0109	; 0x800109 <_end>
 524:	50 91 0a 01 	lds	r21, 0x010A	; 0x80010a <_end+0x1>
 528:	60 91 0b 01 	lds	r22, 0x010B	; 0x80010b <_end+0x2>
 52c:	70 91 0c 01 	lds	r23, 0x010C	; 0x80010c <_end+0x3>
 530:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <_end+0x4>
 534:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <_end+0x5>
 538:	b9 d0       	rcall	.+370    	; 0x6ac <OLED_WriteTwoDigitNumber>
		OLED_WriteChar(SevenSegments_struc,59,4,':',false,false,false);
 53a:	0f 2e       	mov	r0, r31
 53c:	fa e3       	ldi	r31, 0x3A	; 58
 53e:	ef 2e       	mov	r14, r31
 540:	f0 2d       	mov	r31, r0
 542:	2b e3       	ldi	r18, 0x3B	; 59
 544:	40 91 09 01 	lds	r20, 0x0109	; 0x800109 <_end>
 548:	50 91 0a 01 	lds	r21, 0x010A	; 0x80010a <_end+0x1>
 54c:	60 91 0b 01 	lds	r22, 0x010B	; 0x80010b <_end+0x2>
 550:	70 91 0c 01 	lds	r23, 0x010C	; 0x80010c <_end+0x3>
 554:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <_end+0x4>
 558:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <_end+0x5>
 55c:	17 d0       	rcall	.+46     	; 0x58c <OLED_WriteChar>
		OLED_WriteTwoDigitNumber(SevenSegments_struc,70,4,Seconds,false,false,false,false,false);
 55e:	1f 92       	push	r1
 560:	1f 92       	push	r1
 562:	e0 90 06 01 	lds	r14, 0x0106	; 0x800106 <Seconds>
 566:	26 e4       	ldi	r18, 0x46	; 70
 568:	40 91 09 01 	lds	r20, 0x0109	; 0x800109 <_end>
 56c:	50 91 0a 01 	lds	r21, 0x010A	; 0x80010a <_end+0x1>
 570:	60 91 0b 01 	lds	r22, 0x010B	; 0x80010b <_end+0x2>
 574:	70 91 0c 01 	lds	r23, 0x010C	; 0x80010c <_end+0x3>
 578:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <_end+0x4>
 57c:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <_end+0x5>
 580:	95 d0       	rcall	.+298    	; 0x6ac <OLED_WriteTwoDigitNumber>
	}
 582:	0f 90       	pop	r0
 584:	0f 90       	pop	r0
 586:	0f 90       	pop	r0
 588:	0f 90       	pop	r0
 58a:	a1 cf       	rjmp	.-190    	; 0x4ce <__stack+0x6f>

Disassembly of section .text.oledSendStart:

00000996 <oledSendStart>:

/********************************************************************************
 Local FUnctions for sending the command/data
 ********************************************************************************/

void oledSendStart(uint8_t address){
 996:	cf 93       	push	r28
 998:	c8 2f       	mov	r28, r24

    
    i2c_tx_start(MASTER_TRANSMITTER);
 99a:	80 e0       	ldi	r24, 0x00	; 0
 99c:	d0 df       	rcall	.-96     	; 0x93e <i2c_tx_start>
    i2c_tx_address(address);
 99e:	8c 2f       	mov	r24, r28
 9a0:	8b df       	rcall	.-234    	; 0x8b8 <i2c_tx_address>
}
 9a2:	cf 91       	pop	r28
 9a4:	08 95       	ret

Disassembly of section .text.oledSendStop:

000009da <oledSendStop>:


void oledSendStop(void){

    i2c_tx_stop();
 9da:	e5 df       	rcall	.-54     	; 0x9a6 <i2c_tx_stop>
 9dc:	08 95       	ret

Disassembly of section .text.oledSendByte:

000009de <oledSendByte>:


void oledSendByte(uint8_t ch){

    
    i2c_tx_byte(ch);
 9de:	c1 df       	rcall	.-126    	; 0x962 <i2c_tx_byte>
 9e0:	08 95       	ret

Disassembly of section .text.oledSendCommand:

00000980 <oledSendCommand>:
    
}


void oledSendCommand(uint8_t cmd){
 980:	cf 93       	push	r28
 982:	c8 2f       	mov	r28, r24
    //oledSendStart(SSD1306_ADDRESS<<1);
    oledSendStart(SSD1306_ADDRESS);
 984:	8c e3       	ldi	r24, 0x3C	; 60
 986:	07 d0       	rcall	.+14     	; 0x996 <oledSendStart>
    oledSendByte(SSD1306_COMMAND);
 988:	80 e0       	ldi	r24, 0x00	; 0
 98a:	29 d0       	rcall	.+82     	; 0x9de <oledSendByte>
    oledSendByte(cmd);
 98c:	8c 2f       	mov	r24, r28
 98e:	27 d0       	rcall	.+78     	; 0x9de <oledSendByte>
    oledSendStop();
 990:	24 d0       	rcall	.+72     	; 0x9da <oledSendStop>
}
 992:	cf 91       	pop	r28
 994:	08 95       	ret

Disassembly of section .text.OLED_Clear:

0000085a <OLED_Clear>:
 * I/P Arguments: none.
 * Return value    : none
 * description  :This function clears the LCD and moves the cursor to beginning of first line
 ****************************************************************************************************/
void OLED_Clear()
{
 85a:	cf 93       	push	r28
 85c:	df 93       	push	r29
    int i;
    
    oledSendCommand(SSD1306_SET_COLUMN_ADDR);
 85e:	81 e2       	ldi	r24, 0x21	; 33
 860:	8f d0       	rcall	.+286    	; 0x980 <oledSendCommand>
    oledSendCommand(0);
 862:	80 e0       	ldi	r24, 0x00	; 0
 864:	8d d0       	rcall	.+282    	; 0x980 <oledSendCommand>
    oledSendCommand(127);
 866:	8f e7       	ldi	r24, 0x7F	; 127
 868:	8b d0       	rcall	.+278    	; 0x980 <oledSendCommand>
    
    oledSendCommand(SSD1306_SET_PAGE_ADDR);
 86a:	82 e2       	ldi	r24, 0x22	; 34
 86c:	89 d0       	rcall	.+274    	; 0x980 <oledSendCommand>
    oledSendCommand(0);
 86e:	80 e0       	ldi	r24, 0x00	; 0
 870:	87 d0       	rcall	.+270    	; 0x980 <oledSendCommand>
    oledSendCommand(7);
 872:	87 e0       	ldi	r24, 0x07	; 7
 874:	85 d0       	rcall	.+266    	; 0x980 <oledSendCommand>
    
    
    oledSendStart(SSD1306_ADDRESS);
 876:	8c e3       	ldi	r24, 0x3C	; 60
 878:	8e d0       	rcall	.+284    	; 0x996 <oledSendStart>
    oledSendByte(SSD1306_DATA_CONTINUE);
 87a:	80 e4       	ldi	r24, 0x40	; 64
 87c:	b0 d0       	rcall	.+352    	; 0x9de <oledSendByte>
    
    for (i=0; i<1024; i++)      // Write Zeros to clear the display
 87e:	c0 e0       	ldi	r28, 0x00	; 0
 880:	d0 e0       	ldi	r29, 0x00	; 0
 882:	03 c0       	rjmp	.+6      	; 0x88a <OLED_Clear+0x30>
    {
        oledSendByte(0);
 884:	80 e0       	ldi	r24, 0x00	; 0
 886:	ab d0       	rcall	.+342    	; 0x9de <oledSendByte>
    
    
    oledSendStart(SSD1306_ADDRESS);
    oledSendByte(SSD1306_DATA_CONTINUE);
    
    for (i=0; i<1024; i++)      // Write Zeros to clear the display
 888:	21 96       	adiw	r28, 0x01	; 1
 88a:	c1 15       	cp	r28, r1
 88c:	84 e0       	ldi	r24, 0x04	; 4
 88e:	d8 07       	cpc	r29, r24
 890:	cc f3       	brlt	.-14     	; 0x884 <OLED_Clear+0x2a>
    {
        oledSendByte(0);
    }
    
    oledSendCommand(SSD1306_SET_COLUMN_ADDR);
 892:	81 e2       	ldi	r24, 0x21	; 33
 894:	75 d0       	rcall	.+234    	; 0x980 <oledSendCommand>
    oledSendCommand(0);
 896:	80 e0       	ldi	r24, 0x00	; 0
 898:	73 d0       	rcall	.+230    	; 0x980 <oledSendCommand>
    oledSendCommand(127);
 89a:	8f e7       	ldi	r24, 0x7F	; 127
 89c:	71 d0       	rcall	.+226    	; 0x980 <oledSendCommand>
    
    oledSendCommand(SSD1306_SET_PAGE_ADDR);
 89e:	82 e2       	ldi	r24, 0x22	; 34
 8a0:	6f d0       	rcall	.+222    	; 0x980 <oledSendCommand>
    oledSendCommand(0);
 8a2:	80 e0       	ldi	r24, 0x00	; 0
 8a4:	6d d0       	rcall	.+218    	; 0x980 <oledSendCommand>
    oledSendCommand(7);
 8a6:	87 e0       	ldi	r24, 0x07	; 7
 8a8:	6b d0       	rcall	.+214    	; 0x980 <oledSendCommand>
    
    oledSendStart(SSD1306_ADDRESS);
 8aa:	8c e3       	ldi	r24, 0x3C	; 60
 8ac:	74 d0       	rcall	.+232    	; 0x996 <oledSendStart>
    oledSendByte(SSD1306_DATA_CONTINUE);
 8ae:	80 e4       	ldi	r24, 0x40	; 64
 8b0:	96 d0       	rcall	.+300    	; 0x9de <oledSendByte>
}
 8b2:	df 91       	pop	r29
 8b4:	cf 91       	pop	r28
 8b6:	08 95       	ret

Disassembly of section .text.OLED_Init:

000007f0 <OLED_Init>:
 * description  :This function is used to initialize the OLED in the normal mode.
 After initializing the OLED, It clears the OLED and sets the cursor to first line first position. .
 **************************************************************************************************/
void OLED_Init(void)
{
    i2c_init();
 7f0:	e8 d0       	rcall	.+464    	; 0x9c2 <i2c_init>
    
    oledSendCommand(SSD1306_DISPLAY_OFF);
 7f2:	8e ea       	ldi	r24, 0xAE	; 174
 7f4:	c5 d0       	rcall	.+394    	; 0x980 <oledSendCommand>
    oledSendCommand(SSD1306_SET_DISPLAY_CLOCK_DIV_RATIO);
 7f6:	85 ed       	ldi	r24, 0xD5	; 213
 7f8:	c3 d0       	rcall	.+390    	; 0x980 <oledSendCommand>
    oledSendCommand(0x80);
 7fa:	80 e8       	ldi	r24, 0x80	; 128
 7fc:	c1 d0       	rcall	.+386    	; 0x980 <oledSendCommand>
    oledSendCommand(SSD1306_SET_MULTIPLEX_RATIO);
 7fe:	88 ea       	ldi	r24, 0xA8	; 168
 800:	bf d0       	rcall	.+382    	; 0x980 <oledSendCommand>
    oledSendCommand(0x3F);
 802:	8f e3       	ldi	r24, 0x3F	; 63
 804:	bd d0       	rcall	.+378    	; 0x980 <oledSendCommand>
    oledSendCommand(SSD1306_SET_DISPLAY_OFFSET);
 806:	83 ed       	ldi	r24, 0xD3	; 211
 808:	bb d0       	rcall	.+374    	; 0x980 <oledSendCommand>
    oledSendCommand(0x0);
 80a:	80 e0       	ldi	r24, 0x00	; 0
 80c:	b9 d0       	rcall	.+370    	; 0x980 <oledSendCommand>
    oledSendCommand(SSD1306_SET_START_LINE | 0x0);
 80e:	80 e4       	ldi	r24, 0x40	; 64
 810:	b7 d0       	rcall	.+366    	; 0x980 <oledSendCommand>
    oledSendCommand(SSD1306_CHARGE_PUMP);
 812:	8d e8       	ldi	r24, 0x8D	; 141
 814:	b5 d0       	rcall	.+362    	; 0x980 <oledSendCommand>
    oledSendCommand(0x14);
 816:	84 e1       	ldi	r24, 0x14	; 20
 818:	b3 d0       	rcall	.+358    	; 0x980 <oledSendCommand>
    oledSendCommand(SSD1306_MEMORY_ADDR_MODE);
 81a:	80 e2       	ldi	r24, 0x20	; 32
 81c:	b1 d0       	rcall	.+354    	; 0x980 <oledSendCommand>
    oledSendCommand(0x00);
 81e:	80 e0       	ldi	r24, 0x00	; 0
 820:	af d0       	rcall	.+350    	; 0x980 <oledSendCommand>
    oledSendCommand(SSD1306_SET_SEGMENT_REMAP | 0x1);
 822:	81 ea       	ldi	r24, 0xA1	; 161
 824:	ad d0       	rcall	.+346    	; 0x980 <oledSendCommand>
    oledSendCommand(SSD1306_COM_SCAN_DIR_DEC);
 826:	88 ec       	ldi	r24, 0xC8	; 200
 828:	ab d0       	rcall	.+342    	; 0x980 <oledSendCommand>
    oledSendCommand(SSD1306_SET_COM_PINS);
 82a:	8a ed       	ldi	r24, 0xDA	; 218
 82c:	a9 d0       	rcall	.+338    	; 0x980 <oledSendCommand>
    oledSendCommand(0x12);
 82e:	82 e1       	ldi	r24, 0x12	; 18
 830:	a7 d0       	rcall	.+334    	; 0x980 <oledSendCommand>
    oledSendCommand(SSD1306_SET_CONTRAST_CONTROL);
 832:	81 e8       	ldi	r24, 0x81	; 129
 834:	a5 d0       	rcall	.+330    	; 0x980 <oledSendCommand>
    oledSendCommand(0xCF);
 836:	8f ec       	ldi	r24, 0xCF	; 207
 838:	a3 d0       	rcall	.+326    	; 0x980 <oledSendCommand>
    oledSendCommand(SSD1306_SET_PRECHARGE_PERIOD);
 83a:	89 ed       	ldi	r24, 0xD9	; 217
 83c:	a1 d0       	rcall	.+322    	; 0x980 <oledSendCommand>
    oledSendCommand(0xF1);
 83e:	81 ef       	ldi	r24, 0xF1	; 241
 840:	9f d0       	rcall	.+318    	; 0x980 <oledSendCommand>
    oledSendCommand(SSD1306_SET_VCOM_DESELECT);
 842:	8b ed       	ldi	r24, 0xDB	; 219
 844:	9d d0       	rcall	.+314    	; 0x980 <oledSendCommand>
    oledSendCommand(0x40);
 846:	80 e4       	ldi	r24, 0x40	; 64
 848:	9b d0       	rcall	.+310    	; 0x980 <oledSendCommand>
    oledSendCommand(SSD1306_DISPLAY_ALL_ON_RESUME);
 84a:	84 ea       	ldi	r24, 0xA4	; 164
 84c:	99 d0       	rcall	.+306    	; 0x980 <oledSendCommand>
    oledSendCommand(SSD1306_NORMAL_DISPLAY);
 84e:	86 ea       	ldi	r24, 0xA6	; 166
 850:	97 d0       	rcall	.+302    	; 0x980 <oledSendCommand>
    oledSendCommand(SSD1306_DISPLAY_ON);
 852:	8f ea       	ldi	r24, 0xAF	; 175
 854:	95 d0       	rcall	.+298    	; 0x980 <oledSendCommand>
    
    OLED_Clear();  /* Clear the complete LCD during init */
 856:	01 d0       	rcall	.+2      	; 0x85a <OLED_Clear>
 858:	08 95       	ret

Disassembly of section .text.OLED_SetCursor:

00000900 <OLED_SetCursor>:
 * description  :This function moves the Cursor to specified position
 Note:If the Input(Line/Char number) are out of range
 then no action will be taken
 ****************************************************************************************************/
void OLED_SetCursor(uint8_t lineNumber,uint8_t cursorPosition)
{
 900:	cf 93       	push	r28
 902:	df 93       	push	r29
    /* Move the Cursor to specified position only if it is in range */
    if((lineNumber <= C_OledLastLine_U8) && (cursorPosition <= 127))
 904:	88 30       	cpi	r24, 0x08	; 8
 906:	c0 f4       	brcc	.+48     	; 0x938 <OLED_SetCursor+0x38>
 908:	66 23       	and	r22, r22
 90a:	b4 f0       	brlt	.+44     	; 0x938 <OLED_SetCursor+0x38>
 90c:	d6 2f       	mov	r29, r22
 90e:	c8 2f       	mov	r28, r24
    {
        OledLineNum=lineNumber;   /* Save the specified line number */
 910:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <OledLineNum>
        OledCursorPos=cursorPosition; /* Save the specified cursor position */
 914:	60 93 08 01 	sts	0x0108, r22	; 0x800108 <OledCursorPos>
        
        oledSendCommand(SSD1306_SET_COLUMN_ADDR);
 918:	81 e2       	ldi	r24, 0x21	; 33
 91a:	32 d0       	rcall	.+100    	; 0x980 <oledSendCommand>
        oledSendCommand(cursorPosition);
 91c:	8d 2f       	mov	r24, r29
 91e:	30 d0       	rcall	.+96     	; 0x980 <oledSendCommand>
        oledSendCommand(127);
 920:	8f e7       	ldi	r24, 0x7F	; 127
 922:	2e d0       	rcall	.+92     	; 0x980 <oledSendCommand>
        
        oledSendCommand(SSD1306_SET_PAGE_ADDR);
 924:	82 e2       	ldi	r24, 0x22	; 34
 926:	2c d0       	rcall	.+88     	; 0x980 <oledSendCommand>
        oledSendCommand(lineNumber);
 928:	8c 2f       	mov	r24, r28
 92a:	2a d0       	rcall	.+84     	; 0x980 <oledSendCommand>
        oledSendCommand(7);
 92c:	87 e0       	ldi	r24, 0x07	; 7
 92e:	28 d0       	rcall	.+80     	; 0x980 <oledSendCommand>
        
        oledSendStart(SSD1306_ADDRESS);
 930:	8c e3       	ldi	r24, 0x3C	; 60
 932:	31 d0       	rcall	.+98     	; 0x996 <oledSendStart>
        oledSendByte(SSD1306_DATA_CONTINUE);
 934:	80 e4       	ldi	r24, 0x40	; 64
 936:	53 d0       	rcall	.+166    	; 0x9de <oledSendByte>
    }
}
 938:	df 91       	pop	r29
 93a:	cf 91       	pop	r28
 93c:	08 95       	ret

Disassembly of section .text.OLED_WriteChar:

0000058c <OLED_WriteChar>:
    
    for ( i=0; i<1024; i++)      // Send data
    {
        oledSendByte(ptr_Logo[i]);
    }
}
 58c:	2f 92       	push	r2
 58e:	3f 92       	push	r3
 590:	4f 92       	push	r4
 592:	5f 92       	push	r5
 594:	6f 92       	push	r6
 596:	7f 92       	push	r7
 598:	8f 92       	push	r8
 59a:	9f 92       	push	r9
 59c:	af 92       	push	r10
 59e:	bf 92       	push	r11
 5a0:	cf 92       	push	r12
 5a2:	df 92       	push	r13
 5a4:	ef 92       	push	r14
 5a6:	ff 92       	push	r15
 5a8:	0f 93       	push	r16
 5aa:	1f 93       	push	r17
 5ac:	cf 93       	push	r28
 5ae:	df 93       	push	r29
 5b0:	00 d0       	rcall	.+0      	; 0x5b2 <OLED_WriteChar+0x26>
 5b2:	00 d0       	rcall	.+0      	; 0x5b4 <OLED_WriteChar+0x28>
 5b4:	00 d0       	rcall	.+0      	; 0x5b6 <OLED_WriteChar+0x2a>
 5b6:	cd b7       	in	r28, 0x3d	; 61
 5b8:	de b7       	in	r29, 0x3e	; 62
 5ba:	34 2f       	mov	r19, r20
 5bc:	49 83       	std	Y+1, r20	; 0x01
 5be:	5a 83       	std	Y+2, r21	; 0x02
 5c0:	6b 83       	std	Y+3, r22	; 0x03
 5c2:	7c 83       	std	Y+4, r23	; 0x04
 5c4:	8d 83       	std	Y+5, r24	; 0x05
 5c6:	9e 83       	std	Y+6, r25	; 0x06
 5c8:	d2 2e       	mov	r13, r18
 5ca:	b0 2e       	mov	r11, r16
 5cc:	9e 2c       	mov	r9, r14
 5ce:	96 1a       	sub	r9, r22
 5d0:	03 2f       	mov	r16, r19
 5d2:	10 e0       	ldi	r17, 0x00	; 0
 5d4:	45 2e       	mov	r4, r21
 5d6:	51 2c       	mov	r5, r1
 5d8:	04 9d       	mul	r16, r4
 5da:	70 01       	movw	r14, r0
 5dc:	05 9d       	mul	r16, r5
 5de:	f0 0c       	add	r15, r0
 5e0:	14 9d       	mul	r17, r4
 5e2:	f0 0c       	add	r15, r0
 5e4:	11 24       	eor	r1, r1
 5e6:	8c e3       	ldi	r24, 0x3C	; 60
 5e8:	d6 d1       	rcall	.+940    	; 0x996 <oledSendStart>
 5ea:	80 e4       	ldi	r24, 0x40	; 64
 5ec:	f8 d1       	rcall	.+1008   	; 0x9de <oledSendByte>
 5ee:	21 2c       	mov	r2, r1
 5f0:	31 2c       	mov	r3, r1
 5f2:	40 c0       	rjmp	.+128    	; 0x674 <OLED_WriteChar+0xe8>
 5f4:	6d 2d       	mov	r22, r13
 5f6:	62 0d       	add	r22, r2
 5f8:	8b 2d       	mov	r24, r11
 5fa:	86 0d       	add	r24, r6
 5fc:	81 d1       	rcall	.+770    	; 0x900 <OLED_SetCursor>
 5fe:	2c 81       	ldd	r18, Y+4	; 0x04
 600:	3d 81       	ldd	r19, Y+5	; 0x05
 602:	4e 81       	ldd	r20, Y+6	; 0x06
 604:	9e 9c       	mul	r9, r14
 606:	c0 01       	movw	r24, r0
 608:	9f 9c       	mul	r9, r15
 60a:	90 0d       	add	r25, r0
 60c:	11 24       	eor	r1, r1
 60e:	24 9c       	mul	r2, r4
 610:	b0 01       	movw	r22, r0
 612:	25 9c       	mul	r2, r5
 614:	70 0d       	add	r23, r0
 616:	34 9c       	mul	r3, r4
 618:	70 0d       	add	r23, r0
 61a:	11 24       	eor	r1, r1
 61c:	86 0f       	add	r24, r22
 61e:	97 1f       	adc	r25, r23
 620:	86 0d       	add	r24, r6
 622:	97 1d       	adc	r25, r7
 624:	28 0f       	add	r18, r24
 626:	39 1f       	adc	r19, r25
 628:	41 1d       	adc	r20, r1
 62a:	97 fd       	sbrc	r25, 7
 62c:	4a 95       	dec	r20
 62e:	f9 01       	movw	r30, r18
 630:	84 91       	lpm	r24, Z
 632:	47 fd       	sbrc	r20, 7
 634:	80 81       	ld	r24, Z
 636:	aa 20       	and	r10, r10
 638:	59 f0       	breq	.+22     	; 0x650 <OLED_WriteChar+0xc4>
 63a:	92 01       	movw	r18, r4
 63c:	21 50       	subi	r18, 0x01	; 1
 63e:	31 09       	sbc	r19, r1
 640:	62 16       	cp	r6, r18
 642:	73 06       	cpc	r7, r19
 644:	29 f4       	brne	.+10     	; 0x650 <OLED_WriteChar+0xc4>
 646:	88 20       	and	r8, r8
 648:	11 f0       	breq	.+4      	; 0x64e <OLED_WriteChar+0xc2>
 64a:	80 6c       	ori	r24, 0xC0	; 192
 64c:	01 c0       	rjmp	.+2      	; 0x650 <OLED_WriteChar+0xc4>
 64e:	80 68       	ori	r24, 0x80	; 128
 650:	cc 20       	and	r12, r12
 652:	19 f0       	breq	.+6      	; 0x65a <OLED_WriteChar+0xce>
 654:	80 95       	com	r24
 656:	c3 d1       	rcall	.+902    	; 0x9de <oledSendByte>
 658:	01 c0       	rjmp	.+2      	; 0x65c <OLED_WriteChar+0xd0>
 65a:	c1 d1       	rcall	.+898    	; 0x9de <oledSendByte>
 65c:	8f ef       	ldi	r24, 0xFF	; 255
 65e:	68 1a       	sub	r6, r24
 660:	78 0a       	sbc	r7, r24
 662:	02 c0       	rjmp	.+4      	; 0x668 <OLED_WriteChar+0xdc>
 664:	61 2c       	mov	r6, r1
 666:	71 2c       	mov	r7, r1
 668:	64 14       	cp	r6, r4
 66a:	75 04       	cpc	r7, r5
 66c:	1c f2       	brlt	.-122    	; 0x5f4 <OLED_WriteChar+0x68>
 66e:	8f ef       	ldi	r24, 0xFF	; 255
 670:	28 1a       	sub	r2, r24
 672:	38 0a       	sbc	r3, r24
 674:	20 16       	cp	r2, r16
 676:	31 06       	cpc	r3, r17
 678:	ac f3       	brlt	.-22     	; 0x664 <OLED_WriteChar+0xd8>
 67a:	26 96       	adiw	r28, 0x06	; 6
 67c:	0f b6       	in	r0, 0x3f	; 63
 67e:	f8 94       	cli
 680:	de bf       	out	0x3e, r29	; 62
 682:	0f be       	out	0x3f, r0	; 63
 684:	cd bf       	out	0x3d, r28	; 61
 686:	df 91       	pop	r29
 688:	cf 91       	pop	r28
 68a:	1f 91       	pop	r17
 68c:	0f 91       	pop	r16
 68e:	ff 90       	pop	r15
 690:	ef 90       	pop	r14
 692:	df 90       	pop	r13
 694:	cf 90       	pop	r12
 696:	bf 90       	pop	r11
 698:	af 90       	pop	r10
 69a:	9f 90       	pop	r9
 69c:	8f 90       	pop	r8
 69e:	7f 90       	pop	r7
 6a0:	6f 90       	pop	r6
 6a2:	5f 90       	pop	r5
 6a4:	4f 90       	pop	r4
 6a6:	3f 90       	pop	r3
 6a8:	2f 90       	pop	r2
 6aa:	08 95       	ret

Disassembly of section .text.OLED_WriteTwoDigitNumber:

000006ac <OLED_WriteTwoDigitNumber>:
 6ac:	8f 92       	push	r8
 6ae:	9f 92       	push	r9
 6b0:	af 92       	push	r10
 6b2:	bf 92       	push	r11
 6b4:	cf 92       	push	r12
 6b6:	df 92       	push	r13
 6b8:	ef 92       	push	r14
 6ba:	ff 92       	push	r15
 6bc:	0f 93       	push	r16
 6be:	1f 93       	push	r17
 6c0:	cf 93       	push	r28
 6c2:	df 93       	push	r29
 6c4:	00 d0       	rcall	.+0      	; 0x6c6 <OLED_WriteTwoDigitNumber+0x1a>
 6c6:	00 d0       	rcall	.+0      	; 0x6c8 <OLED_WriteTwoDigitNumber+0x1c>
 6c8:	00 d0       	rcall	.+0      	; 0x6ca <OLED_WriteTwoDigitNumber+0x1e>
 6ca:	cd b7       	in	r28, 0x3d	; 61
 6cc:	de b7       	in	r29, 0x3e	; 62
 6ce:	49 83       	std	Y+1, r20	; 0x01
 6d0:	5a 83       	std	Y+2, r21	; 0x02
 6d2:	6b 83       	std	Y+3, r22	; 0x03
 6d4:	7c 83       	std	Y+4, r23	; 0x04
 6d6:	8d 83       	std	Y+5, r24	; 0x05
 6d8:	9e 83       	std	Y+6, r25	; 0x06
 6da:	b2 2e       	mov	r11, r18
 6dc:	9e 2c       	mov	r9, r14
 6de:	da 2c       	mov	r13, r10
 6e0:	a8 2c       	mov	r10, r8
 6e2:	1d ec       	ldi	r17, 0xCD	; 205
 6e4:	e1 9e       	mul	r14, r17
 6e6:	11 2d       	mov	r17, r1
 6e8:	11 24       	eor	r1, r1
 6ea:	16 95       	lsr	r17
 6ec:	16 95       	lsr	r17
 6ee:	16 95       	lsr	r17
 6f0:	0f 2e       	mov	r0, r31
 6f2:	f0 e3       	ldi	r31, 0x30	; 48
 6f4:	ef 2e       	mov	r14, r31
 6f6:	f0 2d       	mov	r31, r0
 6f8:	e1 0e       	add	r14, r17
 6fa:	8e 88       	ldd	r8, Y+22	; 0x16
 6fc:	47 df       	rcall	.-370    	; 0x58c <OLED_WriteChar>
 6fe:	49 81       	ldd	r20, Y+1	; 0x01
 700:	11 0f       	add	r17, r17
 702:	81 2f       	mov	r24, r17
 704:	88 0f       	add	r24, r24
 706:	88 0f       	add	r24, r24
 708:	18 0f       	add	r17, r24
 70a:	89 2d       	mov	r24, r9
 70c:	81 1b       	sub	r24, r17
 70e:	0f 2e       	mov	r0, r31
 710:	f0 e3       	ldi	r31, 0x30	; 48
 712:	ef 2e       	mov	r14, r31
 714:	f0 2d       	mov	r31, r0
 716:	e8 0e       	add	r14, r24
 718:	2b 2d       	mov	r18, r11
 71a:	24 0f       	add	r18, r20
 71c:	8e 88       	ldd	r8, Y+22	; 0x16
 71e:	ad 88       	ldd	r10, Y+21	; 0x15
 720:	cd 2c       	mov	r12, r13
 722:	5a 81       	ldd	r21, Y+2	; 0x02
 724:	6b 81       	ldd	r22, Y+3	; 0x03
 726:	7c 81       	ldd	r23, Y+4	; 0x04
 728:	8d 81       	ldd	r24, Y+5	; 0x05
 72a:	9e 81       	ldd	r25, Y+6	; 0x06
 72c:	2f df       	rcall	.-418    	; 0x58c <OLED_WriteChar>
 72e:	26 96       	adiw	r28, 0x06	; 6
 730:	0f b6       	in	r0, 0x3f	; 63
 732:	f8 94       	cli
 734:	de bf       	out	0x3e, r29	; 62
 736:	0f be       	out	0x3f, r0	; 63
 738:	cd bf       	out	0x3d, r28	; 61
 73a:	df 91       	pop	r29
 73c:	cf 91       	pop	r28
 73e:	1f 91       	pop	r17
 740:	0f 91       	pop	r16
 742:	ff 90       	pop	r15
 744:	ef 90       	pop	r14
 746:	df 90       	pop	r13
 748:	cf 90       	pop	r12
 74a:	bf 90       	pop	r11
 74c:	af 90       	pop	r10
 74e:	9f 90       	pop	r9
 750:	8f 90       	pop	r8
 752:	08 95       	ret

Disassembly of section .text.OLED_DrawBitmapRLE:

00000754 <OLED_DrawBitmapRLE>:
#endif

void OLED_DrawBitmapRLE(unsigned char Xpos, unsigned char Ypos, const unsigned char *CompressedBitmap, unsigned int RleLength)
{
 754:	4f 92       	push	r4
 756:	5f 92       	push	r5
 758:	6f 92       	push	r6
 75a:	8f 92       	push	r8
 75c:	9f 92       	push	r9
 75e:	af 92       	push	r10
 760:	bf 92       	push	r11
 762:	cf 92       	push	r12
 764:	df 92       	push	r13
 766:	ef 92       	push	r14
 768:	0f 93       	push	r16
 76a:	1f 93       	push	r17
 76c:	cf 93       	push	r28
 76e:	df 93       	push	r29
 770:	69 01       	movw	r12, r18
 772:	e4 2e       	mov	r14, r20
 774:	48 01       	movw	r8, r16
	unsigned char NumOfRawsInBitmap, NumOfBytes,ByteValue;
	
	//	(Hight%8 == 0) ? NumOfRawsInBitmap = Hight/8 : NumOfRawsInBitmap = Hight/8+1;
	
   OLED_SetCursor(0,0);
 776:	60 e0       	ldi	r22, 0x00	; 0
 778:	80 e0       	ldi	r24, 0x00	; 0
 77a:	c2 d0       	rcall	.+388    	; 0x900 <OLED_SetCursor>
   
   oledSendStart(SSD1306_ADDRESS);
 77c:	8c e3       	ldi	r24, 0x3C	; 60
 77e:	0b d1       	rcall	.+534    	; 0x996 <oledSendStart>
   oledSendByte(SSD1306_DATA_CONTINUE);
 780:	80 e4       	ldi	r24, 0x40	; 64
 782:	2d d1       	rcall	.+602    	; 0x9de <oledSendByte>
   
   	for (unsigned int i=0; i< RleLength/2; i++)
 784:	a1 2c       	mov	r10, r1
 786:	b1 2c       	mov	r11, r1
 788:	1e c0       	rjmp	.+60     	; 0x7c6 <OLED_DrawBitmapRLE+0x72>
	{
		NumOfBytes = *CompressedBitmap++;
 78a:	f6 01       	movw	r30, r12
 78c:	d4 91       	lpm	r29, Z
 78e:	e7 fc       	sbrc	r14, 7
 790:	d0 81       	ld	r29, Z
		ByteValue = *CompressedBitmap++;
 792:	26 01       	movw	r4, r12
 794:	6e 2c       	mov	r6, r14
 796:	82 e0       	ldi	r24, 0x02	; 2
 798:	48 0e       	add	r4, r24
 79a:	51 1c       	adc	r5, r1
 79c:	61 1c       	adc	r6, r1
 79e:	8f ef       	ldi	r24, 0xFF	; 255
 7a0:	c8 1a       	sub	r12, r24
 7a2:	d8 0a       	sbc	r13, r24
 7a4:	e8 0a       	sbc	r14, r24
 7a6:	f6 01       	movw	r30, r12
 7a8:	14 91       	lpm	r17, Z
 7aa:	e7 fc       	sbrc	r14, 7
 7ac:	10 81       	ld	r17, Z
		
		for (unsigned char x=0; x < NumOfBytes; x++)
 7ae:	c0 e0       	ldi	r28, 0x00	; 0
 7b0:	03 c0       	rjmp	.+6      	; 0x7b8 <OLED_DrawBitmapRLE+0x64>
		oledSendByte (ByteValue);
 7b2:	81 2f       	mov	r24, r17
 7b4:	14 d1       	rcall	.+552    	; 0x9de <oledSendByte>
   	for (unsigned int i=0; i< RleLength/2; i++)
	{
		NumOfBytes = *CompressedBitmap++;
		ByteValue = *CompressedBitmap++;
		
		for (unsigned char x=0; x < NumOfBytes; x++)
 7b6:	cf 5f       	subi	r28, 0xFF	; 255
 7b8:	cd 17       	cp	r28, r29
 7ba:	d8 f3       	brcs	.-10     	; 0x7b2 <OLED_DrawBitmapRLE+0x5e>
   OLED_SetCursor(0,0);
   
   oledSendStart(SSD1306_ADDRESS);
   oledSendByte(SSD1306_DATA_CONTINUE);
   
   	for (unsigned int i=0; i< RleLength/2; i++)
 7bc:	8f ef       	ldi	r24, 0xFF	; 255
 7be:	a8 1a       	sub	r10, r24
 7c0:	b8 0a       	sbc	r11, r24
	{
		NumOfBytes = *CompressedBitmap++;
		ByteValue = *CompressedBitmap++;
 7c2:	e6 2c       	mov	r14, r6
 7c4:	62 01       	movw	r12, r4
   OLED_SetCursor(0,0);
   
   oledSendStart(SSD1306_ADDRESS);
   oledSendByte(SSD1306_DATA_CONTINUE);
   
   	for (unsigned int i=0; i< RleLength/2; i++)
 7c6:	c4 01       	movw	r24, r8
 7c8:	96 95       	lsr	r25
 7ca:	87 95       	ror	r24
 7cc:	a8 16       	cp	r10, r24
 7ce:	b9 06       	cpc	r11, r25
 7d0:	e0 f2       	brcs	.-72     	; 0x78a <OLED_DrawBitmapRLE+0x36>
		
		for (unsigned char x=0; x < NumOfBytes; x++)
		oledSendByte (ByteValue);
	}
	
}
 7d2:	df 91       	pop	r29
 7d4:	cf 91       	pop	r28
 7d6:	1f 91       	pop	r17
 7d8:	0f 91       	pop	r16
 7da:	ef 90       	pop	r14
 7dc:	df 90       	pop	r13
 7de:	cf 90       	pop	r12
 7e0:	bf 90       	pop	r11
 7e2:	af 90       	pop	r10
 7e4:	9f 90       	pop	r9
 7e6:	8f 90       	pop	r8
 7e8:	6f 90       	pop	r6
 7ea:	5f 90       	pop	r5
 7ec:	4f 90       	pop	r4
 7ee:	08 95       	ret

Disassembly of section .text.__dummy_fini:

000009e4 <_fini>:
 9e4:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000009e6 <__funcs_on_exit>:
 9e6:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000009e8 <__simulator_exit>:
 9e8:	08 95       	ret

Disassembly of section .text.exit:

000009b4 <exit>:
 9b4:	ec 01       	movw	r28, r24
 9b6:	17 d0       	rcall	.+46     	; 0x9e6 <__funcs_on_exit>
 9b8:	15 d0       	rcall	.+42     	; 0x9e4 <_fini>
 9ba:	ce 01       	movw	r24, r28
 9bc:	15 d0       	rcall	.+42     	; 0x9e8 <__simulator_exit>
 9be:	ce 01       	movw	r24, r28
 9c0:	14 d0       	rcall	.+40     	; 0x9ea <_Exit>

Disassembly of section .text._Exit:

000009ea <_Exit>:
 9ea:	4c db       	rcall	.-2408   	; 0x84 <_exit>
